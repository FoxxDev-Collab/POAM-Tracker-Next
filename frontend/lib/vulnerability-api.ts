// Server-side API functions - only use these in server components
import { queuedFetch } from './request-queue';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:3001';

// This helper is only for server components
async function getServerAuthHeaders(): Promise<Record<string, string>> {
  // Only import this in server components
  const { cookies } = await import('next/headers');
  const cookieStore = await cookies();
  const token = cookieStore.get('token');

  const headers: Record<string, string> = {
    'Content-Type': 'application/json'
  };

  if (token) {
    headers['Authorization'] = `Bearer ${token.value}`;
  }

  return headers;
}

// Types for vulnerability center data
export interface GroupScore {
  id: number;
  groupId: number;
  assessmentCompleteness: number;
  overallCompliance: number;
  totalSystems: number;
  completeAssessments: number;
  highestSystemScore: number;
  lowestSystemScore: number;
  worstSystemId: number | null;
  worstSystemName: string | null;
  totalFindings: number;
  openFindings: number;
  notReviewedFindings: number;
  catITotal: number;
  catIOpen: number;
  catIITotal: number;
  catIIOpen: number;
  catIIITotal: number;
  catIIIOpen: number;
  controlsAffected: number;
  controlsCompliant: number;
  calculatedAt: string;
  group?: {
    id: number;
    name: string;
    description: string | null;
  };
  worstSystem?: {
    id: number;
    name: string;
    hostname: string | null;
  };
}

export interface PackageScore {
  id: number;
  packageId: number;
  assessmentCompleteness: number;
  overallCompliance: number;
  totalGroups: number;
  completeGroups: number;
  highestGroupScore: number;
  lowestGroupScore: number;
  worstGroupId: number | null;
  worstGroupName: string | null;
  totalSystems: number;
  completeAssessments: number;
  worstSystemId: number | null;
  worstSystemName: string | null;
  totalFindings: number;
  openFindings: number;
  notReviewedFindings: number;
  catITotal: number;
  catIOpen: number;
  catIITotal: number;
  catIIOpen: number;
  catIIITotal: number;
  catIIIOpen: number;
  controlsAffected: number;
  controlsCompliant: number;
  calculatedAt: string;
  package?: {
    id: number;
    name: string;
    description: string | null;
  };
  worstGroup?: {
    id: number;
    name: string;
    description: string | null;
  };
  worstSystem?: {
    id: number;
    name: string;
    hostname: string | null;
  };
}

export interface SystemScore {
  id: number;
  systemId: number;
  scanId: number;
  assessmentProgress: number;
  complianceScore: number;
  totalFindings: number;
  openFindings: number;
  notReviewedFindings: number;
  catIOpen: number;
  catIIOpen: number;
  catIIIOpen: number;
  calculatedAt: string;
}

export interface ControlStatus {
  id: number;
  controlId: string;
  systemsAffected: number;
  systemsCompliant: number;
  assessmentComplete: boolean;
  totalFindings: number;
  openFindings: number;
  catIOpen: number;
  catIIOpen: number;
  catIIIOpen: number;
  status: string;
  lastAssessed: string;
}

// Fetch group score
export async function fetchGroupScore(groupId: number): Promise<GroupScore | null> {
  try {
    const headers = await getServerAuthHeaders();
    const response = await queuedFetch(`${BACKEND_URL}/vulnerability-center/groups/${groupId}/score`, {
      headers,
      cache: 'no-store',
    });

    if (!response.ok) {
      console.error(`Failed to fetch group score: ${response.status}`);
      return null;
    }

    const text = await response.text();
    if (!text) return null;

    try {
      return JSON.parse(text);
    } catch (parseError) {
      console.error('Failed to parse group score response:', parseError);
      return null;
    }
  } catch (error) {
    console.error('Error fetching group score:', error);
    return null;
  }
}

// Fetch package score
export async function fetchPackageScore(packageId: number): Promise<PackageScore | null> {
  try {
    const headers = await getServerAuthHeaders();
    const response = await queuedFetch(`${BACKEND_URL}/vulnerability-center/packages/${packageId}/score`, {
      headers,
      cache: 'no-store',
    });

    if (!response.ok) {
      console.error(`Failed to fetch package score: ${response.status}`);
      return null;
    }

    const text = await response.text();
    if (!text) return null;

    try {
      return JSON.parse(text);
    } catch (parseError) {
      console.error('Failed to parse package score response:', parseError);
      return null;
    }
  } catch (error) {
    console.error('Error fetching package score:', error);
    return null;
  }
}

// Fetch system score
export async function fetchSystemScore(systemId: number): Promise<SystemScore | null> {
  try {
    const headers = await getServerAuthHeaders();
    const response = await queuedFetch(`${BACKEND_URL}/vulnerability-center/systems/${systemId}/score`, {
      headers,
      cache: 'no-store',
    });

    if (!response.ok) {
      console.error(`Failed to fetch system score: ${response.status}`);
      return null;
    }

    const text = await response.text();
    if (!text) return null;

    try {
      return JSON.parse(text);
    } catch (parseError) {
      console.error('Failed to parse system score response:', parseError);
      return null;
    }
  } catch (error) {
    console.error('Error fetching system score:', error);
    return null;
  }
}

// Fetch control status for group
export async function fetchGroupControlStatus(groupId: number): Promise<ControlStatus[]> {
  try {
    const headers = await getServerAuthHeaders();
    const response = await fetch(`${BACKEND_URL}/vulnerability-center/groups/${groupId}/control-status`, {
      headers,
      cache: 'no-store',
    });

    if (!response.ok) {
      console.error(`Failed to fetch group control status: ${response.status}`);
      return [];
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching group control status:', error);
    return [];
  }
}

// Fetch control status for package
export async function fetchPackageControlStatus(packageId: number): Promise<ControlStatus[]> {
  try {
    const headers = await getServerAuthHeaders();
    const response = await fetch(`${BACKEND_URL}/vulnerability-center/packages/${packageId}/control-status`, {
      headers,
      cache: 'no-store',
    });

    if (!response.ok) {
      console.error(`Failed to fetch package control status: ${response.status}`);
      return [];
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching package control status:', error);
    return [];
  }
}

// Recalculate group score
export async function recalculateGroupScore(groupId: number): Promise<boolean> {
  try {
    const headers = await getServerAuthHeaders();
    const response = await fetch(`${BACKEND_URL}/vulnerability-center/groups/${groupId}/recalculate-score`, {
      method: 'POST',
      headers,
    });

    return response.ok;
  } catch (error) {
    console.error('Error recalculating group score:', error);
    return false;
  }
}

// Recalculate package score
export async function recalculatePackageScore(packageId: number): Promise<boolean> {
  try {
    const headers = await getServerAuthHeaders();
    const response = await fetch(`${BACKEND_URL}/vulnerability-center/packages/${packageId}/recalculate-score`, {
      method: 'POST',
      headers,
    });

    return response.ok;
  } catch (error) {
    console.error('Error recalculating package score:', error);
    return false;
  }
}