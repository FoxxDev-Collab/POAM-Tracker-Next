'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { RefreshCw, Loader2 } from 'lucide-react';
// Use client-side API URL directly
const apiUrl = (endpoint?: string) => {
  const baseUrl = 'http://localhost:3001';
  if (!endpoint) return baseUrl;
  return `${baseUrl}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;
};

interface RecalculateButtonProps {
  type: 'group' | 'package';
  id: number;
  onRecalculated?: () => void;
}

export function RecalculateButton({ type, id, onRecalculated }: RecalculateButtonProps) {
  const [loading, setLoading] = useState(false);

  const handleRecalculate = async () => {
    try {
      setLoading(true);
      const endpoint = type === 'group'
        ? `/vulnerability-center/groups/${id}/recalculate-score`
        : `/vulnerability-center/packages/${id}/recalculate-score`;

      const response = await fetch(`${apiUrl(endpoint)}`, {
        method: 'POST',
      });

      if (response.ok) {
        if (onRecalculated) {
          onRecalculated();
        } else {
          // Refresh the page if no callback provided
          window.location.reload();
        }
      } else {
        console.error(`Failed to recalculate ${type} score`);
      }
    } catch (error) {
      console.error(`Error recalculating ${type} score:`, error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Button
      onClick={handleRecalculate}
      variant="outline"
      size="sm"
      disabled={loading}
    >
      {loading ? (
        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
      ) : (
        <RefreshCw className="mr-2 h-4 w-4" />
      )}
      Recalculate Scores
    </Button>
  );
}