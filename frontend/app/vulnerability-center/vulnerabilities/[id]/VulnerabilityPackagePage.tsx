import React, { Suspense } from 'react';
import { cookies } from 'next/headers';
import PackageScoreSection from './PackageScoreSection';
import { Card, CardContent } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:3001';

interface Group {
  id: number;
  name: string;
  description: string | null;
  _count?: {
    systems: number;
  };
}

interface Package {
  id: number;
  name: string;
  description: string | null;
}

async function getAuthHeaders(): Promise<HeadersInit> {
  const cookieStore = await cookies();
  const token = cookieStore.get('token');
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
  };
  if (token) headers['Authorization'] = `Bearer ${token.value}`;
  return headers;
}

async function fetchPackageData(packageId: number) {
  try {
    const headers = await getAuthHeaders();

    // Fetch package details
    const packageResponse = await fetch(`${BACKEND_URL}/packages/${packageId}`, {
      headers,
      cache: 'no-store',
    });

    let packageData: Package | null = null;
    if (packageResponse.ok) {
      packageData = await packageResponse.json();
    }

    // Fetch groups
    const groupsResponse = await fetch(`${BACKEND_URL}/packages/${packageId}/groups`, {
      headers,
      cache: 'no-store',
    });

    let groups: Group[] = [];
    if (groupsResponse.ok) {
      const groupsData = await groupsResponse.json();
      groups = groupsData.items || groupsData || [];
    }

    return { packageData, groups };
  } catch (error) {
    console.error('Error fetching package data:', error);
    return { packageData: null, groups: [] };
  }
}

function ScoresSkeleton() {
  return (
    <div className="space-y-6">
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        <Card className="md:col-span-2 lg:col-span-1">
          <CardContent className="p-6">
            <Skeleton className="h-4 w-32 mb-4" />
            <Skeleton className="h-8 w-16 mb-2" />
            <Skeleton className="h-2 w-full mb-4" />
            <Skeleton className="h-3 w-full" />
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <Skeleton className="h-4 w-24 mb-4" />
            <div className="grid grid-cols-2 gap-4">
              <Skeleton className="h-8 w-full" />
              <Skeleton className="h-8 w-full" />
              <Skeleton className="h-8 w-full" />
              <Skeleton className="h-8 w-full" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <Skeleton className="h-4 w-32 mb-4" />
            <div className="grid grid-cols-2 gap-4">
              <Skeleton className="h-8 w-full" />
              <Skeleton className="h-8 w-full" />
            </div>
            <div className="mt-4 space-y-2">
              <Skeleton className="h-3 w-full" />
              <Skeleton className="h-3 w-full" />
              <Skeleton className="h-3 w-3/4" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardContent className="p-6">
          <Skeleton className="h-6 w-40 mb-4" />
          <div className="space-y-3">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

interface VulnerabilityPackagePageProps {
  packageId: number;
}

export default async function VulnerabilityPackagePage({ packageId }: VulnerabilityPackagePageProps) {
  const { packageData, groups } = await fetchPackageData(packageId);

  if (!packageData) {
    return (
      <Card>
        <CardContent className="p-6">
          <p className="text-muted-foreground">Package not found or error loading data.</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-8">
      <Suspense fallback={<ScoresSkeleton />}>
        <PackageScoreSection
          packageId={packageId}
          packageName={packageData.name}
          groups={groups}
        />
      </Suspense>
    </div>
  );
}