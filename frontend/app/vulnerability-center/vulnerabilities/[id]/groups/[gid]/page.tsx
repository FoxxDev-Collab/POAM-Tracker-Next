import { cookies } from "next/headers";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import Link from "next/link";
import { ArrowLeft, ShieldAlert, ShieldCheck, ScanLine } from "lucide-react";
import GroupSystemsManager, { type SystemItem as GroupSystemItem } from "./GroupSystemsManager";

export const dynamic = "force-dynamic";

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:3001';

interface Group {
  id: number;
  package_id: number;
  name: string;
  description: string | null;
}

interface System {
  id: number;
  name: string;
  group_id: number;
  package_id: number;
}

interface LatestScan {
  id: number;
  system_id: number;
  title: string | null;
  checklist_id: string | null;
  created_at: string;
}

async function getAuthHeaders(): Promise<HeadersInit> {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  if (token) headers['Authorization'] = `Bearer ${token.value}`
  return headers
}

export default async function GroupDetailPage({ params }: { params: Promise<{ id: string; gid: string }> }) {
  const { id: pid, gid: g } = await params;
  const packageId = Number(pid);
  const gid = Number(g);

  let group: Group | null = null;
  let systems: System[] = [];
  
  try {
    // Fetch group data from API
    const headers = await getAuthHeaders();
    const groupResponse = await fetch(`${BACKEND_URL}/groups/${gid}`, { headers });
    
    if (!groupResponse.ok) {
      console.error(`Group fetch failed: ${groupResponse.status} ${groupResponse.statusText}`);
      return (
        <div className="max-w-4xl mx-auto space-y-4 p-6">
          <div className="text-sm text-muted-foreground">Group not found.</div>
          <Link href={`/vulnerability-center/vulnerabilities/${packageId}`}><Button variant="outline">Back to Package</Button></Link>
        </div>
      );
    }
    
    // Check content type before parsing
    const contentType = groupResponse.headers.get("content-type");
    if (contentType && contentType.includes("application/json")) {
      group = await groupResponse.json() as Group;
    } else {
      console.error("Group response is not JSON:", await groupResponse.text());
      throw new Error("Invalid response format");
    }
    
    // Fetch systems for this group
    const systemsResponse = await fetch(`${BACKEND_URL}/systems?groupId=${gid}`, { headers });
    
    if (systemsResponse.ok) {
      const systemsContentType = systemsResponse.headers.get("content-type");
      if (systemsContentType && systemsContentType.includes("application/json")) {
        const systemsData = await systemsResponse.json();
        // Handle both array and object with items property
        systems = Array.isArray(systemsData) ? systemsData as System[] : ((systemsData.items || []) as System[]);
      } else {
        console.error("Systems response is not JSON:", await systemsResponse.text());
      }
    }
  } catch (error) {
    console.error("Error fetching group data:", error);
    return (
      <div className="max-w-4xl mx-auto space-y-4 p-6">
        <div className="text-sm text-muted-foreground">Error loading group data: {error instanceof Error ? error.message : 'Unknown error'}</div>
        <Link href={`/vulnerability-center/vulnerabilities/${packageId}`}><Button variant="outline">Back to Package</Button></Link>
      </div>
    );
  }
  
  if (!group) {
    return (
      <div className="max-w-4xl mx-auto space-y-4 p-6">
        <div className="text-sm text-muted-foreground">Group not found.</div>
        <Link href={`/vulnerability-center/vulnerabilities/${packageId}`}><Button variant="outline">Back to Package</Button></Link>
      </div>
    );
  }

  // Placeholder stats until API endpoints are ready
  const totalFindings = 0;
  const bySeverity: { k: string; c: number }[] = [];
  const byStatus: { k: string; c: number }[] = [];
  const latestScan = null as LatestScan | null;

  function getCount(arr: { k: string; c: number }[], key: string) {
    return arr.find(x => (x.k || '').toLowerCase() === key.toLowerCase())?.c ?? 0
  }

  function statusAccent(k: string) {
    const v = (k || '').toLowerCase()
    if (v === 'open') return 'border-red-600/70'
    if (v === 'not_reviewed') return 'border-blue-600/70'
    if (v === 'not_applicable') return 'border-gray-500/60'
    if (v === 'not_a_finding') return 'border-green-600/70'
    if (v === 'mitigated') return 'border-amber-600/70'
    return 'border-muted-foreground/40'
  }

  return (
    <div className="p-6 grid gap-6">
        {/* Header */}
        <div className="rounded-md border bg-card text-card-foreground p-5">
          <div className="mb-3">
            <Button asChild variant="outline" size="sm">
              <Link href={`/vulnerability-center/vulnerabilities/${packageId}`}>
                <ArrowLeft className="h-4 w-4" />
                Back to Package
              </Link>
            </Button>
          </div>
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div className="space-y-1">
              <h2 className="text-2xl font-bold">{group.name}</h2>
              <p className="text-sm text-muted-foreground">{group.description || "No description"}</p>
            </div>
            <div className="text-sm text-muted-foreground">
              {systems.length} {systems.length === 1 ? 'System' : 'Systems'}
            </div>
          </div>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card className="border-t-4 border-blue-600 bg-blue-50/60 dark:bg-blue-950/20">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Findings (All Systems in Group)</CardTitle>
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{totalFindings}</CardContent>
          </Card>
          <Card className="border-t-4 border-red-600 bg-red-50/60 dark:bg-red-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">High (CAT I)</CardTitle>
              <ShieldAlert className="h-4 w-4 text-red-600" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{getCount(bySeverity, 'high') + getCount(bySeverity, 'cat i') + getCount(bySeverity, 'cat1')}</CardContent>
          </Card>
          <Card className="border-t-4 border-orange-500 bg-orange-50/60 dark:bg-orange-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">Medium (CAT II)</CardTitle>
              <ShieldAlert className="h-4 w-4 text-orange-500" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{getCount(bySeverity, 'medium') + getCount(bySeverity, 'cat ii') + getCount(bySeverity, 'cat2')}</CardContent>
          </Card>
          <Card className="border-t-4 border-yellow-500 bg-yellow-50/60 dark:bg-yellow-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">Low (CAT III)</CardTitle>
              <ShieldCheck className="h-4 w-4 text-yellow-500" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{getCount(bySeverity, 'low') + getCount(bySeverity, 'cat iii') + getCount(bySeverity, 'cat3')}</CardContent>
          </Card>
        </div>

        {/* Breakdown Panels */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>Status Breakdown</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 text-sm">
                {byStatus.map((s) => (
                  <div key={s.k} className={`flex items-center justify-between rounded-md border px-3 py-2 bg-background/50 border-l-4 ${statusAccent(s.k)}`}>
                    <span className="truncate capitalize">{(s.k || 'unknown').replace(/_/g, ' ')}</span>
                    <span className="font-semibold">{s.c}</span>
                  </div>
                ))}
                {byStatus.length === 0 && <div className="text-sm text-muted-foreground">No data yet.</div>}
              </div>
            </CardContent>
          </Card>
          <Card className="border-t-4 border-emerald-600 bg-emerald-50/60 dark:bg-emerald-950/20">
            <CardHeader>
              <CardTitle>Latest STIG Scan (Any System)</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-sm">
              {latestScan ? (
                <>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Title</span>
                    <span className="truncate max-w-[60%] text-right">{latestScan.title ?? '—'}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Checklist ID</span>
                    <span>{latestScan.checklist_id ?? '—'}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Imported</span>
                    <span>{new Date(latestScan.created_at).toLocaleString()}</span>
                  </div>
                  <Separator />
                  <div className="flex justify-end">
                    <Button asChild variant="outline" size="sm">
                      <Link href={`/vulnerability-center/systems/${latestScan.system_id}`}>
                        <ScanLine className="h-4 w-4" />
                        View System
                      </Link>
                    </Button>
                  </div>
                </>
              ) : (
                <div className="text-muted-foreground">No scans yet.</div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Systems in this Group */}
        <GroupSystemsManager gid={gid} packageId={packageId} initial={systems as GroupSystemItem[]} />
      </div>
  );
}

