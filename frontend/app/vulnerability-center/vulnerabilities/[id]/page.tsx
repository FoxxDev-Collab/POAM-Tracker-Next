"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { 
  ArrowLeft, Shield, Server, Users, BarChart3, ExternalLink, 
  Search, Filter, LayoutGrid, List, Calendar, AlertCircle, TrendingUp,
  SortAsc, SortDesc, MoreHorizontal, Package, AlertTriangle, CheckCircle,
  FileText, Activity, Clock, Target
} from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { toast } from "sonner"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { cn } from "@/lib/utils"
import { Progress } from "@/components/ui/progress"

interface Group {
  id: number
  name: string
  description: string | null
  package_id: number
  _count?: {
    systems: number
  }
  stats?: {
    totalFindings: number
    criticalFindings: number
    highFindings: number
    mediumFindings: number
    lowFindings: number
    openFindings: number
    complianceScore: number
  }
}

interface System {
  id: number
  name: string
  description: string | null
  group_id: number
  group_name?: string
  package_id?: number
  package_name?: string
  ip_address?: string
  mac_address?: string
  operating_system?: string
  location?: string
  stats?: {
    totalFindings: number
    criticalFindings: number
    highFindings: number
    mediumFindings: number
    lowFindings: number
    openFindings: number
    lastScanned?: string
    complianceScore: number
  }
}

interface Package {
  id: number
  name: string
  description: string | null
  atoExpirationDate: string | null
  securityControlSet?: string
  authorizingOfficial?: string
  systemOwner?: string
  isso?: string
}

type ViewItem = (Group | System) & { type: 'group' | 'system' }
type SortField = 'name' | 'type' | 'findings' | 'compliance' | 'critical' | 'lastScanned'
type SortOrder = 'asc' | 'desc'
type ViewMode = 'table' | 'card'
type ItemType = 'all' | 'groups' | 'systems'

export default function PackageDetailPage({ params }: { params: Promise<{ id: string }> }) {
  const router = useRouter()
  const [packageId, setPackageId] = useState<number>(0)
  
  const [packageData, setPackageData] = useState<Package | null>(null)
  const [groups, setGroups] = useState<Group[]>([])
  const [systems, setSystems] = useState<System[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [viewMode, setViewMode] = useState<ViewMode>('table')
  const [sortField, setSortField] = useState<SortField>('name')
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc')
  const [filterType, setFilterType] = useState<ItemType>('all')
  const [filterSeverity, setFilterSeverity] = useState<string>('all')
  const [selectedItems, setSelectedItems] = useState<number[]>([])
  const [selectedItemTypes, setSelectedItemTypes] = useState<Map<number, 'group' | 'system'>>(new Map())

  useEffect(() => {
    const unwrapParams = async () => {
      const resolvedParams = await params
      setPackageId(Number(resolvedParams.id))
    }
    unwrapParams()
  }, [params])

  useEffect(() => {
    if (packageId > 0) {
      fetchData()
    }
  }, [packageId])

  const fetchData = async () => {
    setLoading(true)
    try {
      // Fetch package details
      const pkgResponse = await fetch(`/api/packages/${packageId}`)
      if (pkgResponse.ok) {
        const pkgData = await pkgResponse.json()
        setPackageData(pkgData)
      }

      // Fetch groups
      const groupsResponse = await fetch(`/api/packages/${packageId}/groups`)
      if (groupsResponse.ok) {
        const groupsData = await groupsResponse.json()
        setGroups(groupsData.items || groupsData || [])
      }

      // Fetch systems
      const systemsResponse = await fetch(`/api/packages/${packageId}/systems`)
      if (systemsResponse.ok) {
        const systemsData = await systemsResponse.json()
        setSystems(systemsData.items || systemsData || [])
      }
    } catch (error) {
      console.error('Error fetching data:', error)
      toast.error("Failed to load package data")
    } finally {
      setLoading(false)
    }
  }

  // Combine groups and systems into a single array for unified display
  const allItems: ViewItem[] = [
    ...groups.map(g => ({ ...g, type: 'group' as const })),
    ...systems.map(s => ({ ...s, type: 'system' as const }))
  ]

  const filteredItems = allItems.filter(item => {
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.description?.toLowerCase().includes(searchTerm.toLowerCase())
    
    const matchesType = filterType === 'all' || 
      (filterType === 'groups' && item.type === 'group') ||
      (filterType === 'systems' && item.type === 'system')
    
    const matchesSeverity = filterSeverity === 'all' ||
      (filterSeverity === 'critical' && (item.stats?.criticalFindings || 0) > 0) ||
      (filterSeverity === 'high' && (item.stats?.highFindings || 0) > 0) ||
      (filterSeverity === 'medium' && (item.stats?.mediumFindings || 0) > 0) ||
      (filterSeverity === 'low' && (item.stats?.lowFindings || 0) > 0)
    
    return matchesSearch && matchesType && matchesSeverity
  })

  const sortedItems = [...filteredItems].sort((a, b) => {
    let aValue: string | number = 0
    let bValue: string | number = 0
    
    switch (sortField) {
      case 'name':
        aValue = a.name
        bValue = b.name
        break
      case 'type':
        aValue = a.type
        bValue = b.type
        break
      case 'findings':
        aValue = a.stats?.totalFindings || 0
        bValue = b.stats?.totalFindings || 0
        break
      case 'compliance':
        aValue = a.stats?.complianceScore || 0
        bValue = b.stats?.complianceScore || 0
        break
      case 'critical':
        aValue = a.stats?.criticalFindings || 0
        bValue = b.stats?.criticalFindings || 0
        break
      case 'lastScanned':
        aValue = (a.type === 'system' && a.stats?.lastScanned) ? new Date(a.stats.lastScanned).getTime() : 0
        bValue = (b.type === 'system' && b.stats?.lastScanned) ? new Date(b.stats.lastScanned).getTime() : 0
        break
    }
    
    if (sortOrder === 'asc') {
      return aValue > bValue ? 1 : -1
    } else {
      return aValue < bValue ? 1 : -1
    }
  })

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortOrder('asc')
    }
  }

  const toggleItemSelection = (itemId: number, itemType: 'group' | 'system') => {
    setSelectedItems(prev => {
      if (prev.includes(itemId)) {
        selectedItemTypes.delete(itemId)
        return prev.filter(id => id !== itemId)
      } else {
        selectedItemTypes.set(itemId, itemType)
        return [...prev, itemId]
      }
    })
    setSelectedItemTypes(new Map(selectedItemTypes))
  }

  const selectAllItems = () => {
    if (selectedItems.length === sortedItems.length) {
      setSelectedItems([])
      setSelectedItemTypes(new Map())
    } else {
      const newSelectedItems = sortedItems.map(item => item.id)
      const newSelectedTypes = new Map(sortedItems.map(item => [item.id, item.type]))
      setSelectedItems(newSelectedItems)
      setSelectedItemTypes(newSelectedTypes)
    }
  }

  const getComplianceColor = (score: number = 0) => {
    if (score >= 90) return "text-green-600 dark:text-green-400"
    if (score >= 70) return "text-yellow-600 dark:text-yellow-400"
    return "text-red-600 dark:text-red-400"
  }

  const getComplianceBadge = (score: number = 0) => {
    if (score >= 90) return { variant: "default" as const, className: "bg-green-500/10 text-green-700 dark:text-green-400 border-green-500/20" }
    if (score >= 70) return { variant: "default" as const, className: "bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 border-yellow-500/20" }
    return { variant: "default" as const, className: "bg-red-500/10 text-red-700 dark:text-red-400 border-red-500/20" }
  }

  const getSeverityBadge = (severity: string, count: number) => {
    if (count === 0) return null
    
    const variants = {
      critical: "bg-red-500/10 text-red-700 dark:text-red-400 border-red-500/20",
      high: "bg-orange-500/10 text-orange-700 dark:text-orange-400 border-orange-500/20",
      medium: "bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 border-yellow-500/20",
      low: "bg-blue-500/10 text-blue-700 dark:text-blue-400 border-blue-500/20"
    }
    
    return (
      <Badge variant="outline" className={cn("text-xs", variants[severity as keyof typeof variants])}>
        {count} {severity}
      </Badge>
    )
  }

  const stats = {
    totalGroups: groups.length,
    totalSystems: systems.length,
    totalFindings: allItems.reduce((acc, item) => acc + (item.stats?.totalFindings || 0), 0),
    criticalFindings: allItems.reduce((acc, item) => acc + (item.stats?.criticalFindings || 0), 0),
    avgCompliance: allItems.length > 0 
      ? Math.round(allItems.reduce((acc, item) => acc + (item.stats?.complianceScore || 0), 0) / allItems.length)
      : 0
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-muted-foreground">Loading package data...</div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <div className="flex items-center gap-2 mb-2">
            <Button variant="outline" size="sm" onClick={() => router.push('/vulnerability-center/vulnerabilities')}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Packages
            </Button>
          </div>
          <h1 className="text-3xl font-bold flex items-center gap-2">
            <Package className="h-8 w-8 text-primary" />
            {packageData?.name || 'Package Details'}
          </h1>
          <p className="text-muted-foreground">
            {packageData?.description || 'Comprehensive view of all groups and systems in this ATO package'}
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => router.push('/vulnerability-center/vulnerabilities/import')}>
            <FileText className="h-4 w-4 mr-2" />
            Import Scan Data
          </Button>
          <Button variant="outline" onClick={() => router.push('/vulnerability-center/poams')}>
            <Target className="h-4 w-4 mr-2" />
            View POAMs
          </Button>
        </div>
      </div>

      {/* ATO Info Card (if available) */}
      {packageData?.atoExpirationDate && (
        <Card className="border-l-4 border-primary">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-muted-foreground">ATO Package Information</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="text-muted-foreground">ATO Expiration:</span>
                <div className="font-medium flex items-center gap-2 mt-1">
                  <Calendar className="h-4 w-4" />
                  {new Date(packageData.atoExpirationDate).toLocaleDateString()}
                </div>
              </div>
              {packageData.authorizingOfficial && (
                <div>
                  <span className="text-muted-foreground">Authorizing Official:</span>
                  <div className="font-medium mt-1">{packageData.authorizingOfficial}</div>
                </div>
              )}
              {packageData.systemOwner && (
                <div>
                  <span className="text-muted-foreground">System Owner:</span>
                  <div className="font-medium mt-1">{packageData.systemOwner}</div>
                </div>
              )}
              {packageData.isso && (
                <div>
                  <span className="text-muted-foreground">ISSO:</span>
                  <div className="font-medium mt-1">{packageData.isso}</div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Groups</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalGroups}</div>
            <p className="text-xs text-muted-foreground mt-1">In this package</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Systems</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalSystems}</div>
            <p className="text-xs text-muted-foreground mt-1">Total systems</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Total Findings</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalFindings}</div>
            <p className="text-xs text-muted-foreground mt-1">Across all items</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Critical Issues</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600 dark:text-red-400">{stats.criticalFindings}</div>
            <p className="text-xs text-muted-foreground mt-1">Require attention</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Avg Compliance</CardTitle>
          </CardHeader>
          <CardContent>
            <div className={cn("text-2xl font-bold", getComplianceColor(stats.avgCompliance))}>
              {stats.avgCompliance}%
            </div>
            <p className="text-xs text-muted-foreground mt-1">Package average</p>
          </CardContent>
        </Card>
      </div>

      {/* Filters and Controls */}
      <div className="flex flex-col md:flex-row gap-4 items-start md:items-center justify-between">
        <div className="flex flex-1 gap-2 items-center w-full md:w-auto">
          <div className="relative flex-1 md:max-w-sm">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search groups and systems..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-9"
            />
          </div>
          
          <Select value={filterType} onValueChange={(v) => setFilterType(v as ItemType)}>
            <SelectTrigger className="w-[140px]">
              <Filter className="h-4 w-4 mr-2" />
              <SelectValue placeholder="Filter type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Items</SelectItem>
              <SelectItem value="groups">Groups Only</SelectItem>
              <SelectItem value="systems">Systems Only</SelectItem>
            </SelectContent>
          </Select>
          
          <Select value={filterSeverity} onValueChange={setFilterSeverity}>
            <SelectTrigger className="w-[160px]">
              <AlertTriangle className="h-4 w-4 mr-2" />
              <SelectValue placeholder="Filter severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Severities</SelectItem>
              <SelectItem value="critical">Has Critical</SelectItem>
              <SelectItem value="high">Has High</SelectItem>
              <SelectItem value="medium">Has Medium</SelectItem>
              <SelectItem value="low">Has Low</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        <div className="flex gap-2">
          <Tabs value={viewMode} onValueChange={(v) => setViewMode(v as ViewMode)}>
            <TabsList>
              <TabsTrigger value="table">
                <List className="h-4 w-4" />
              </TabsTrigger>
              <TabsTrigger value="card">
                <LayoutGrid className="h-4 w-4" />
              </TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
      </div>

      {/* Main Content */}
      {sortedItems.length === 0 ? (
        <Card>
          <CardContent className="text-center py-12">
            <Shield className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Items Found</h3>
            <p className="text-muted-foreground">
              {searchTerm || filterType !== 'all' || filterSeverity !== 'all' 
                ? "No groups or systems match your filters" 
                : "This package doesn't have any groups or systems yet."}
            </p>
          </CardContent>
        </Card>
      ) : viewMode === 'table' ? (
        <Card>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-[40px]">
                  <input
                    type="checkbox"
                    checked={selectedItems.length === sortedItems.length && sortedItems.length > 0}
                    onChange={selectAllItems}
                    className="rounded border-input"
                  />
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('name')}
                >
                  <div className="flex items-center gap-1">
                    Name
                    {sortField === 'name' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('type')}
                >
                  <div className="flex items-center gap-1">
                    Type
                    {sortField === 'type' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead>Description</TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('compliance')}
                >
                  <div className="flex items-center gap-1">
                    Compliance
                    {sortField === 'compliance' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('findings')}
                >
                  <div className="flex items-center gap-1">
                    Findings
                    {sortField === 'findings' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead>Severity Breakdown</TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('lastScanned')}
                >
                  <div className="flex items-center gap-1">
                    Last Scanned
                    {sortField === 'lastScanned' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {sortedItems.map((item) => {
                const complianceBadge = getComplianceBadge(item.stats?.complianceScore || 0)
                const isSystem = item.type === 'system'
                const lastScanned = isSystem && item.stats?.lastScanned 
                  ? new Date(item.stats.lastScanned)
                  : null
                const daysSinceScanned = lastScanned 
                  ? Math.floor((Date.now() - lastScanned.getTime()) / (1000 * 60 * 60 * 24))
                  : null
                  
                return (
                  <TableRow key={`${item.type}-${item.id}`} className="hover:bg-muted/50">
                    <TableCell>
                      <input
                        type="checkbox"
                        checked={selectedItems.includes(item.id)}
                        onChange={() => toggleItemSelection(item.id, item.type)}
                        className="rounded border-input"
                      />
                    </TableCell>
                    <TableCell className="font-medium">
                      <div className="flex items-center gap-2">
                        {item.type === 'group' ? (
                          <Users className="h-4 w-4 text-primary" />
                        ) : (
                          <Server className="h-4 w-4 text-primary" />
                        )}
                        {item.name}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline" className={item.type === 'group' ? 'bg-blue-50 dark:bg-blue-950/20' : 'bg-purple-50 dark:bg-purple-950/20'}>
                        {item.type === 'group' ? 'Group' : 'System'}
                      </Badge>
                    </TableCell>
                    <TableCell className="max-w-[300px]">
                      <p className="truncate text-muted-foreground">
                        {item.description || "No description provided"}
                      </p>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Badge 
                          variant={complianceBadge.variant}
                          className={complianceBadge.className}
                        >
                          {item.stats?.complianceScore || 0}%
                        </Badge>
                        <Progress 
                          value={item.stats?.complianceScore || 0} 
                          className="w-16 h-2"
                        />
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <AlertCircle className="h-4 w-4 text-muted-foreground" />
                        <span className="font-medium">{item.stats?.totalFindings || 0}</span>
                        <span className="text-muted-foreground">total</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-1 flex-wrap max-w-[250px]">
                        {getSeverityBadge('critical', item.stats?.criticalFindings || 0)}
                        {getSeverityBadge('high', item.stats?.highFindings || 0)}
                        {getSeverityBadge('medium', item.stats?.mediumFindings || 0)}
                        {getSeverityBadge('low', item.stats?.lowFindings || 0)}
                      </div>
                    </TableCell>
                    <TableCell>
                      {isSystem && lastScanned ? (
                        <div className="flex flex-col gap-1">
                          <div className="flex items-center gap-1">
                            <Clock className="h-3 w-3 text-muted-foreground" />
                            <span className="text-sm">
                              {lastScanned.toLocaleDateString()}
                            </span>
                          </div>
                          {daysSinceScanned !== null && (
                            <Badge 
                              variant={daysSinceScanned > 30 ? "destructive" : daysSinceScanned > 14 ? "secondary" : "outline"}
                              className="text-xs w-fit"
                            >
                              {daysSinceScanned === 0 ? 'Today' : `${daysSinceScanned} days ago`}
                            </Badge>
                          )}
                        </div>
                      ) : (
                        <span className="text-muted-foreground text-sm">
                          {item.type === 'group' ? 'N/A' : 'Never scanned'}
                        </span>
                      )}
                    </TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuSeparator />
                          {item.type === 'group' ? (
                            <>
                              <DropdownMenuItem onClick={() => router.push(`/vulnerability-center/vulnerabilities/${packageId}/groups/${item.id}`)}>
                                <Users className="h-4 w-4 mr-2" />
                                View Group Details
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => router.push(`/vulnerability-center/poams?groupId=${item.id}`)}>
                                <Target className="h-4 w-4 mr-2" />
                                View Group POAMs
                              </DropdownMenuItem>
                            </>
                          ) : (
                            <>
                              <DropdownMenuItem onClick={() => router.push(`/vulnerability-center/vulnerabilities/systems/${item.id}`)}>
                                <Server className="h-4 w-4 mr-2" />
                                View System Details
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => router.push(`/vulnerability-center/vulnerabilities/systems/${item.id}/stig`)}>
                                <FileText className="h-4 w-4 mr-2" />
                                View STIG Results
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => router.push(`/vulnerability-center/vulnerabilities/systems/${item.id}/nessus`)}>
                                <Activity className="h-4 w-4 mr-2" />
                                View Nessus Results
                              </DropdownMenuItem>
                            </>
                          )}
                          <DropdownMenuSeparator />
                          <DropdownMenuItem onClick={() => router.push('/vulnerability-center/vulnerabilities/import')}>
                            <ExternalLink className="h-4 w-4 mr-2" />
                            Import Scan Data
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                )
              })}
            </TableBody>
          </Table>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedItems.map((item) => {
            const complianceBadge = getComplianceBadge(item.stats?.complianceScore || 0)
            const isSystem = item.type === 'system'
            const lastScanned = isSystem && item.stats?.lastScanned 
              ? new Date(item.stats.lastScanned)
              : null
            const daysSinceScanned = lastScanned 
              ? Math.floor((Date.now() - lastScanned.getTime()) / (1000 * 60 * 60 * 24))
              : null
              
            return (
              <Card key={`${item.type}-${item.id}`} className="hover:shadow-lg transition-all hover:border-primary/50 group">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="flex items-center gap-2 group-hover:text-primary transition-colors">
                        {item.type === 'group' ? (
                          <Users className="h-5 w-5 text-primary" />
                        ) : (
                          <Server className="h-5 w-5 text-primary" />
                        )}
                        {item.name}
                      </CardTitle>
                      <CardDescription className="mt-1">
                        {item.description || "No description provided"}
                      </CardDescription>
                      <Badge variant="outline" className={cn("mt-2", item.type === 'group' ? 'bg-blue-50 dark:bg-blue-950/20' : 'bg-purple-50 dark:bg-purple-950/20')}>
                        {item.type === 'group' ? 'Group' : 'System'}
                      </Badge>
                    </div>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon" className="h-8 w-8">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        {item.type === 'group' ? (
                          <>
                            <DropdownMenuItem onClick={() => router.push(`/vulnerability-center/vulnerabilities/${packageId}/groups/${item.id}`)}>
                              <Users className="h-4 w-4 mr-2" />
                              View Group Details
                            </DropdownMenuItem>
                          </>
                        ) : (
                          <>
                            <DropdownMenuItem onClick={() => router.push(`/vulnerability-center/vulnerabilities/systems/${item.id}/stig`)}>
                              <FileText className="h-4 w-4 mr-2" />
                              View STIG Results
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => router.push(`/vulnerability-center/vulnerabilities/systems/${item.id}/nessus`)}>
                              <Activity className="h-4 w-4 mr-2" />
                              View Nessus Results
                            </DropdownMenuItem>
                          </>
                        )}
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Compliance Score */}
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Compliance Score</span>
                    <div className="flex items-center gap-2">
                      <Badge 
                        variant={complianceBadge.variant}
                        className={complianceBadge.className}
                      >
                        {item.stats?.complianceScore || 0}%
                      </Badge>
                      <TrendingUp className={cn("h-4 w-4", getComplianceColor(item.stats?.complianceScore || 0))} />
                    </div>
                  </div>

                  {/* Findings Summary */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">Total Findings</span>
                      <span className="font-medium">{item.stats?.totalFindings || 0}</span>
                    </div>
                    <Progress value={Math.min(100, (item.stats?.totalFindings || 0) / 2)} className="h-2" />
                    <div className="flex gap-1 flex-wrap">
                      {getSeverityBadge('critical', item.stats?.criticalFindings || 0)}
                      {getSeverityBadge('high', item.stats?.highFindings || 0)}
                      {getSeverityBadge('medium', item.stats?.mediumFindings || 0)}
                      {getSeverityBadge('low', item.stats?.lowFindings || 0)}
                    </div>
                  </div>

                  {/* Additional Info */}
                  <div className="pt-3 border-t">
                    {isSystem && lastScanned ? (
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <Clock className="h-4 w-4" />
                          <span>Last Scanned</span>
                        </div>
                        <div className="text-right">
                          <div className="text-sm font-medium">
                            {lastScanned.toLocaleDateString()}
                          </div>
                          {daysSinceScanned !== null && (
                            <Badge 
                              variant={daysSinceScanned > 30 ? "destructive" : daysSinceScanned > 14 ? "secondary" : "outline"}
                              className="text-xs mt-1"
                            >
                              {daysSinceScanned === 0 ? 'Today' : `${daysSinceScanned} days ago`}
                            </Badge>
                          )}
                        </div>
                      </div>
                    ) : (
                      <div className="text-sm text-muted-foreground text-center">
                        {item.type === 'group' ? (
                          <span>Group contains {(item as Group)._count?.systems || 0} systems</span>
                        ) : (
                          <span>System not yet scanned</span>
                        )}
                      </div>
                    )}
                  </div>

                  {/* Actions */}
                  <div className="pt-3 border-t">
                    <Button 
                      className="w-full" 
                      variant="outline"
                      onClick={() => {
                        if (item.type === 'group') {
                          router.push(`/vulnerability-center/vulnerabilities/${packageId}/groups/${item.id}`)
                        } else {
                          router.push(`/vulnerability-center/vulnerabilities/systems/${item.id}`)
                        }
                      }}
                    >
                      <BarChart3 className="h-4 w-4 mr-2" />
                      View Details
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>
      )}

      {/* Bulk Actions Bar */}
      {selectedItems.length > 0 && (
        <div className="fixed bottom-4 left-1/2 -translate-x-1/2 bg-background border rounded-lg shadow-lg p-4 flex items-center gap-4 z-50">
          <span className="text-sm text-muted-foreground">
            {selectedItems.length} item{selectedItems.length > 1 ? 's' : ''} selected
          </span>
          <div className="flex gap-2">
            <Button variant="outline" size="sm">
              Export Report
            </Button>
            <Button variant="outline" size="sm">
              Generate POAMs
            </Button>
            <Button variant="outline" size="sm">
              Run Compliance Check
            </Button>
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => {
                setSelectedItems([])
                setSelectedItemTypes(new Map())
              }}
            >
              Clear Selection
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}