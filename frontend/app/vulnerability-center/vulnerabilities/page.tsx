"use client"

import { useState, useEffect } from "react"
import { 
  Package, Shield, Server, Users, BarChart3, Database, ExternalLink, 
  Search, Filter, LayoutGrid, List, Calendar, AlertCircle, TrendingUp, SortAsc, SortDesc, MoreHorizontal
} from "lucide-react"
import Link from "next/link"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { toast } from "sonner"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { cn } from "@/lib/utils"

interface Package {
  id: number
  name: string
  description: string | null
  atoExpirationDate: string | null
  createdAt: string
  updatedAt: string
  _count?: {
    systems: number
    groups: number
  }
  stats?: {
    totalFindings: number
    criticalFindings: number
    highFindings: number
    mediumFindings: number
    lowFindings: number
    openItems: number
    complianceScore: number
  }
}

type SortField = 'name' | 'compliance' | 'findings' | 'systems' | 'ato'
type SortOrder = 'asc' | 'desc'
type ViewMode = 'table' | 'card'

export default function PackagesManagementPage() {
  const [packages, setPackages] = useState<Package[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [viewMode, setViewMode] = useState<ViewMode>('table')
  const [sortField, setSortField] = useState<SortField>('name')
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc')
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [selectedPackages, setSelectedPackages] = useState<number[]>([])

  const fetchPackages = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/packages')
      if (response.ok) {
        const data = await response.json()
        const packagesData = data.items || data || []
        
        // Add mock stats for demonstration
        const packagesWithStats = packagesData.map((pkg: Package) => ({
          ...pkg,
          stats: {
            totalFindings: Math.floor(Math.random() * 500),
            criticalFindings: Math.floor(Math.random() * 20),
            highFindings: Math.floor(Math.random() * 50),
            mediumFindings: Math.floor(Math.random() * 100),
            lowFindings: Math.floor(Math.random() * 200),
            openItems: Math.floor(Math.random() * 150),
            complianceScore: Math.floor(Math.random() * 30) + 70
          }
        }))
        
        setPackages(packagesWithStats)
      } else {
        throw new Error('Failed to fetch packages')
      }
    } catch (error) {
      console.error('Error fetching packages:', error)
      toast.error("Failed to load packages")
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchPackages()
  }, [])

  const filteredPackages = packages.filter(pkg => {
    const matchesSearch = pkg.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      pkg.description?.toLowerCase().includes(searchTerm.toLowerCase())
    
    if (filterStatus === 'all') return matchesSearch
    if (filterStatus === 'critical') return matchesSearch && (pkg.stats?.criticalFindings || 0) > 0
    if (filterStatus === 'compliant') return matchesSearch && (pkg.stats?.complianceScore || 0) >= 90
    if (filterStatus === 'non-compliant') return matchesSearch && (pkg.stats?.complianceScore || 0) < 90
    
    return matchesSearch
  })

  const sortedPackages = [...filteredPackages].sort((a, b) => {
    let aValue: string | number = 0
    let bValue: string | number = 0
    
    switch (sortField) {
      case 'name':
        aValue = a.name
        bValue = b.name
        break
      case 'compliance':
        aValue = a.stats?.complianceScore || 0
        bValue = b.stats?.complianceScore || 0
        break
      case 'findings':
        aValue = a.stats?.totalFindings || 0
        bValue = b.stats?.totalFindings || 0
        break
      case 'systems':
        aValue = a._count?.systems || 0
        bValue = b._count?.systems || 0
        break
      case 'ato':
        aValue = a.atoExpirationDate ? new Date(a.atoExpirationDate).getTime() : 0
        bValue = b.atoExpirationDate ? new Date(b.atoExpirationDate).getTime() : 0
        break
    }
    
    if (sortOrder === 'asc') {
      return aValue > bValue ? 1 : -1
    } else {
      return aValue < bValue ? 1 : -1
    }
  })

  const getComplianceColor = (score: number = 0) => {
    if (score >= 90) return "text-green-600 dark:text-green-400"
    if (score >= 70) return "text-yellow-600 dark:text-yellow-400"
    return "text-red-600 dark:text-red-400"
  }

  const getComplianceBadge = (score: number = 0) => {
    if (score >= 90) return { variant: "default" as const, className: "bg-green-500/10 text-green-700 dark:text-green-400 border-green-500/20" }
    if (score >= 70) return { variant: "default" as const, className: "bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 border-yellow-500/20" }
    return { variant: "default" as const, className: "bg-red-500/10 text-red-700 dark:text-red-400 border-red-500/20" }
  }

  const getSeverityBadge = (severity: string, count: number) => {
    if (count === 0) return null
    
    const variants = {
      critical: "bg-red-500/10 text-red-700 dark:text-red-400 border-red-500/20",
      high: "bg-orange-500/10 text-orange-700 dark:text-orange-400 border-orange-500/20",
      medium: "bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 border-yellow-500/20",
      low: "bg-blue-500/10 text-blue-700 dark:text-blue-400 border-blue-500/20"
    }
    
    return (
      <Badge variant="outline" className={cn("text-xs", variants[severity as keyof typeof variants])}>
        {count} {severity}
      </Badge>
    )
  }

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortOrder('asc')
    }
  }

  const togglePackageSelection = (packageId: number) => {
    setSelectedPackages(prev => 
      prev.includes(packageId) 
        ? prev.filter(id => id !== packageId)
        : [...prev, packageId]
    )
  }

  const selectAllPackages = () => {
    if (selectedPackages.length === sortedPackages.length) {
      setSelectedPackages([])
    } else {
      setSelectedPackages(sortedPackages.map(pkg => pkg.id))
    }
  }

  const stats = {
    totalPackages: packages.length,
    totalFindings: packages.reduce((acc, pkg) => acc + (pkg.stats?.totalFindings || 0), 0),
    criticalFindings: packages.reduce((acc, pkg) => acc + (pkg.stats?.criticalFindings || 0), 0),
    avgCompliance: packages.length > 0 
      ? Math.round(packages.reduce((acc, pkg) => acc + (pkg.stats?.complianceScore || 0), 0) / packages.length)
      : 0
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-2">
            <Package className="h-8 w-8 text-primary" />
            Vulnerability Management Portal
          </h1>
          <p className="text-muted-foreground">
            Centralized view of all ATO packages and their vulnerability status
          </p>
        </div>
        <div className="flex gap-2">
          <Link href="/vulnerability-center/vulnerabilities/import">
            <Button variant="outline">
              <Database className="h-4 w-4 mr-2" />
              Import Data
            </Button>
          </Link>
          <Link href="/rmf-center/packages">
            <Button>
              <ExternalLink className="h-4 w-4 mr-2" />
              Manage Packages
            </Button>
          </Link>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Total Packages</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalPackages}</div>
            <p className="text-xs text-muted-foreground mt-1">Active ATO packages</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Total Findings</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalFindings}</div>
            <p className="text-xs text-muted-foreground mt-1">Across all packages</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Critical Issues</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600 dark:text-red-400">{stats.criticalFindings}</div>
            <p className="text-xs text-muted-foreground mt-1">Require immediate attention</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Avg Compliance</CardTitle>
          </CardHeader>
          <CardContent>
            <div className={cn("text-2xl font-bold", getComplianceColor(stats.avgCompliance))}>
              {stats.avgCompliance}%
            </div>
            <p className="text-xs text-muted-foreground mt-1">Overall compliance score</p>
          </CardContent>
        </Card>
      </div>

      {/* Filters and Controls */}
      <div className="flex flex-col md:flex-row gap-4 items-start md:items-center justify-between">
        <div className="flex flex-1 gap-2 items-center w-full md:w-auto">
          <div className="relative flex-1 md:max-w-sm">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search packages..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-9"
            />
          </div>
          
          <Select value={filterStatus} onValueChange={setFilterStatus}>
            <SelectTrigger className="w-[180px]">
              <Filter className="h-4 w-4 mr-2" />
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Packages</SelectItem>
              <SelectItem value="critical">Critical Issues</SelectItem>
              <SelectItem value="compliant">Compliant (≥90%)</SelectItem>
              <SelectItem value="non-compliant">Non-Compliant (90%)</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        <div className="flex gap-2">
          <Tabs value={viewMode} onValueChange={(v) => setViewMode(v as ViewMode)}>
            <TabsList>
              <TabsTrigger value="table">
                <List className="h-4 w-4" />
              </TabsTrigger>
              <TabsTrigger value="card">
                <LayoutGrid className="h-4 w-4" />
              </TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
      </div>

      {/* Main Content */}
      {loading ? (
        <div className="flex items-center justify-center h-64">
          <div className="text-muted-foreground">Loading packages...</div>
        </div>
      ) : sortedPackages.length === 0 ? (
        <Card>
          <CardContent className="text-center py-12">
            <Package className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Packages Found</h3>
            <p className="text-muted-foreground mb-4">
              {searchTerm ? "No packages match your search" : "No packages available. Create packages in the RMF Center."}
            </p>
            <Link href="/rmf-center/packages">
              <Button>
                <ExternalLink className="h-4 w-4 mr-2" />
                Go to RMF Center
              </Button>
            </Link>
          </CardContent>
        </Card>
      ) : viewMode === 'table' ? (
        <Card>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-[40px]">
                  <input
                    type="checkbox"
                    checked={selectedPackages.length === sortedPackages.length}
                    onChange={selectAllPackages}
                    className="rounded border-input"
                  />
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('name')}
                >
                  <div className="flex items-center gap-1">
                    Package Name
                    {sortField === 'name' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead>Description</TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('compliance')}
                >
                  <div className="flex items-center gap-1">
                    Compliance
                    {sortField === 'compliance' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('findings')}
                >
                  <div className="flex items-center gap-1">
                    Findings
                    {sortField === 'findings' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead>Severity</TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('systems')}
                >
                  <div className="flex items-center gap-1">
                    Resources
                    {sortField === 'systems' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('ato')}
                >
                  <div className="flex items-center gap-1">
                    ATO Expiry
                    {sortField === 'ato' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {sortedPackages.map((pkg) => {
                const complianceBadge = getComplianceBadge(pkg.stats?.complianceScore || 0)
                const daysUntilATO = pkg.atoExpirationDate 
                  ? Math.floor((new Date(pkg.atoExpirationDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))
                  : null
                  
                return (
                  <TableRow key={pkg.id} className="hover:bg-muted/50">
                    <TableCell>
                      <input
                        type="checkbox"
                        checked={selectedPackages.includes(pkg.id)}
                        onChange={() => togglePackageSelection(pkg.id)}
                        className="rounded border-input"
                      />
                    </TableCell>
                    <TableCell className="font-medium">
                      <div className="flex items-center gap-2">
                        <Shield className="h-4 w-4 text-primary" />
                        {pkg.name}
                      </div>
                    </TableCell>
                    <TableCell className="max-w-[300px]">
                      <p className="truncate text-muted-foreground">
                        {pkg.description || "No description provided"}
                      </p>
                    </TableCell>
                    <TableCell>
                      <Badge 
                        variant={complianceBadge.variant}
                        className={complianceBadge.className}
                      >
                        {pkg.stats?.complianceScore || 0}%
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <AlertCircle className="h-4 w-4 text-muted-foreground" />
                        <span className="font-medium">{pkg.stats?.totalFindings || 0}</span>
                        <span className="text-muted-foreground">total</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-1 flex-wrap max-w-[200px]">
                        {getSeverityBadge('critical', pkg.stats?.criticalFindings || 0)}
                        {getSeverityBadge('high', pkg.stats?.highFindings || 0)}
                        {getSeverityBadge('medium', pkg.stats?.mediumFindings || 0)}
                        {getSeverityBadge('low', pkg.stats?.lowFindings || 0)}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex flex-col gap-1 text-sm">
                        <div className="flex items-center gap-1">
                          <Users className="h-3 w-3 text-muted-foreground" />
                          <span>{pkg._count?.groups || 0} groups</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <Server className="h-3 w-3 text-muted-foreground" />
                          <span>{pkg._count?.systems || 0} systems</span>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      {pkg.atoExpirationDate ? (
                        <div className="flex flex-col gap-1">
                          <div className="flex items-center gap-1">
                            <Calendar className="h-3 w-3 text-muted-foreground" />
                            <span className="text-sm">
                              {new Date(pkg.atoExpirationDate).toLocaleDateString()}
                            </span>
                          </div>
                          {daysUntilATO !== null && (
                            <Badge 
                              variant={daysUntilATO < 30 ? "destructive" : daysUntilATO < 90 ? "secondary" : "outline"}
                              className="text-xs"
                            >
                              {daysUntilATO > 0 ? `${daysUntilATO} days` : 'Expired'}
                            </Badge>
                          )}
                        </div>
                      ) : (
                        <span className="text-muted-foreground text-sm">Not set</span>
                      )}
                    </TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem asChild>
                            <Link href={`/vulnerability-center/vulnerabilities/${pkg.id}`}>
                              <BarChart3 className="h-4 w-4 mr-2" />
                              View Details
                            </Link>
                          </DropdownMenuItem>
                          <DropdownMenuItem asChild>
                            <Link href={`/vulnerability-center/vulnerabilities/import`}>
                              <Database className="h-4 w-4 mr-2" />
                              Import Scan Data
                            </Link>
                          </DropdownMenuItem>
                          <DropdownMenuItem asChild>
                            <Link href={`/rmf-center/packages/${pkg.id}`}>
                              <Package className="h-4 w-4 mr-2" />
                              Manage Package
                            </Link>
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                )
              })}
            </TableBody>
          </Table>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedPackages.map((pkg) => {
            const complianceBadge = getComplianceBadge(pkg.stats?.complianceScore || 0)
            const daysUntilATO = pkg.atoExpirationDate 
              ? Math.floor((new Date(pkg.atoExpirationDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))
              : null
              
            return (
              <Card key={pkg.id} className="hover:shadow-lg transition-all hover:border-primary/50 group">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="flex items-center gap-2 group-hover:text-primary transition-colors">
                        <Shield className="h-5 w-5 text-primary" />
                        {pkg.name}
                      </CardTitle>
                      <CardDescription className="mt-1">
                        {pkg.description || "No description provided"}
                      </CardDescription>
                    </div>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon" className="h-8 w-8">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem asChild>
                          <Link href={`/vulnerability-center/vulnerabilities/import`}>
                            <Database className="h-4 w-4 mr-2" />
                            Import Scan Data
                          </Link>
                        </DropdownMenuItem>
                        <DropdownMenuItem asChild>
                          <Link href={`/rmf-center/packages/${pkg.id}`}>
                            <Package className="h-4 w-4 mr-2" />
                            Manage Package
                          </Link>
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Compliance Score */}
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Compliance Score</span>
                    <div className="flex items-center gap-2">
                      <Badge 
                        variant={complianceBadge.variant}
                        className={complianceBadge.className}
                      >
                        {pkg.stats?.complianceScore || 0}%
                      </Badge>
                      <TrendingUp className={cn("h-4 w-4", getComplianceColor(pkg.stats?.complianceScore || 0))} />
                    </div>
                  </div>

                  {/* Findings Summary */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">Total Findings</span>
                      <span className="font-medium">{pkg.stats?.totalFindings || 0}</span>
                    </div>
                    <div className="flex gap-1 flex-wrap">
                      {getSeverityBadge('critical', pkg.stats?.criticalFindings || 0)}
                      {getSeverityBadge('high', pkg.stats?.highFindings || 0)}
                      {getSeverityBadge('medium', pkg.stats?.mediumFindings || 0)}
                      {getSeverityBadge('low', pkg.stats?.lowFindings || 0)}
                    </div>
                  </div>

                  {/* Resources */}
                  <div className="grid grid-cols-2 gap-4 text-sm pt-3 border-t">
                    <div className="flex items-center gap-2">
                      <Users className="h-4 w-4 text-muted-foreground" />
                      <span>{pkg._count?.groups || 0} Groups</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Server className="h-4 w-4 text-muted-foreground" />
                      <span>{pkg._count?.systems || 0} Systems</span>
                    </div>
                  </div>

                  {/* ATO Expiration */}
                  {pkg.atoExpirationDate && (
                    <div className="pt-3 border-t">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <Calendar className="h-4 w-4" />
                          <span>ATO Expires</span>
                        </div>
                        <div className="text-right">
                          <div className="text-sm font-medium">
                            {new Date(pkg.atoExpirationDate).toLocaleDateString()}
                          </div>
                          {daysUntilATO !== null && (
                            <Badge 
                              variant={daysUntilATO < 30 ? "destructive" : daysUntilATO < 90 ? "secondary" : "outline"}
                              className="text-xs mt-1"
                            >
                              {daysUntilATO > 0 ? `${daysUntilATO} days remaining` : 'Expired'}
                            </Badge>
                          )}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Actions */}
                  <div className="pt-3 border-t">
                    <Link href={`/vulnerability-center/vulnerabilities/${pkg.id}`}>
                      <Button className="w-full" variant="outline">
                        <BarChart3 className="h-4 w-4 mr-2" />
                        View Details
                      </Button>
                    </Link>
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>
      )}

      {/* Bulk Actions Bar */}
      {selectedPackages.length > 0 && (
        <div className="fixed bottom-4 left-1/2 -translate-x-1/2 bg-background border rounded-lg shadow-lg p-4 flex items-center gap-4 z-50">
          <span className="text-sm text-muted-foreground">
            {selectedPackages.length} package{selectedPackages.length > 1 ? 's' : ''} selected
          </span>
          <div className="flex gap-2">
            <Button variant="outline" size="sm">
              Export Report
            </Button>
            <Button variant="outline" size="sm">
              Generate POAMs
            </Button>
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => setSelectedPackages([])}
            >
              Clear Selection
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}