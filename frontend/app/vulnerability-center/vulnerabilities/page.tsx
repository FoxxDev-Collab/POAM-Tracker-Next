"use client"

import { useState, useEffect } from "react"
import { Package, Shield, Server, Users, BarChart3, Database, ExternalLink } from "lucide-react"
import Link from "next/link"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { toast } from "sonner"

interface Package {
  id: number
  name: string
  description: string | null
  atoExpirationDate: string | null
  createdAt: string
  updatedAt: string
  _count?: {
    systems: number
    groups: number
  }
  stats?: {
    totalFindings: number
    criticalFindings: number
    highFindings: number
    openItems: number
    complianceScore: number
  }
}

export default function PackagesManagementPage() {
  const [packages, setPackages] = useState<Package[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")

  const fetchPackages = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/packages')
      if (response.ok) {
        const data = await response.json()
        setPackages(data.items || data || [])
      } else {
        throw new Error('Failed to fetch packages')
      }
    } catch (error) {
      console.error('Error fetching packages:', error)
      toast.error("Failed to load packages")
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchPackages()
  }, [])


  const filteredPackages = packages.filter(pkg => 
    pkg.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    pkg.description?.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const getComplianceColor = (score: number = 0) => {
    if (score >= 90) return "text-green-600"
    if (score >= 70) return "text-yellow-600"
    return "text-red-600"
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-2">
            <Package className="h-8 w-8" />
            Vulnerability Management Portal
          </h1>
          <p className="text-muted-foreground">
            View packages and import vulnerability scan data for analysis
          </p>
        </div>
        <div className="flex gap-2">
          <Link href="/vulnerability-center/vulnerabilities/import">
            <Button variant="outline">
              <Database className="h-4 w-4 mr-2" />
              Import Data
            </Button>
          </Link>
          <Link href="/rmf-center/packages">
            <Button>
              <ExternalLink className="h-4 w-4 mr-2" />
              Manage Packages
            </Button>
          </Link>
        </div>
      </div>

      {/* Search */}
      <div className="flex gap-4">
        <Input
          placeholder="Search packages..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="max-w-sm"
        />
      </div>

      {/* Package Grid */}
      {loading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader>
                <div className="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-full"></div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                  <div className="h-4 bg-gray-200 rounded w-2/3"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : filteredPackages.length === 0 ? (
        <Card>
          <CardContent className="text-center py-12">
            <Package className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Packages Found</h3>
            <p className="text-muted-foreground mb-4">
              {searchTerm ? "No packages match your search" : "No packages available. Create packages in the RMF Center."}
            </p>
            <Link href="/rmf-center/packages">
              <Button>
                <ExternalLink className="h-4 w-4 mr-2" />
                Go to RMF Center
              </Button>
            </Link>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredPackages.map((pkg) => (
            <Card key={pkg.id} className="hover:shadow-lg transition-shadow">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <CardTitle className="flex items-center gap-2">
                      <Shield className="h-5 w-5 text-primary" />
                      {pkg.name}
                    </CardTitle>
                    <CardDescription className="mt-1">
                      {pkg.description || "No description provided"}
                    </CardDescription>
                  </div>
                  <div className="flex gap-1">
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {/* Package Stats */}
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div className="flex items-center gap-2">
                      <Users className="h-4 w-4 text-muted-foreground" />
                      <span>{pkg._count?.groups || 0} Groups</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Server className="h-4 w-4 text-muted-foreground" />
                      <span>{pkg._count?.systems || 0} Systems</span>
                    </div>
                  </div>

                  {/* Compliance Score */}
                  {pkg.stats && (
                    <div className="pt-3 border-t">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm text-muted-foreground">Compliance</span>
                        <span className={`text-sm font-semibold ${getComplianceColor(pkg.stats.complianceScore)}`}>
                          {pkg.stats.complianceScore || 0}%
                        </span>
                      </div>
                      <div className="flex gap-2 flex-wrap">
                        {pkg.stats.criticalFindings > 0 && (
                          <Badge variant="destructive" className="text-xs">
                            {pkg.stats.criticalFindings} Critical
                          </Badge>
                        )}
                        {pkg.stats.highFindings > 0 && (
                          <Badge variant="secondary" className="text-xs">
                            {pkg.stats.highFindings} High
                          </Badge>
                        )}
                        {pkg.stats.openItems > 0 && (
                          <Badge variant="outline" className="text-xs">
                            {pkg.stats.openItems} Open
                          </Badge>
                        )}
                      </div>
                    </div>
                  )}

                  {/* ATO Expiration */}
                  {pkg.atoExpirationDate && (
                    <div className="pt-3 border-t">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-muted-foreground">ATO Expires</span>
                        <span className="font-medium">
                          {new Date(pkg.atoExpirationDate).toLocaleDateString()}
                        </span>
                      </div>
                    </div>
                  )}

                  {/* Actions */}
                  <div className="pt-3 border-t">
                    <Link href={`/vulnerability-center/vulnerabilities/${pkg.id}`}>
                      <Button className="w-full" variant="outline">
                        <BarChart3 className="h-4 w-4 mr-2" />
                        View Details
                      </Button>
                    </Link>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  )
}