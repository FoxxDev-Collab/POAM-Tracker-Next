"use client"

import { useState, useEffect } from "react"
import { ArrowLeft, ArrowRight, Package, Users, Shield, CheckCircle2, ClipboardList, Target } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Progress } from "@/components/ui/progress"
import Link from "next/link"
import { useRouter } from "next/navigation"

type Package = {
  id: number;
  name: string;
  description: string;
}

type Group = {
  id: number;
  name: string;
  description: string;
  systems_count: number;
}

type Team = {
  id: number;
  name: string;
  description: string;
}

type STP = {
  id: number;
  name: string;
  title?: string;
  description?: string;
  status?: string;
}

type Milestone = {
  title: string;
  description: string;
  targetDate: string;
  milestoneType: 'Planning' | 'Design' | 'Implementation' | 'Testing' | 'Documentation' | 'Review' | 'Deployment';
  deliverables: string;
  successCriteria: string;
  completionPercentage: number;
}

const WIZARD_STEPS = [
  { id: 1, title: "Select Package", description: "Choose ATO Package" },
  { id: 2, title: "Select Group", description: "Choose Group within Package" },
  { id: 3, title: "Basic Information", description: "Define POAM details" },
  { id: 4, title: "Assignment & Timeline", description: "Set team and dates" },
  { id: 5, title: "Related STPs", description: "Link related test plans" },
  { id: 6, title: "Initial Milestones", description: "Add project milestones" },
  { id: 7, title: "Review & Create", description: "Review and create POAM" },
]


export default function CreatePOAMPage() {
  const router = useRouter()
  const [currentStep, setCurrentStep] = useState(1)
  const [loading, setLoading] = useState(false)
  
  // Form data
  const [selectedPackage, setSelectedPackage] = useState<Package | null>(null)
  const [selectedGroup, setSelectedGroup] = useState<Group | null>(null)
  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null)
  const [selectedSTPs, setSelectedSTPs] = useState<STP[]>([])
  const [milestones, setMilestones] = useState<Milestone[]>([])
  
  const [poamConfig, setPoamConfig] = useState({
    title: '',
    weakness_description: '',
    nist_control_id: '',
    severity: 'Medium' as 'Critical' | 'High' | 'Medium' | 'Low',
    priority: 'Medium' as 'Critical' | 'High' | 'Medium' | 'Low',
    status: 'Draft' as 'Draft' | 'Open' | 'In_Progress' | 'Completed' | 'Closed' | 'Cancelled',
    residual_risk_level: undefined as 'Very_High' | 'High' | 'Medium' | 'Low' | 'Very_Low' | undefined,
    target_completion_date: '',
    estimated_cost: undefined as number | undefined,
    poc_name: '',
    poc_email: '',
    poc_phone: '',
  })

  // Data
  const [packages, setPackages] = useState<Package[]>([])
  const [groups, setGroups] = useState<Group[]>([])
  const [teams, setTeams] = useState<Array<{id: number; name: string; description?: string}>>([]);
  const [stps, setSTPs] = useState<Array<{id: number; name: string; title?: string; description?: string; status?: string}>>([]);

  // Load packages on mount
  useEffect(() => {
    const fetchPackages = async () => {
      try {
        const response = await fetch('/api/packages')
        if (response.ok) {
          const data = await response.json()
          setPackages(data.items || [])
        }
      } catch (error) {
        console.error('Failed to fetch packages:', error)
      }
    }
    fetchPackages()
  }, [])

  // Load groups when package is selected
  useEffect(() => {
    if (selectedPackage) {
      const fetchGroups = async () => {
        setLoading(true)
        try {
          const response = await fetch(`/api/packages/${selectedPackage.id}/groups`)
          if (response.ok) {
            const data = await response.json()
            setGroups(data.items || [])
          }
        } catch (error) {
          console.error('Failed to fetch groups:', error)
        } finally {
          setLoading(false)
        }
      }
      fetchGroups()
    }
  }, [selectedPackage])

  // Load teams and STPs when group is selected
  useEffect(() => {
    if (selectedGroup) {
      const fetchTeamsAndSTPs = async () => {
        setLoading(true)
        try {
          const [teamsRes, stpsRes] = await Promise.all([
            fetch('/api/teams'),
            fetch('/api/stps')
          ])
          
          if (teamsRes.ok) {
            const teamsData = await teamsRes.json()
            setTeams(teamsData.items || [])
          }
          
          if (stpsRes.ok) {
            const stpsData = await stpsRes.json()
            setSTPs(stpsData.items || [])
          }
        } catch (error) {
          console.error('Failed to fetch teams and STPs:', error)
        } finally {
          setLoading(false)
        }
      }
      fetchTeamsAndSTPs()
    }
  }, [selectedGroup])


  const handleNext = () => {
    if (currentStep < WIZARD_STEPS.length) {
      setCurrentStep(currentStep + 1)
    }
  }

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const addMilestone = () => {
    const newMilestone: Milestone = {
      title: '',
      description: '',
      targetDate: '',
      milestoneType: 'Implementation',
      deliverables: '',
      successCriteria: '',
      completionPercentage: 0
    }
    setMilestones(prev => [...prev, newMilestone])
  }

  const updateMilestone = (index: number, field: keyof Milestone, value: string | number) => {
    setMilestones(prev => prev.map((milestone, i) => 
      i === index ? { ...milestone, [field]: value } : milestone
    ))
  }

  const removeMilestone = (index: number) => {
    setMilestones(prev => prev.filter((_, i) => i !== index))
  }

  const handleCreatePOAM = async () => {
    if (!selectedPackage || !selectedGroup || !poamConfig.title) {
      return
    }

    setLoading(true)
    try {
      // Create the POAM
      const poamResponse = await fetch('/api/poams', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: poamConfig.title,
          weakness_description: poamConfig.weakness_description,
          nist_control_id: poamConfig.nist_control_id,
          severity: poamConfig.severity,
          priority: poamConfig.priority,
          status: poamConfig.status,
          residual_risk_level: poamConfig.residual_risk_level,
          target_completion_date: poamConfig.target_completion_date || null,
          estimated_cost: poamConfig.estimated_cost,
          poc_name: poamConfig.poc_name,
          poc_email: poamConfig.poc_email,
          poc_phone: poamConfig.poc_phone,
          assigned_team_id: selectedTeam?.id,
          package_id: selectedPackage.id,
          group_id: selectedGroup.id,
          created_by: 1 // TODO: Get from auth
        })
      })

      if (poamResponse.ok) {
        const poamData = await poamResponse.json()
        
        // Create milestones for the POAM
        for (const milestone of milestones) {
          if (milestone.title.trim()) {
            await fetch(`/api/poams/${poamData.item.id}/milestones`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                title: milestone.title,
                description: milestone.description,
                target_date: milestone.targetDate,
                milestone_type: milestone.milestoneType,
                deliverables: milestone.deliverables,
                success_criteria: milestone.successCriteria,
                completion_percentage: milestone.completionPercentage
              })
            })
          }
        }

        router.push(`/vulnerability-center/poams/${poamData.item.id}`)
      } else {
        const error = await poamResponse.json()
        alert(error.error || 'Failed to create POAM')
      }
    } catch (error) {
      console.error('Failed to create POAM:', error)
      alert('An error occurred while creating the POAM')
    } finally {
      setLoading(false)
    }
  }

  const canProceed = () => {
    switch (currentStep) {
      case 1: return selectedPackage !== null
      case 2: return selectedGroup !== null
      case 3: return poamConfig.title.trim().length > 0
      case 4: return true // Assignment is optional
      case 5: return true // STPs are optional
      case 6: return true // Milestones are optional
      case 7: return true
      default: return false
    }
  }

  const getSeverityColor = (severity: string) => {
    const sev = severity.toLowerCase()
    if (sev === 'critical') return 'text-red-600'
    if (sev === 'high') return 'text-orange-600'
    if (sev === 'medium') return 'text-yellow-600'
    if (sev === 'low') return 'text-green-600'
    return 'text-gray-600'
  }

  const renderStepContent = () => {
    switch (currentStep) {
      case 1: // Select Package
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Select ATO Package</h3>
              <p className="text-muted-foreground mb-4">
                Choose the ATO package that this POAM will be associated with.
              </p>
            </div>
            
            <div className="grid grid-cols-1 gap-4">
              {packages.map((pkg) => (
                <Card 
                  key={pkg.id} 
                  className={`cursor-pointer transition-all ${
                    selectedPackage?.id === pkg.id 
                      ? 'ring-2 ring-primary border-primary' 
                      : 'hover:shadow-md'
                  }`}
                  onClick={() => setSelectedPackage(pkg)}
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <Package className="h-5 w-5 text-primary" />
                        <CardTitle className="text-base">{pkg.name}</CardTitle>
                      </div>
                      {selectedPackage?.id === pkg.id && (
                        <CheckCircle2 className="h-5 w-5 text-primary" />
                      )}
                    </div>
                    <CardDescription>{pkg.description}</CardDescription>
                  </CardHeader>
                </Card>
              ))}
            </div>
          </div>
        )

      case 2: // Select Group
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Select Group</h3>
              <p className="text-muted-foreground mb-4">
                Choose the group within <strong>{selectedPackage?.name}</strong> that this POAM relates to.
              </p>
            </div>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Loading groups...</div>
              </div>
            ) : (
              <div className="grid grid-cols-1 gap-4">
                {groups.map((group) => (
                  <Card 
                    key={group.id} 
                    className={`cursor-pointer transition-all ${
                      selectedGroup?.id === group.id 
                        ? 'ring-2 ring-primary border-primary' 
                        : 'hover:shadow-md'
                    }`}
                    onClick={() => setSelectedGroup(group)}
                  >
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Users className="h-5 w-5 text-primary" />
                          <div>
                            <CardTitle className="text-base">{group.name}</CardTitle>
                            <CardDescription>{group.description}</CardDescription>
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <Badge variant="outline">
                            {group.systems_count} systems
                          </Badge>
                          {selectedGroup?.id === group.id && (
                            <CheckCircle2 className="h-5 w-5 text-primary" />
                          )}
                        </div>
                      </div>
                    </CardHeader>
                  </Card>
                ))}
              </div>
            )}
          </div>
        )

      case 3: // Basic Information
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Basic Information</h3>
              <p className="text-muted-foreground mb-4">
                Define the core details of this Plan of Action &amp; Milestones.
              </p>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium">POAM Title *</label>
                <Input
                  placeholder="Enter a descriptive title for this POAM"
                  value={poamConfig.title}
                  onChange={(e) => setPoamConfig(prev => ({ ...prev, title: e.target.value }))}
                />
              </div>
              
              <div>
                <label className="text-sm font-medium">Weakness Description</label>
                <Textarea
                  placeholder="Describe the weakness or vulnerability that this POAM addresses"
                  value={poamConfig.weakness_description}
                  onChange={(e) => setPoamConfig(prev => ({ ...prev, weakness_description: e.target.value }))}
                  rows={3}
                />
              </div>

              <div>
                <label className="text-sm font-medium">NIST Control ID</label>
                <Input
                  placeholder="e.g., AC-2, SI-3, IA-2"
                  value={poamConfig.nist_control_id}
                  onChange={(e) => setPoamConfig(prev => ({ ...prev, nist_control_id: e.target.value }))}
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium">Severity</label>
                  <Select 
                    value={poamConfig.severity} 
                    onValueChange={(value: 'Critical' | 'High' | 'Medium' | 'Low') => 
                      setPoamConfig(prev => ({ ...prev, severity: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Critical">Critical</SelectItem>
                      <SelectItem value="High">High</SelectItem>
                      <SelectItem value="Medium">Medium</SelectItem>
                      <SelectItem value="Low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Priority</label>
                  <Select 
                    value={poamConfig.priority} 
                    onValueChange={(value: 'Critical' | 'High' | 'Medium' | 'Low') => 
                      setPoamConfig(prev => ({ ...prev, priority: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Critical">Critical</SelectItem>
                      <SelectItem value="High">High</SelectItem>
                      <SelectItem value="Medium">Medium</SelectItem>
                      <SelectItem value="Low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <label className="text-sm font-medium">Residual Risk Level</label>
                <Select 
                  value={poamConfig.residual_risk_level || 'not_set'} 
                  onValueChange={(value) => setPoamConfig(prev => ({ 
                    ...prev, 
                    residual_risk_level: value === 'not_set' ? undefined : value as 'Very_High' | 'High' | 'Medium' | 'Low' | 'Very_Low' 
                  }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="not_set">Not assessed</SelectItem>
                    <SelectItem value="Very_High">Very High</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="Low">Low</SelectItem>
                    <SelectItem value="Very_Low">Very Low</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        )

      case 4: // Assignment & Timeline
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Assignment & Timeline</h3>
              <p className="text-muted-foreground mb-4">
                Assign the POAM to a team and set timeline information.
              </p>
            </div>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Loading teams...</div>
              </div>
            ) : (
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium">Assigned Team</label>
                  <div className="grid grid-cols-1 gap-2 mt-2">
                    <Card 
                      className={`cursor-pointer transition-all p-3 ${
                        selectedTeam === null 
                          ? 'ring-2 ring-primary border-primary' 
                          : 'hover:shadow-sm'
                      }`}
                      onClick={() => setSelectedTeam(null)}
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-4 h-4 border-2 border-muted-foreground rounded-full flex items-center justify-center">
                          {selectedTeam === null && <div className="w-2 h-2 bg-primary rounded-full" />}
                        </div>
                        <div>
                          <div className="font-medium text-sm">No team assigned</div>
                          <div className="text-xs text-muted-foreground">This POAM will remain unassigned</div>
                        </div>
                      </div>
                    </Card>
                    
                    {teams.map((team) => (
                      <Card 
                        key={team.id} 
                        className={`cursor-pointer transition-all p-3 ${
                          selectedTeam?.id === team.id 
                            ? 'ring-2 ring-primary border-primary' 
                            : 'hover:shadow-sm'
                        }`}
                        onClick={() => setSelectedTeam({...team, description: team.description || ''})}
                      >
                        <div className="flex items-center gap-3">
                          <div className="w-4 h-4 border-2 border-muted-foreground rounded-full flex items-center justify-center">
                            {selectedTeam?.id === team.id && <div className="w-2 h-2 bg-primary rounded-full" />}
                          </div>
                          <div>
                            <div className="font-medium text-sm">{team.name}</div>
                            <p className="text-sm text-muted-foreground">{team.description || 'No description available'}</p>
                          </div>
                        </div>
                      </Card>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="text-sm font-medium">Target Completion Date</label>
                  <Input
                    type="date"
                    value={poamConfig.target_completion_date}
                    onChange={(e) => setPoamConfig(prev => ({ ...prev, target_completion_date: e.target.value }))}
                  />
                </div>

                <div>
                  <label className="text-sm font-medium">Estimated Cost ($)</label>
                  <Input
                    type="number"
                    value={poamConfig.estimated_cost || ''}
                    onChange={(e) => setPoamConfig(prev => ({ 
                      ...prev, 
                      estimated_cost: e.target.value ? parseFloat(e.target.value) : undefined 
                    }))}
                    placeholder="0.00"
                    step="0.01"
                  />
                </div>

                <div className="space-y-3 pt-4 border-t">
                  <h4 className="font-medium">Point of Contact</h4>
                  
                  <div>
                    <label className="text-sm font-medium">Name</label>
                    <Input
                      value={poamConfig.poc_name}
                      onChange={(e) => setPoamConfig(prev => ({ ...prev, poc_name: e.target.value }))}
                      placeholder="POC Name"
                    />
                  </div>

                  <div>
                    <label className="text-sm font-medium">Email</label>
                    <Input
                      type="email"
                      value={poamConfig.poc_email}
                      onChange={(e) => setPoamConfig(prev => ({ ...prev, poc_email: e.target.value }))}
                      placeholder="poc@example.com"
                    />
                  </div>

                  <div>
                    <label className="text-sm font-medium">Phone</label>
                    <Input
                      type="tel"
                      value={poamConfig.poc_phone}
                      onChange={(e) => setPoamConfig(prev => ({ ...prev, poc_phone: e.target.value }))}
                      placeholder="(555) 123-4567"
                    />
                  </div>
                </div>
              </div>
            )}
          </div>
        )

      case 5: // Related STPs
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Related Security Test Plans</h3>
              <p className="text-muted-foreground mb-4">
                Link any related Security Test Plans that are relevant to this POAM.
              </p>
              <Badge className="bg-blue-500">
                {selectedSTPs.length} STP{selectedSTPs.length !== 1 ? 's' : ''} selected
              </Badge>
            </div>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Loading STPs...</div>
              </div>
            ) : (
              <div className="space-y-4 max-h-96 overflow-y-auto">
                {stps.map((stp) => {
                  const isSelected = selectedSTPs.some(s => s.id === stp.id)
                  
                  return (
                    <Card 
                      key={stp.id} 
                      className={`cursor-pointer transition-all ${
                        isSelected 
                          ? 'ring-2 ring-primary border-primary' 
                          : 'hover:shadow-md'
                      }`}
                      onClick={() => {
                        if (isSelected) {
                          setSelectedSTPs(prev => prev.filter(s => s.id !== stp.id))
                        } else {
                          setSelectedSTPs(prev => [...prev, stp])
                        }
                      }}
                    >
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <Shield className="h-5 w-5 text-primary" />
                            <div>
                              <CardTitle className="text-base">{stp.title}</CardTitle>
                              <CardDescription>{stp.description || 'No description'}</CardDescription>
                            </div>
                          </div>
                          <div className="flex items-center gap-3">
                            <Badge variant="outline">
                              {stp.status}
                            </Badge>
                            {isSelected && (
                              <CheckCircle2 className="h-5 w-5 text-primary" />
                            )}
                          </div>
                        </div>
                      </CardHeader>
                    </Card>
                  )
                })}

                {stps.length === 0 && (
                  <div className="text-center py-8 text-muted-foreground">
                    No STPs available to link.
                  </div>
                )}
              </div>
            )}
          </div>
        )

      case 6: // Initial Milestones
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Initial Milestones</h3>
              <p className="text-muted-foreground mb-4">
                Add initial milestones to track progress on this POAM. You can add more later.
              </p>
              <div className="flex justify-between items-center">
                <Badge className="bg-green-500">
                  {milestones.length} milestone{milestones.length !== 1 ? 's' : ''} added
                </Badge>
                <Button onClick={addMilestone} variant="outline" size="sm">
                  <Target className="h-4 w-4 mr-2" />
                  Add Milestone
                </Button>
              </div>
            </div>
            
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {milestones.map((milestone, index) => (
                <Card key={index}>
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-base">Milestone {index + 1}</CardTitle>
                      <Button 
                        onClick={() => removeMilestone(index)} 
                        variant="ghost" 
                        size="sm"
                        className="text-red-500 hover:text-red-700"
                      >
                        Remove
                      </Button>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <label className="text-sm font-medium">Title *</label>
                      <Input
                        value={milestone.title}
                        onChange={(e) => updateMilestone(index, 'title', e.target.value)}
                        placeholder="Enter milestone title"
                      />
                    </div>

                    <div>
                      <label className="text-sm font-medium">Description</label>
                      <Textarea
                        value={milestone.description}
                        onChange={(e) => updateMilestone(index, 'description', e.target.value)}
                        placeholder="Describe the milestone"
                        rows={2}
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-sm font-medium">Type</label>
                        <Select 
                          value={milestone.milestoneType} 
                          onValueChange={(value) => updateMilestone(index, 'milestoneType', value)}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Planning">Planning</SelectItem>
                            <SelectItem value="Design">Design</SelectItem>
                            <SelectItem value="Implementation">Implementation</SelectItem>
                            <SelectItem value="Testing">Testing</SelectItem>
                            <SelectItem value="Documentation">Documentation</SelectItem>
                            <SelectItem value="Review">Review</SelectItem>
                            <SelectItem value="Deployment">Deployment</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <label className="text-sm font-medium">Target Date</label>
                        <Input
                          type="date"
                          value={milestone.targetDate}
                          onChange={(e) => updateMilestone(index, 'targetDate', e.target.value)}
                        />
                      </div>
                    </div>

                    <div>
                      <label className="text-sm font-medium">Success Criteria</label>
                      <Textarea
                        value={milestone.successCriteria}
                        onChange={(e) => updateMilestone(index, 'successCriteria', e.target.value)}
                        placeholder="Define criteria for completion"
                        rows={2}
                      />
                    </div>
                  </CardContent>
                </Card>
              ))}

              {milestones.length === 0 && (
                <div className="text-center py-8 text-muted-foreground">
                  No milestones added yet. Click &quot;Add Milestone&quot; to get started.
                </div>
              )}
            </div>
          </div>
        )

      case 7: // Review & Create
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Review & Create</h3>
              <p className="text-muted-foreground mb-4">
                Review your selections and create the Plan of Action &amp; Milestones.
              </p>
            </div>
            
            <div className="space-y-4">
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-base">POAM Summary</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-muted-foreground">Package:</span>
                      <div className="font-medium">{selectedPackage?.name}</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Group:</span>
                      <div className="font-medium">{selectedGroup?.name}</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Title:</span>
                      <div className="font-medium">{poamConfig.title}</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Severity:</span>
                      <Badge variant="outline" className={getSeverityColor(poamConfig.severity)}>
                        {poamConfig.severity}
                      </Badge>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Priority:</span>
                      <Badge variant="outline">{poamConfig.priority}</Badge>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Team:</span>
                      <div className="font-medium">{selectedTeam?.name || 'Unassigned'}</div>
                    </div>
                  </div>
                  
                  <div className="pt-3 border-t">
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">
                        {selectedSTPs.length} related STP{selectedSTPs.length !== 1 ? 's' : ''} will be linked
                      </span>
                      <span className="text-muted-foreground">
                        {milestones.filter(m => m.title.trim()).length} initial milestone{milestones.filter(m => m.title.trim()).length !== 1 ? 's' : ''} will be created
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <div className="flex items-center gap-3">
            <Link href="/vulnerability-center/poams">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4" />
                Back to POAMs
              </Button>
            </Link>
          </div>
          <h1 className="text-3xl font-bold">Create Plan of Action &amp; Milestones</h1>
          <p className="text-muted-foreground">
            Follow the wizard to create a comprehensive POAM with milestones
          </p>
        </div>
      </div>

      {/* Progress Indicator */}
      <div className="space-y-4">
        <Progress value={(currentStep / WIZARD_STEPS.length) * 100} className="h-2" />
        <div className="flex justify-between">
          {WIZARD_STEPS.map((step) => (
            <div key={step.id} className="flex flex-col items-center gap-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                currentStep >= step.id 
                  ? 'bg-primary text-primary-foreground' 
                  : 'bg-muted text-muted-foreground'
              }`}>
                {currentStep > step.id ? <CheckCircle2 className="h-4 w-4" /> : step.id}
              </div>
              <div className="text-center">
                <div className="text-xs font-medium">{step.title}</div>
                <div className="text-xs text-muted-foreground">{step.description}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Step Content */}
      <Card className="min-h-96">
        <CardContent className="p-6">
          {renderStepContent()}
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-between">
        <Button 
          variant="outline" 
          onClick={handleBack} 
          disabled={currentStep === 1}
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back
        </Button>
        
        <div className="flex gap-2">
          {currentStep < WIZARD_STEPS.length ? (
            <Button 
              onClick={handleNext} 
              disabled={!canProceed() || loading}
            >
              Next
              <ArrowRight className="h-4 w-4 ml-2" />
            </Button>
          ) : (
            <Button 
              onClick={handleCreatePOAM} 
              disabled={!canProceed() || loading}
              className="bg-green-600 hover:bg-green-700"
            >
              {loading ? (
                <>
                  <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2" />
                  Creating...
                </>
              ) : (
                <>
                  <ClipboardList className="h-4 w-4 mr-2" />
                  Create POAM
                </>
              )}
            </Button>
          )}
        </div>
      </div>
    </div>
  )
}