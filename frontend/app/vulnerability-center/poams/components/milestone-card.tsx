'use client';

import React, { useState } from 'react';
import { Calendar, CheckCircle, Clock, AlertTriangle, User, Edit, Trash } from 'lucide-react';
import MilestoneForm from './milestone-form';

interface MilestoneCardProps {
  milestone: {
    id: number;
    title: string;
    description: string;
    targetDate: string;
    actualDate: string;
    status: string;
    milestoneType: string;
    deliverables: string;
    successCriteria: string;
    completionPercentage: number;
    assignedUser?: {
      id: number;
      name: string;
    };
    createdAt: string;
    updatedAt: string;
  };
  poamId: number;
  onUpdate: () => void;
  onDelete: (id: number) => void;
  onStatusChange: (id: number, status: string) => void;
}

export default function MilestoneCard({ 
  milestone, 
  poamId, 
  onUpdate, 
  onDelete, 
  onStatusChange 
}: MilestoneCardProps) {
  const [showEditForm, setShowEditForm] = useState(false);
  const [showDetails, setShowDetails] = useState(false);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Pending': return 'bg-gray-100 text-gray-800';
      case 'In_Progress': return 'bg-blue-100 text-blue-800';
      case 'Completed': return 'bg-green-100 text-green-800';
      case 'Delayed': return 'bg-red-100 text-red-800';
      case 'Cancelled': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Pending': return <Clock className="w-4 h-4" />;
      case 'In_Progress': return <AlertTriangle className="w-4 h-4" />;
      case 'Completed': return <CheckCircle className="w-4 h-4" />;
      case 'Delayed': return <AlertTriangle className="w-4 h-4" />;
      case 'Cancelled': return <AlertTriangle className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'Planning': return 'bg-purple-100 text-purple-800';
      case 'Design': return 'bg-blue-100 text-blue-800';
      case 'Implementation': return 'bg-orange-100 text-orange-800';
      case 'Testing': return 'bg-yellow-100 text-yellow-800';
      case 'Documentation': return 'bg-green-100 text-green-800';
      case 'Review': return 'bg-indigo-100 text-indigo-800';
      case 'Deployment': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const isOverdue = () => {
    if (!milestone.targetDate || milestone.status === 'Completed') return false;
    return new Date(milestone.targetDate) < new Date();
  };

  const handleStatusChange = (newStatus: string) => {
    onStatusChange(milestone.id, newStatus);
  };

  const handleDelete = () => {
    if (confirm('Are you sure you want to delete this milestone?')) {
      onDelete(milestone.id);
    }
  };

  return (
    <>
      <div className="bg-white border rounded-lg p-4 hover:shadow-md transition-shadow">
        <div className="flex justify-between items-start mb-3">
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-2">
              <h3 className="font-semibold text-lg">{milestone.title}</h3>
              {isOverdue() && (
                <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded animate-pulse">
                  Overdue
                </span>
              )}
            </div>
            
            <div className="flex items-center gap-3 mb-2">
              <span className={`px-2 py-1 text-xs rounded-full flex items-center gap-1 ${getStatusColor(milestone.status)}`}>
                {getStatusIcon(milestone.status)}
                {milestone.status.replace('_', ' ')}
              </span>
              
              <span className={`px-2 py-1 text-xs rounded ${getTypeColor(milestone.milestoneType)}`}>
                {milestone.milestoneType}
              </span>
              
              <span className="text-xs text-gray-500">
                {milestone.completionPercentage || 0}% complete
              </span>
            </div>

            {milestone.description && (
              <p className="text-gray-600 text-sm mb-3">{milestone.description}</p>
            )}
          </div>

          <div className="flex gap-1 ml-4">
            <button
              onClick={() => setShowEditForm(true)}
              className="p-1 text-gray-400 hover:text-blue-600"
              title="Edit milestone"
            >
              <Edit className="w-4 h-4" />
            </button>
            <button
              onClick={handleDelete}
              className="p-1 text-gray-400 hover:text-red-600"
              title="Delete milestone"
            >
              <Trash className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="mb-3">
          <div className="flex justify-between text-xs text-gray-500 mb-1">
            <span>Progress</span>
            <span>{milestone.completionPercentage || 0}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className={`h-2 rounded-full transition-all duration-300 ${
                milestone.status === 'Completed' 
                  ? 'bg-green-500' 
                  : milestone.status === 'Delayed' 
                    ? 'bg-red-500' 
                    : 'bg-blue-500'
              }`}
              style={{ width: `${milestone.completionPercentage || 0}%` }}
            />
          </div>
        </div>

        {/* Details */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm text-gray-600">
          {milestone.targetDate && (
            <div className="flex items-center gap-2">
              <Calendar className="w-4 h-4" />
              <span>Target: {new Date(milestone.targetDate).toLocaleDateString()}</span>
            </div>
          )}
          
          {milestone.actualDate && (
            <div className="flex items-center gap-2">
              <CheckCircle className="w-4 h-4 text-green-500" />
              <span>Completed: {new Date(milestone.actualDate).toLocaleDateString()}</span>
            </div>
          )}
          
          {milestone.assignedUser && (
            <div className="flex items-center gap-2">
              <User className="w-4 h-4" />
              <span>Assigned: {milestone.assignedUser.name}</span>
            </div>
          )}
        </div>

        {/* Action Buttons */}
        {milestone.status !== 'Completed' && milestone.status !== 'Cancelled' && (
          <div className="flex gap-2 mt-4">
            {milestone.status === 'Pending' && (
              <button
                onClick={() => handleStatusChange('In_Progress')}
                className="px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded hover:bg-blue-200"
              >
                Start
              </button>
            )}
            
            {milestone.status === 'In_Progress' && (
              <>
                <button
                  onClick={() => handleStatusChange('Completed')}
                  className="px-3 py-1 text-xs bg-green-100 text-green-800 rounded hover:bg-green-200"
                >
                  Mark Complete
                </button>
                <button
                  onClick={() => handleStatusChange('Delayed')}
                  className="px-3 py-1 text-xs bg-yellow-100 text-yellow-800 rounded hover:bg-yellow-200"
                >
                  Mark Delayed
                </button>
              </>
            )}
            
            {milestone.status === 'Delayed' && (
              <button
                onClick={() => handleStatusChange('In_Progress')}
                className="px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded hover:bg-blue-200"
              >
                Resume
              </button>
            )}
          </div>
        )}

        {/* Expandable Details */}
        {(milestone.deliverables || milestone.successCriteria) && (
          <div className="mt-4 border-t pt-3">
            <button
              onClick={() => setShowDetails(!showDetails)}
              className="text-xs text-blue-600 hover:text-blue-800 font-medium"
            >
              {showDetails ? 'Hide Details' : 'Show Details'}
            </button>
            
            {showDetails && (
              <div className="mt-3 space-y-3">
                {milestone.deliverables && (
                  <div>
                    <h4 className="text-xs font-medium text-gray-700 mb-1">Deliverables:</h4>
                    <p className="text-xs text-gray-600">{milestone.deliverables}</p>
                  </div>
                )}
                
                {milestone.successCriteria && (
                  <div>
                    <h4 className="text-xs font-medium text-gray-700 mb-1">Success Criteria:</h4>
                    <p className="text-xs text-gray-600">{milestone.successCriteria}</p>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {showEditForm && (
        <MilestoneForm
          poamId={poamId}
          milestone={milestone}
          onClose={() => setShowEditForm(false)}
          onSuccess={() => {
            setShowEditForm(false);
            onUpdate();
          }}
        />
      )}
    </>
  );
}