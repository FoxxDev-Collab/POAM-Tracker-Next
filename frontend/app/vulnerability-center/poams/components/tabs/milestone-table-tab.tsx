'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { Search, Filter, Calendar, User, CheckCircle, Clock, AlertTriangle, Edit } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

interface Milestone {
  id: number;
  poam_id: number;
  title: string;
  description: string;
  target_date: string;
  actual_date: string;
  status: string;
  milestone_type: string;
  deliverables: string;
  success_criteria: string;
  assigned_user_id: number;
  completion_percentage: number;
  created_at: string;
  updated_at: string;
  poam: {
    id: number;
    poam_number: string;
    title: string;
    severity: string;
    status: string;
  };
  assigned_user?: {
    id: number;
    name: string;
  };
}

interface MilestoneTableTabProps {
  packageId?: number;
  groupId?: number;
}

export default function MilestoneTableTab({ packageId, groupId }: MilestoneTableTabProps) {
  const router = useRouter();
  const [milestones, setMilestones] = useState<Milestone[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [filterType, setFilterType] = useState<string>('all');
  const [filterOverdue, setFilterOverdue] = useState<string>('all');

  const fetchMilestones = useCallback(async (): Promise<void> => {
    try {
      setLoading(true);
      let url = '/api/milestones';
      const params = new URLSearchParams();
      if (packageId) params.append('package_id', packageId.toString());
      if (groupId) params.append('group_id', groupId.toString());
      if (params.toString()) url += `?${params.toString()}`;

      const res = await fetch(url);
      if (res.ok) {
        const data = await res.json();
        setMilestones(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch milestones:', error);
    } finally {
      setLoading(false);
    }
  }, [packageId, groupId]);

  useEffect(() => {
    fetchMilestones();
  }, [fetchMilestones]);

  const updateMilestoneStatus = async (milestoneId: number, status: string) => {
    try {
      const res = await fetch(`/api/milestones/${milestoneId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status })
      });

      if (res.ok) {
        fetchMilestones();
      } else {
        alert('Failed to update milestone status');
      }
    } catch (error) {
      console.error('Failed to update milestone:', error);
      alert('An error occurred while updating the milestone');
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Pending': return 'secondary';
      case 'In_Progress': return 'default';
      case 'Completed': return 'outline';
      case 'Delayed': return 'destructive';
      case 'Cancelled': return 'destructive';
      default: return 'secondary';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Pending': return <Clock className="w-4 h-4" />;
      case 'In_Progress': return <AlertTriangle className="w-4 h-4" />;
      case 'Completed': return <CheckCircle className="w-4 h-4" />;
      case 'Delayed': return <AlertTriangle className="w-4 h-4" />;
      case 'Cancelled': return <AlertTriangle className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'Planning': return 'bg-purple-100 text-purple-800';
      case 'Design': return 'bg-blue-100 text-blue-800';
      case 'Implementation': return 'bg-orange-100 text-orange-800';
      case 'Testing': return 'bg-yellow-100 text-yellow-800';
      case 'Documentation': return 'bg-green-100 text-green-800';
      case 'Review': return 'bg-indigo-100 text-indigo-800';
      case 'Deployment': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const isOverdue = (targetDate: string, status: string) => {
    if (!targetDate || status === 'Completed' || status === 'Cancelled') return false;
    return new Date(targetDate) < new Date();
  };

  const filteredMilestones = milestones
    .filter(milestone => {
      const matchesSearch = searchTerm === '' || 
        milestone.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        milestone.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        milestone.poam.poam_number.toLowerCase().includes(searchTerm.toLowerCase()) ||
        milestone.poam.title.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesStatus = filterStatus === 'all' || milestone.status === filterStatus;
      const matchesType = filterType === 'all' || milestone.milestone_type === filterType;
      
      const overdue = isOverdue(milestone.target_date, milestone.status);
      const matchesOverdue = filterOverdue === 'all' || 
        (filterOverdue === 'overdue' && overdue) ||
        (filterOverdue === 'not_overdue' && !overdue);
      
      return matchesSearch && matchesStatus && matchesType && matchesOverdue;
    })
    .sort((a, b) => {
      // Sort by target date, then by status
      if (a.target_date && b.target_date) {
        return new Date(a.target_date).getTime() - new Date(b.target_date).getTime();
      }
      if (a.target_date && !b.target_date) return -1;
      if (!a.target_date && b.target_date) return 1;
      return a.status.localeCompare(b.status);
    });

  // Calculate summary statistics
  const totalMilestones = milestones.length;
  const completedMilestones = milestones.filter(m => m.status === 'Completed').length;
  const inProgressMilestones = milestones.filter(m => m.status === 'In_Progress').length;
  const overdueMilestones = milestones.filter(m => isOverdue(m.target_date, m.status)).length;

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Total Milestones</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{totalMilestones}</div>
            <p className="text-xs text-muted-foreground">Across all POAMs</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">In Progress</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">{inProgressMilestones}</div>
            <p className="text-xs text-muted-foreground">Currently active</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Completed</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{completedMilestones}</div>
            <p className="text-xs text-muted-foreground">Successfully finished</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Overdue</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{overdueMilestones}</div>
            <p className="text-xs text-muted-foreground">Past target date</p>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
        <div className="flex items-center gap-2">
          <Search className="h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search milestones..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-64"
          />
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-4 w-4" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent className="flex flex-wrap gap-4">
          <Select value={filterStatus} onValueChange={setFilterStatus}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="All Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="Pending">Pending</SelectItem>
              <SelectItem value="In_Progress">In Progress</SelectItem>
              <SelectItem value="Completed">Completed</SelectItem>
              <SelectItem value="Delayed">Delayed</SelectItem>
              <SelectItem value="Cancelled">Cancelled</SelectItem>
            </SelectContent>
          </Select>

          <Select value={filterType} onValueChange={setFilterType}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="All Types" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Types</SelectItem>
              <SelectItem value="Planning">Planning</SelectItem>
              <SelectItem value="Design">Design</SelectItem>
              <SelectItem value="Implementation">Implementation</SelectItem>
              <SelectItem value="Testing">Testing</SelectItem>
              <SelectItem value="Documentation">Documentation</SelectItem>
              <SelectItem value="Review">Review</SelectItem>
              <SelectItem value="Deployment">Deployment</SelectItem>
            </SelectContent>
          </Select>

          <Select value={filterOverdue} onValueChange={setFilterOverdue}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="All Dates" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Dates</SelectItem>
              <SelectItem value="overdue">Overdue Only</SelectItem>
              <SelectItem value="not_overdue">Not Overdue</SelectItem>
            </SelectContent>
          </Select>

          <div className="text-sm text-gray-600 flex items-center">
            Showing {filteredMilestones.length} of {milestones.length} milestones
          </div>
        </CardContent>
      </Card>

      {/* Milestones Table */}
      <Card>
        <CardContent className="p-0">
          {filteredMilestones.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500">No milestones found matching your criteria.</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="border-b bg-gray-50">
                  <tr>
                    <th className="text-left p-4 font-semibold">POAM</th>
                    <th className="text-left p-4 font-semibold">Milestone</th>
                    <th className="text-left p-4 font-semibold">Type</th>
                    <th className="text-left p-4 font-semibold">Status</th>
                    <th className="text-left p-4 font-semibold">Progress</th>
                    <th className="text-left p-4 font-semibold">Target Date</th>
                    <th className="text-left p-4 font-semibold">Assigned To</th>
                    <th className="text-left p-4 font-semibold">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredMilestones.map(milestone => {
                    const overdue = isOverdue(milestone.target_date, milestone.status);
                    return (
                      <tr key={milestone.id} className="border-b hover:bg-gray-50">
                        <td className="p-4">
                          <div>
                            <div className="font-mono text-sm font-medium">{milestone.poam.poam_number}</div>
                            <div className="text-sm text-gray-600 truncate max-w-xs">
                              {milestone.poam.title}
                            </div>
                          </div>
                        </td>
                        <td className="p-4">
                          <div>
                            <div className="font-medium">{milestone.title}</div>
                            {milestone.description && (
                              <div className="text-sm text-gray-600 truncate max-w-xs">
                                {milestone.description}
                              </div>
                            )}
                          </div>
                        </td>
                        <td className="p-4">
                          <Badge className={getTypeColor(milestone.milestone_type)}>
                            {milestone.milestone_type}
                          </Badge>
                        </td>
                        <td className="p-4">
                          <Badge variant={getStatusColor(milestone.status)} className="flex items-center gap-1 w-fit">
                            {getStatusIcon(milestone.status)}
                            {milestone.status.replace('_', ' ')}
                          </Badge>
                        </td>
                        <td className="p-4">
                          <div className="space-y-1">
                            <div className="flex justify-between text-sm">
                              <span>{milestone.completion_percentage || 0}%</span>
                            </div>
                            <Progress value={milestone.completion_percentage || 0} className="w-16" />
                          </div>
                        </td>
                        <td className="p-4">
                          <div className={`text-sm ${overdue ? 'text-red-600 font-medium' : 'text-gray-600'}`}>
                            {milestone.target_date ? (
                              <div className="flex items-center gap-1">
                                <Calendar className="h-3 w-3" />
                                {overdue && <AlertTriangle className="h-3 w-3" />}
                                {new Date(milestone.target_date).toLocaleDateString()}
                                {overdue && <span className="text-xs">(Overdue)</span>}
                              </div>
                            ) : (
                              'No date set'
                            )}
                          </div>
                        </td>
                        <td className="p-4">
                          <div className="text-sm text-gray-600 flex items-center gap-1">
                            <User className="h-3 w-3" />
                            {milestone.assigned_user?.name || 'Unassigned'}
                          </div>
                        </td>
                        <td className="p-4">
                          <div className="flex gap-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => router.push(`/vulnerability-center/poams/${milestone.poam_id}`)}
                              title="View POAM"
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            
                            {milestone.status !== 'Completed' && milestone.status !== 'Cancelled' && (
                              <div className="flex gap-1">
                                {milestone.status === 'Pending' && (
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => updateMilestoneStatus(milestone.id, 'In_Progress')}
                                    title="Start milestone"
                                    className="text-blue-600 hover:text-blue-700"
                                  >
                                    Start
                                  </Button>
                                )}
                                
                                {milestone.status === 'In_Progress' && (
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => updateMilestoneStatus(milestone.id, 'Completed')}
                                    title="Complete milestone"
                                    className="text-green-600 hover:text-green-700"
                                  >
                                    Complete
                                  </Button>
                                )}
                              </div>
                            )}
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}