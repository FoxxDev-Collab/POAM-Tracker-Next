'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { ArrowLeft, Save, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { z } from 'zod';

const poamEditSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  weakness_description: z.string().optional(),
  nist_control_id: z.string().optional(),
  severity: z.enum(['Critical', 'High', 'Medium', 'Low']),
  status: z.enum(['Draft', 'Open', 'In_Progress', 'Completed', 'Closed', 'Cancelled']),
  priority: z.enum(['Critical', 'High', 'Medium', 'Low']),
  residual_risk_level: z.enum(['Very_High', 'High', 'Medium', 'Low', 'Very_Low']).optional(),
  target_completion_date: z.string().optional(),
  actual_completion_date: z.string().optional(),
  estimated_cost: z.number().optional(),
  actual_cost: z.number().optional(),
  poc_name: z.string().optional(),
  poc_email: z.string().email().optional().or(z.literal('')),
  poc_phone: z.string().optional(),
  assigned_team_id: z.number().optional(),
});

type POAMEditData = z.infer<typeof poamEditSchema>;

export default function POAMEditPage() {
  const router = useRouter();
  const params = useParams();
  const poamId = params.id as string;
  
  const [poam, setPOAM] = useState<{
    id: number;
    poam_number: string;
    title: string;
    weakness_description: string;
    nist_control_id: string;
    severity: string;
    status: string;
    priority: string;
    residual_risk_level: string;
    target_completion_date: string;
    poc_name: string;
    poc_email: string;
    assigned_team_id: number;
  } | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [teams, setTeams] = useState<Array<{id: number; name: string}>>([]);
  const [errors, setErrors] = useState<Record<string, string>>({});
  
  const [formData, setFormData] = useState<POAMEditData>({
    title: '',
    weakness_description: '',
    nist_control_id: '',
    severity: 'Medium',
    status: 'Draft',
    priority: 'Medium',
    residual_risk_level: undefined,
    target_completion_date: '',
    actual_completion_date: '',
    estimated_cost: undefined,
    actual_cost: undefined,
    poc_name: '',
    poc_email: '',
    poc_phone: '',
    assigned_team_id: undefined,
  });

  const fetchPOAM = useCallback(async () => {
    try {
      setLoading(true);
      const res = await fetch(`/api/poams/${poamId}`);
      if (res.ok) {
        const data = await res.json();
        setPOAM(data);
        
        // Populate form with existing data
        setFormData({
          title: data.title || '',
          weakness_description: data.weakness_description || '',
          nist_control_id: data.nist_control_id || '',
          severity: data.severity || 'Medium',
          status: data.status || 'Draft',
          priority: data.priority || 'Medium',
          residual_risk_level: data.residual_risk_level || undefined,
          target_completion_date: data.target_completion_date || '',
          actual_completion_date: data.actual_completion_date || '',
          estimated_cost: data.estimated_cost || undefined,
          actual_cost: data.actual_cost || undefined,
          poc_name: data.poc_name || '',
          poc_email: data.poc_email || '',
          poc_phone: data.poc_phone || '',
          assigned_team_id: data.assigned_team_id || undefined,
        });
      } else if (res.status === 404) {
        router.push('/vulnerability-center/poams');
      }
    } catch (error) {
      console.error('Failed to fetch POAM:', error);
      router.push('/vulnerability-center/poams');
    } finally {
      setLoading(false);
    }
  }, [poamId, router]);

  const fetchTeams = useCallback(async () => {
    try {
      const res = await fetch('/api/teams');
      if (res.ok) {
        const data = await res.json();
        setTeams(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch teams:', error);
    }
  }, []);

  useEffect(() => {
    if (poamId) {
      fetchPOAM();
      fetchTeams();
    }
  }, [poamId, fetchPOAM, fetchTeams]);

  const handleSave = async () => {
    try {
      setSaving(true);
      setErrors({});
      
      const validation = poamEditSchema.safeParse(formData);
      
      if (!validation.success) {
        const fieldErrors: Record<string, string> = {};
        validation.error.issues.forEach((err) => {
          const path = err.path.join('.');
          fieldErrors[path] = err.message;
        });
        setErrors(fieldErrors);
        return;
      }

      const res = await fetch(`/api/poams/${poamId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (res.ok) {
        router.push(`/vulnerability-center/poams/${poamId}`);
      } else {
        const error = await res.json();
        alert(error.error || 'Failed to update POAM');
      }
    } catch (error) {
      console.error('Failed to update POAM:', error);
      alert('An error occurred while updating the POAM');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!poam) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">POAM not found</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-4">
          <Button
            variant="outline"
            onClick={() => router.back()}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back
          </Button>
          <div>
            <h1 className="text-2xl font-bold">Edit POAM</h1>
            <p className="text-gray-600">{poam.poam_number}: {poam.title}</p>
          </div>
        </div>
        
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={() => router.push(`/vulnerability-center/poams/${poamId}`)}
          >
            <X className="w-4 h-4 mr-2" />
            Cancel
          </Button>
          <Button onClick={handleSave} disabled={saving}>
            <Save className="w-4 h-4 mr-2" />
            {saving ? 'Saving...' : 'Save Changes'}
          </Button>
        </div>
      </div>

      {/* Form */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Basic Information */}
        <Card>
          <CardHeader>
            <CardTitle>Basic Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Title *</label>
              <Input
                value={formData.title}
                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                placeholder="Enter POAM title"
              />
              {errors.title && <p className="text-red-500 text-sm mt-1">{errors.title}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Weakness Description</label>
              <Textarea
                value={formData.weakness_description}
                onChange={(e) => setFormData(prev => ({ ...prev, weakness_description: e.target.value }))}
                rows={3}
                placeholder="Describe the weakness or vulnerability"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">NIST Control ID</label>
              <Input
                value={formData.nist_control_id}
                onChange={(e) => setFormData(prev => ({ ...prev, nist_control_id: e.target.value }))}
                placeholder="e.g., AC-2, SI-3"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Severity *</label>
                <Select value={formData.severity} onValueChange={(value: 'Critical' | 'High' | 'Medium' | 'Low') => setFormData(prev => ({ ...prev, severity: value }))}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Critical">Critical</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="Low">Low</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Priority *</label>
                <Select value={formData.priority} onValueChange={(value: 'Critical' | 'High' | 'Medium' | 'Low') => setFormData(prev => ({ ...prev, priority: value }))}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Critical">Critical</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="Low">Low</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Status</label>
              <Select value={formData.status} onValueChange={(value: 'Draft' | 'Open' | 'In_Progress' | 'Completed' | 'Closed' | 'Cancelled') => setFormData(prev => ({ ...prev, status: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Draft">Draft</SelectItem>
                  <SelectItem value="Open">Open</SelectItem>
                  <SelectItem value="In_Progress">In Progress</SelectItem>
                  <SelectItem value="Completed">Completed</SelectItem>
                  <SelectItem value="Closed">Closed</SelectItem>
                  <SelectItem value="Cancelled">Cancelled</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Residual Risk Level</label>
              <Select 
                value={formData.residual_risk_level || 'not_set'} 
                onValueChange={(value) => setFormData(prev => ({ 
                  ...prev, 
                  residual_risk_level: value === 'not_set' ? undefined : value as 'Very_High' | 'High' | 'Medium' | 'Low' | 'Very_Low' 
                }))}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="not_set">Not assessed</SelectItem>
                  <SelectItem value="Very_High">Very High</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Very_Low">Very Low</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Assignment & Timeline */}
        <Card>
          <CardHeader>
            <CardTitle>Assignment & Timeline</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Assigned Team</label>
              <Select 
                value={formData.assigned_team_id?.toString() || 'none'} 
                onValueChange={(value) => setFormData(prev => ({ 
                  ...prev, 
                  assigned_team_id: value === 'none' ? undefined : parseInt(value) 
                }))}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">No team assigned</SelectItem>
                  {teams.map(team => (
                    <SelectItem key={team.id} value={team.id.toString()}>{team.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Target Completion Date</label>
              <Input
                type="date"
                value={formData.target_completion_date}
                onChange={(e) => setFormData(prev => ({ ...prev, target_completion_date: e.target.value }))}
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Actual Completion Date</label>
              <Input
                type="date"
                value={formData.actual_completion_date}
                onChange={(e) => setFormData(prev => ({ ...prev, actual_completion_date: e.target.value }))}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Estimated Cost ($)</label>
                <Input
                  type="number"
                  value={formData.estimated_cost || ''}
                  onChange={(e) => setFormData(prev => ({ 
                    ...prev, 
                    estimated_cost: e.target.value ? parseFloat(e.target.value) : undefined 
                  }))}
                  placeholder="0.00"
                  step="0.01"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Actual Cost ($)</label>
                <Input
                  type="number"
                  value={formData.actual_cost || ''}
                  onChange={(e) => setFormData(prev => ({ 
                    ...prev, 
                    actual_cost: e.target.value ? parseFloat(e.target.value) : undefined 
                  }))}
                  placeholder="0.00"
                  step="0.01"
                />
              </div>
            </div>

            <div className="space-y-3">
              <h4 className="font-medium">Point of Contact</h4>
              
              <div>
                <label className="block text-sm font-medium mb-1">Name</label>
                <Input
                  value={formData.poc_name}
                  onChange={(e) => setFormData(prev => ({ ...prev, poc_name: e.target.value }))}
                  placeholder="POC Name"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Email</label>
                <Input
                  type="email"
                  value={formData.poc_email}
                  onChange={(e) => setFormData(prev => ({ ...prev, poc_email: e.target.value }))}
                  placeholder="poc@example.com"
                />
                {errors.poc_email && <p className="text-red-500 text-sm mt-1">{errors.poc_email}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Phone</label>
                <Input
                  type="tel"
                  value={formData.poc_phone}
                  onChange={(e) => setFormData(prev => ({ ...prev, poc_phone: e.target.value }))}
                  placeholder="(555) 123-4567"
                />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}