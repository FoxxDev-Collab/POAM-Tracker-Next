"use client"

import Link from "next/link"
import { usePathname } from "next/navigation"
import { useState } from "react"
import { Package, FileText, Shield, ClipboardList, AlertTriangle, Database, ChevronDown, ChevronRight, Home } from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible"

type SidebarItem = {
  href?: string
  label: string
  icon: React.ComponentType<{ className?: string }>
  description?: string
  children?: {
    href: string
    label: string
    icon?: React.ComponentType<{ className?: string }>
  }[]
}

const vulnerabilityCenterItems: SidebarItem[] = [
  { 
    href: "/vulnerability-center/vulnerabilities", 
    label: "Vulnerability Management", 
    icon: Package,
    description: "Vulnerability Management/Packages"
  },
  { 
    label: "Security Test Plans", 
    icon: FileText,
    description: "Remediation & test",
    children: [
      {
        href: "/vulnerability-center/stps",
        label: "Dashboard",
        icon: Home
      },
      {
        href: "/vulnerability-center/stps/nessus-stps",
        label: "Nessus STPs",
        icon: Database
      },
      {
        href: "/vulnerability-center/stps/stig-stps", 
        label: "STIG STPs",
        icon: FileText
      }
    ]
  },
  { 
    href: "/vulnerability-center/poams", 
    label: "POAMs", 
    icon: ClipboardList,
    description: "Plans of action & milestones"
  },
  { 
    href: "/vulnerability-center/file-manager", 
    label: "File Manager", 
    icon: Database,
    description: "Upload & manage files"
  },
]

export function VulnerabilityCenterSidebar() {
  const pathname = usePathname()
  const [stpsOpen, setStpsOpen] = useState(pathname?.includes('/stps') || false)

  return (
    <aside className="w-64 shrink-0 border-r border-border bg-muted/10">
      <div className="flex h-full flex-col">
        {/* Sidebar Header */}
        <div className="flex h-14 items-center border-b border-border px-4">
          <div className="flex items-center space-x-2">
            <Shield className="h-5 w-5 text-primary" />
            <span className="font-semibold">Vulnerability Center</span>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 space-y-1 p-2">
          {vulnerabilityCenterItems.map((item) => {
            const Icon = item.icon
            
            // Handle items with children (dropdown)
            if (item.children) {
              const isGroupActive = pathname?.includes('/stps')
              
              return (
                <Collapsible
                  key={item.label}
                  open={stpsOpen}
                  onOpenChange={setStpsOpen}
                >
                  <CollapsibleTrigger asChild>
                    <Button
                      variant={isGroupActive ? "secondary" : "ghost"}
                      className={`w-full justify-start gap-3 h-auto p-3 ${
                        isGroupActive 
                          ? "bg-secondary text-secondary-foreground" 
                          : "hover:bg-muted"
                      }`}
                    >
                      <Icon className="h-4 w-4 shrink-0" />
                      <div className="flex flex-col items-start text-left flex-1">
                        <span className="text-sm font-medium">{item.label}</span>
                        {item.description && (
                          <span className="text-xs text-muted-foreground line-clamp-2">
                            {item.description}
                          </span>
                        )}
                      </div>
                      {stpsOpen ? (
                        <ChevronDown className="h-4 w-4 shrink-0" />
                      ) : (
                        <ChevronRight className="h-4 w-4 shrink-0" />
                      )}
                    </Button>
                  </CollapsibleTrigger>
                  <CollapsibleContent className="pl-4 space-y-1">
                    {item.children.map((child) => {
                      const ChildIcon = child.icon
                      const isChildActive = pathname === child.href || pathname?.startsWith(child.href + "/")
                      
                      return (
                        <Link key={child.href} href={child.href}>
                          <Button
                            variant={isChildActive ? "secondary" : "ghost"}
                            className={`w-full justify-start gap-3 h-auto p-2 ${
                              isChildActive 
                                ? "bg-secondary text-secondary-foreground" 
                                : "hover:bg-muted"
                            }`}
                          >
                            {ChildIcon && <ChildIcon className="h-3 w-3 shrink-0" />}
                            <span className="text-sm">{child.label}</span>
                          </Button>
                        </Link>
                      )
                    })}
                  </CollapsibleContent>
                </Collapsible>
              )
            }
            
            // Handle regular items (no dropdown)
            if (!item.href) return null // Skip items without href and without children
            
            const isActive = pathname === item.href || pathname?.startsWith(item.href + "/")
            
            return (
              <Link key={item.href} href={item.href}>
                <Button
                  variant={isActive ? "secondary" : "ghost"}
                  className={`w-full justify-start gap-3 h-auto p-3 ${
                    isActive 
                      ? "bg-secondary text-secondary-foreground" 
                      : "hover:bg-muted"
                  }`}
                >
                  <Icon className="h-4 w-4 shrink-0" />
                  <div className="flex flex-col items-start text-left">
                    <span className="text-sm font-medium">{item.label}</span>
                    {item.description && (
                      <span className="text-xs text-muted-foreground line-clamp-2">
                        {item.description}
                      </span>
                    )}
                  </div>
                </Button>
              </Link>
            )
          })}
        </nav>

        {/* Footer */}
        <div className="border-t border-border p-3">
          <div className="text-xs text-muted-foreground">
            Â© {new Date().getFullYear()} Jeremiah P.
          </div>
        </div>
      </div>
    </aside>
  )
}
