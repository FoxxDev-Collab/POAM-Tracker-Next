/**
 * Vulnerability Center API Functions
 *
 * Type-safe wrapper functions for vulnerability center endpoints.
 * Uses the unified API client for consistent error handling and auth.
 */

import { api } from './api-client';

// ============================================================================
// Types
// ============================================================================

export interface GroupScore {
  id: number;
  groupId: number;
  assessmentCompleteness: number;
  overallCompliance: number;
  totalSystems: number;
  completeAssessments: number;
  highestSystemScore: number;
  lowestSystemScore: number;
  worstSystemId: number | null;
  worstSystemName: string | null;
  totalFindings: number;
  openFindings: number;
  notReviewedFindings: number;
  catITotal: number;
  catIOpen: number;
  catIITotal: number;
  catIIOpen: number;
  catIIITotal: number;
  catIIIOpen: number;
  controlsAffected: number;
  controlsCompliant: number;
  calculatedAt: string;
  group?: {
    id: number;
    name: string;
    description: string | null;
  };
  worstSystem?: {
    id: number;
    name: string;
    hostname: string | null;
  };
}

export interface PackageScore {
  id: number;
  packageId: number;
  assessmentCompleteness: number;
  overallCompliance: number;
  totalGroups: number;
  completeGroups: number;
  highestGroupScore: number;
  lowestGroupScore: number;
  worstGroupId: number | null;
  worstGroupName: string | null;
  totalSystems: number;
  completeAssessments: number;
  worstSystemId: number | null;
  worstSystemName: string | null;
  totalFindings: number;
  openFindings: number;
  notReviewedFindings: number;
  catITotal: number;
  catIOpen: number;
  catIITotal: number;
  catIIOpen: number;
  catIIITotal: number;
  catIIIOpen: number;
  controlsAffected: number;
  controlsCompliant: number;
  calculatedAt: string;
  package?: {
    id: number;
    name: string;
    description: string | null;
  };
  worstGroup?: {
    id: number;
    name: string;
    description: string | null;
  };
  worstSystem?: {
    id: number;
    name: string;
    hostname: string | null;
  };
}

export interface SystemScore {
  id: number;
  systemId: number;
  scanId: number;
  assessmentProgress: number;
  complianceScore: number;
  totalFindings: number;
  openFindings: number;
  notReviewedFindings: number;
  catIOpen: number;
  catIIOpen: number;
  catIIIOpen: number;
  calculatedAt: string;
}

export interface ControlStatus {
  id: number;
  controlId: string;
  systemsAffected: number;
  systemsCompliant: number;
  assessmentComplete: boolean;
  totalFindings: number;
  openFindings: number;
  catIOpen: number;
  catIIOpen: number;
  catIIIOpen: number;
  status: string;
  lastAssessed: string;
}

// ============================================================================
// Score Functions
// ============================================================================

export async function fetchGroupScore(groupId: number): Promise<GroupScore | null> {
  const response = await api.get<GroupScore>(`vulnerability-center/groups/${groupId}/score`);
  return response.ok ? response.data : null;
}

export async function fetchPackageScore(packageId: number): Promise<PackageScore | null> {
  const response = await api.get<PackageScore>(`vulnerability-center/packages/${packageId}/score`);
  return response.ok ? response.data : null;
}

export async function fetchSystemScore(systemId: number): Promise<SystemScore | null> {
  const response = await api.get<SystemScore>(`vulnerability-center/systems/${systemId}/score`);
  return response.ok ? response.data : null;
}

// ============================================================================
// Control Status Functions
// ============================================================================

export async function fetchGroupControlStatus(groupId: number): Promise<ControlStatus[]> {
  const response = await api.get<ControlStatus[]>(`vulnerability-center/groups/${groupId}/control-status`);
  return response.ok ? response.data || [] : [];
}

export async function fetchPackageControlStatus(packageId: number): Promise<ControlStatus[]> {
  const response = await api.get<ControlStatus[]>(`vulnerability-center/packages/${packageId}/control-status`);
  return response.ok ? response.data || [] : [];
}

// ============================================================================
// Recalculation Functions
// ============================================================================

export async function recalculateGroupScore(groupId: number): Promise<boolean> {
  const response = await api.post(`vulnerability-center/groups/${groupId}/recalculate-score`);
  return response.ok;
}

export async function recalculatePackageScore(packageId: number): Promise<boolean> {
  const response = await api.post(`vulnerability-center/packages/${packageId}/recalculate-score`);
  return response.ok;
}
