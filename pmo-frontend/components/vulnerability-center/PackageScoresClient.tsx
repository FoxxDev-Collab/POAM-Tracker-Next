'use client';

import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { RefreshCw, Loader2 } from 'lucide-react';
import { PackageScoreOverview } from './PackageScoreOverview';
import { GroupsStigSummary } from './GroupsStigSummary';
import { apiUrl } from '@/lib/api-helpers';
import { queuedFetch } from '@/lib/request-queue';
import { PackageScore, GroupScore } from '@/lib/vulnerability-api';

interface Group {
  id: number;
  name: string;
  description: string | null;
  _count?: {
    systems: number;
  };
}

interface PackageScoresClientProps {
  packageId: number;
  packageName: string;
  groups: Group[];
}

export default function PackageScoresClient({
  packageId,
  packageName,
  groups
}: PackageScoresClientProps) {
  const [packageScore, setPackageScore] = useState<PackageScore | null>(null);
  const [groupStigData, setGroupStigData] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [recalculating, setRecalculating] = useState(false);

  const fetchScores = async () => {
    try {
      setLoading(true);

      // Fetch package score
      const packageResponse = await queuedFetch(`${apiUrl(`/vulnerability-center/packages/${packageId}/score`)}`);
      if (packageResponse.ok) {
        const text = await packageResponse.text();
        if (text) {
          try {
            const packageScoreData = JSON.parse(text);
            setPackageScore(packageScoreData);
          } catch (parseError) {
            console.warn('Failed to parse package score response:', parseError);
            setPackageScore(null);
          }
        }
      }

      // Fetch group scores
      const groupScorePromises = groups.map(async (group) => {
        try {
          const response = await queuedFetch(`${apiUrl(`/vulnerability-center/groups/${group.id}/score`)}`);
          if (response.ok) {
            const text = await response.text();
            if (text) {
              try {
                const score: GroupScore = JSON.parse(text);
                return {
                  groupId: group.id,
                  groupName: group.name,
                  description: group.description,
                  totalSystems: group._count?.systems || 0,
                  completeAssessments: score?.completeAssessments || 0,
                  assessmentProgress: score?.assessmentCompleteness || 0,
                  complianceScore: score?.overallCompliance || 0,
                  totalFindings: score?.totalFindings || 0,
                  openFindings: score?.openFindings || 0,
                  notReviewedFindings: score?.notReviewedFindings || 0,
                  catIOpen: score?.catIOpen || 0,
                  catIIOpen: score?.catIIOpen || 0,
                  catIIIOpen: score?.catIIIOpen || 0,
                  worstSystemName: score?.worstSystemName,
                };
              } catch (parseError) {
                console.warn(`Failed to parse group score response for group ${group.id}:`, parseError);
                return null;
              }
            }
          }
          return null;
        } catch (error) {
          console.error(`Error fetching score for group ${group.id}:`, error);
          return null;
        }
      });

      const groupScores = await Promise.all(groupScorePromises);
      setGroupStigData(groupScores.filter(score => score !== null));
    } catch (error) {
      console.error('Error fetching scores:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleRecalculate = async () => {
    try {
      setRecalculating(true);
      const response = await queuedFetch(`${apiUrl(`/vulnerability-center/packages/${packageId}/recalculate-score`)}`, {
        method: 'POST',
      });

      if (response.ok) {
        // Refresh scores after recalculation
        await fetchScores();
      } else {
        console.error('Failed to recalculate scores');
      }
    } catch (error) {
      console.error('Error recalculating scores:', error);
    } finally {
      setRecalculating(false);
    }
  };

  useEffect(() => {
    fetchScores();
  }, [packageId]);

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>STIG Compliance Overview</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center space-x-2">
            <Loader2 className="h-4 w-4 animate-spin" />
            <span>Loading compliance scores...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!packageScore) {
    return (
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>STIG Compliance Overview</CardTitle>
            <Button
              onClick={handleRecalculate}
              variant="outline"
              size="sm"
              disabled={recalculating}
            >
              {recalculating ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <RefreshCw className="mr-2 h-4 w-4" />
              )}
              Calculate Scores
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            No STIG compliance data available. Import STIG scans for systems in this package to see compliance scores.
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header with recalculate button */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">STIG Compliance Overview</h2>
          <p className="text-muted-foreground">
            Compliance is based on the worst-performing group in the package
          </p>
        </div>
        <Button
          onClick={handleRecalculate}
          variant="outline"
          size="sm"
          disabled={recalculating}
        >
          {recalculating ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <RefreshCw className="mr-2 h-4 w-4" />
          )}
          Recalculate Scores
        </Button>
      </div>

      <Separator />

      {/* Package Score Overview */}
      <PackageScoreOverview
        packageScore={packageScore}
        packageName={packageName}
      />

      {/* Groups Summary */}
      <GroupsStigSummary
        groups={groupStigData}
        packageId={packageId}
      />
    </div>
  );
}