import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { AlertTriangle, CheckCircle, XCircle, AlertCircle, Shield } from 'lucide-react';

interface ScoreCardProps {
  title: string;
  assessmentCompleteness: number;
  overallCompliance: number;
  totalFindings: number;
  openFindings: number;
  notReviewedFindings: number;
  catIOpen: number;
  catIIOpen: number;
  catIIIOpen: number;
  worstEntityName?: string | null;
  worstEntityType?: 'system' | 'group';
}

export function ScoreCard({
  title,
  assessmentCompleteness,
  overallCompliance,
  totalFindings,
  openFindings,
  notReviewedFindings,
  catIOpen,
  catIIOpen,
  catIIIOpen,
  worstEntityName,
  worstEntityType,
}: ScoreCardProps) {
  const getComplianceColor = (score: number) => {
    if (score >= 95) return 'text-green-600 dark:text-green-400';
    if (score >= 80) return 'text-yellow-600 dark:text-yellow-400';
    if (score >= 60) return 'text-orange-600 dark:text-orange-400';
    return 'text-red-600 dark:text-red-400';
  };

  const getComplianceBadge = (score: number) => {
    if (score >= 95) return { label: 'Compliant', variant: 'success' as const };
    if (score >= 80) return { label: 'Mostly Compliant', variant: 'warning' as const };
    if (score >= 60) return { label: 'Partially Compliant', variant: 'secondary' as const };
    return { label: 'Non-Compliant', variant: 'destructive' as const };
  };

  const getAssessmentBadge = (completion: number) => {
    if (completion === 100) return { label: 'Complete', variant: 'success' as const };
    if (completion >= 90) return { label: 'Nearly Complete', variant: 'warning' as const };
    if (completion >= 50) return { label: 'In Progress', variant: 'secondary' as const };
    return { label: 'Incomplete', variant: 'destructive' as const };
  };

  const compliance = getComplianceBadge(overallCompliance);
  const assessment = getAssessmentBadge(assessmentCompleteness);

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            {title}
          </CardTitle>
          <div className="flex gap-2">
            <Badge variant={assessment.variant}>{assessment.label}</Badge>
            <Badge variant={compliance.variant}>{compliance.label}</Badge>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Compliance Score */}
        <div>
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-medium">Overall Compliance</span>
            <span className={`text-2xl font-bold ${getComplianceColor(overallCompliance)}`}>
              {overallCompliance.toFixed(1)}%
            </span>
          </div>
          <Progress value={overallCompliance} className="h-3" />
          {worstEntityName && (
            <p className="text-xs text-muted-foreground mt-2">
              Based on worst {worstEntityType}: <span className="font-medium">{worstEntityName}</span>
            </p>
          )}
        </div>

        {/* Assessment Progress */}
        <div>
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-medium">Assessment Progress</span>
            <span className="text-lg font-semibold">
              {assessmentCompleteness.toFixed(1)}%
            </span>
          </div>
          <Progress value={assessmentCompleteness} className="h-2" />
          {notReviewedFindings > 0 && (
            <p className="text-xs text-orange-600 dark:text-orange-400 mt-1">
              {notReviewedFindings} findings not reviewed
            </p>
          )}
        </div>

        {/* Finding Statistics */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <p className="text-xs text-muted-foreground">Total Findings</p>
            <p className="text-lg font-semibold">{totalFindings}</p>
          </div>
          <div>
            <p className="text-xs text-muted-foreground">Open Findings</p>
            <p className="text-lg font-semibold text-orange-600 dark:text-orange-400">
              {openFindings}
            </p>
          </div>
        </div>

        {/* Category Breakdown */}
        <div className="space-y-2">
          <p className="text-sm font-medium">Open by Severity</p>
          <div className="space-y-1">
            {catIOpen > 0 && (
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <XCircle className="h-4 w-4 text-red-600 dark:text-red-400" />
                  <span className="text-sm">CAT I (Critical)</span>
                </div>
                <span className="text-sm font-medium text-red-600 dark:text-red-400">
                  {catIOpen}
                </span>
              </div>
            )}
            {catIIOpen > 0 && (
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4 text-orange-600 dark:text-orange-400" />
                  <span className="text-sm">CAT II (High)</span>
                </div>
                <span className="text-sm font-medium text-orange-600 dark:text-orange-400">
                  {catIIOpen}
                </span>
              </div>
            )}
            {catIIIOpen > 0 && (
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <AlertCircle className="h-4 w-4 text-yellow-600 dark:text-yellow-400" />
                  <span className="text-sm">CAT III (Medium)</span>
                </div>
                <span className="text-sm font-medium text-yellow-600 dark:text-yellow-400">
                  {catIIIOpen}
                </span>
              </div>
            )}
            {catIOpen === 0 && catIIOpen === 0 && catIIIOpen === 0 && openFindings === 0 && (
              <div className="flex items-center gap-2 text-green-600 dark:text-green-400">
                <CheckCircle className="h-4 w-4" />
                <span className="text-sm">No open findings</span>
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}