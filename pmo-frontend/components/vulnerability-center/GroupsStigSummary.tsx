'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import Link from 'next/link';
import { Users, AlertTriangle, XCircle, AlertCircle, Monitor } from 'lucide-react';

interface GroupStigData {
  groupId: number;
  groupName: string;
  description?: string;
  totalSystems: number;
  completeAssessments: number;
  assessmentProgress: number;
  complianceScore: number;
  totalFindings: number;
  openFindings: number;
  notReviewedFindings: number;
  catIOpen: number;
  catIIOpen: number;
  catIIIOpen: number;
  worstSystemName?: string;
}

interface GroupsStigSummaryProps {
  groups: GroupStigData[];
  packageId: number;
}

export function GroupsStigSummary({ groups, packageId }: GroupsStigSummaryProps) {
  // Ensure groups is a valid array
  const groupsArray = Array.isArray(groups) ? groups : [];

  const getComplianceColor = (score: number) => {
    if (score >= 95) return 'text-green-600 dark:text-green-400';
    if (score >= 80) return 'text-yellow-600 dark:text-yellow-400';
    if (score >= 60) return 'text-orange-600 dark:text-orange-400';
    return 'text-red-600 dark:text-red-400';
  };

  const getStatusBadge = (group: GroupStigData) => {
    if (group.notReviewedFindings > 0) {
      return <Badge variant="secondary">Assessment Incomplete</Badge>;
    }
    if (group.catIOpen > 0) {
      return <Badge variant="destructive">Critical Findings</Badge>;
    }
    if (group.openFindings > 0) {
      return <Badge variant="warning">Open Findings</Badge>;
    }
    if (group.complianceScore >= 95) {
      return <Badge variant="success">Compliant</Badge>;
    }
    return <Badge variant="secondary">Non-Compliant</Badge>;
  };

  const sortedGroups = [...groupsArray].sort((a, b) => {
    // Sort by compliance score (ascending, so worst first)
    return a.complianceScore - b.complianceScore;
  });

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Users className="h-5 w-5" />
          Groups STIG Status
        </CardTitle>
      </CardHeader>
      <CardContent>
        {groupsArray.length === 0 ? (
          <p className="text-muted-foreground">No groups with STIG data found.</p>
        ) : (
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Group</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead className="text-center">Systems</TableHead>
                  <TableHead className="text-center">Compliance</TableHead>
                  <TableHead className="text-center">Assessment</TableHead>
                  <TableHead className="text-center">CAT I</TableHead>
                  <TableHead className="text-center">CAT II</TableHead>
                  <TableHead className="text-center">CAT III</TableHead>
                  <TableHead className="text-center">Total Open</TableHead>
                  <TableHead>Worst System</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {sortedGroups.map((group) => (
                  <TableRow key={group.groupId}>
                    <TableCell>
                      <div>
                        <p className="font-medium">{group.groupName}</p>
                        {group.description && (
                          <p className="text-xs text-muted-foreground">{group.description}</p>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>{getStatusBadge(group)}</TableCell>
                    <TableCell className="text-center">
                      <div className="flex flex-col items-center gap-1">
                        <div className="flex items-center gap-1">
                          <Monitor className="h-3 w-3" />
                          <span className="text-sm font-medium">{group.totalSystems}</span>
                        </div>
                        <span className="text-xs text-muted-foreground">
                          {group.completeAssessments} complete
                        </span>
                      </div>
                    </TableCell>
                    <TableCell className="text-center">
                      <div className="flex flex-col items-center gap-1">
                        <span className={`font-semibold ${getComplianceColor(group.complianceScore)}`}>
                          {group.complianceScore.toFixed(1)}%
                        </span>
                        <Progress value={group.complianceScore} className="h-1.5 w-16" />
                      </div>
                    </TableCell>
                    <TableCell className="text-center">
                      <div className="flex flex-col items-center gap-1">
                        <span className="text-sm">
                          {group.assessmentProgress.toFixed(0)}%
                        </span>
                        {group.notReviewedFindings > 0 && (
                          <span className="text-xs text-orange-600 dark:text-orange-400">
                            {group.notReviewedFindings} pending
                          </span>
                        )}
                      </div>
                    </TableCell>
                    <TableCell className="text-center">
                      {group.catIOpen > 0 ? (
                        <div className="flex items-center justify-center gap-1">
                          <XCircle className="h-4 w-4 text-red-600 dark:text-red-400" />
                          <span className="font-medium text-red-600 dark:text-red-400">
                            {group.catIOpen}
                          </span>
                        </div>
                      ) : (
                        <span className="text-muted-foreground">0</span>
                      )}
                    </TableCell>
                    <TableCell className="text-center">
                      {group.catIIOpen > 0 ? (
                        <div className="flex items-center justify-center gap-1">
                          <AlertTriangle className="h-4 w-4 text-orange-600 dark:text-orange-400" />
                          <span className="font-medium text-orange-600 dark:text-orange-400">
                            {group.catIIOpen}
                          </span>
                        </div>
                      ) : (
                        <span className="text-muted-foreground">0</span>
                      )}
                    </TableCell>
                    <TableCell className="text-center">
                      {group.catIIIOpen > 0 ? (
                        <div className="flex items-center justify-center gap-1">
                          <AlertCircle className="h-4 w-4 text-yellow-600 dark:text-yellow-400" />
                          <span className="font-medium text-yellow-600 dark:text-yellow-400">
                            {group.catIIIOpen}
                          </span>
                        </div>
                      ) : (
                        <span className="text-muted-foreground">0</span>
                      )}
                    </TableCell>
                    <TableCell className="text-center">
                      <span className={group.openFindings > 0 ? 'font-semibold' : 'text-muted-foreground'}>
                        {group.openFindings}
                      </span>
                    </TableCell>
                    <TableCell>
                      {group.worstSystemName ? (
                        <span className="text-sm text-muted-foreground">{group.worstSystemName}</span>
                      ) : (
                        <span className="text-sm text-muted-foreground">N/A</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <Link
                        href={`/vulnerability-center/vulnerabilities/${packageId}/groups/${group.groupId}`}
                        className="text-sm text-primary hover:underline"
                      >
                        View Details
                      </Link>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
      </CardContent>
    </Card>
  );
}