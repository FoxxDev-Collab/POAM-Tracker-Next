'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { useSSE } from '@/lib/use-sse';
import { CheckCircle, Clock, AlertCircle, Loader2, Upload } from 'lucide-react';

interface ImportStatus {
  jobId: string;
  status: 'waiting' | 'active' | 'completed' | 'failed';
  progress: number;
  stage: string;
  details?: string;
  systemId?: number;
  systemName?: string;
  totalSteps?: number;
  currentStep?: number;
  startTime?: number;
  endTime?: number;
  errors?: string[];
}

interface StigImportProgressProps {
  systemId?: number;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  onComplete?: (result: any) => void;
  onError?: (error: string) => void;
}

export function StigImportProgress({
  systemId,
  onComplete,
  onError
}: StigImportProgressProps) {
  const [imports, setImports] = useState<Map<string, ImportStatus>>(new Map());
  const [showCompleted, setShowCompleted] = useState(true);

  const { connected, error } = useSSE({
    channel: systemId ? `stig-import-${systemId}` : 'stig-import-global',
    onMessage: (message) => {
      handleSSEMessage(message);
    },
    onError: (event) => {
      console.error('SSE connection error:', event);
      if (onError) {
        onError('Real-time connection failed');
      }
    }
  });

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const handleSSEMessage = (message: any) => {
    if (message.type === 'stig-import-update') {
      const status: ImportStatus = message.data;

      setImports(prev => {
        const updated = new Map(prev);
        updated.set(status.jobId, status);
        return updated;
      });

      // Call callbacks
      if (status.status === 'completed' && onComplete) {
        onComplete(status);
      } else if (status.status === 'failed' && onError) {
        onError(status.details || 'Import failed');
      }

      // Auto-remove completed imports after 30 seconds
      if (status.status === 'completed' || status.status === 'failed') {
        setTimeout(() => {
          setImports(prev => {
            const updated = new Map(prev);
            updated.delete(status.jobId);
            return updated;
          });
        }, 30000);
      }
    }
  };

   
  const getStatusIcon = (status: ImportStatus) => {
    switch (status.status) {
      case 'waiting':
        return <Clock className="h-4 w-4 text-yellow-500" />;
      case 'active':
        return <Loader2 className="h-4 w-4 text-blue-500 animate-spin" />;
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'failed':
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      default:
        return <Upload className="h-4 w-4 text-gray-500" />;
    }
  };

  const getStatusBadge = (status: ImportStatus) => {
    switch (status.status) {
      case 'waiting':
        return <Badge variant="secondary">Waiting</Badge>;
      case 'active':
        return <Badge variant="default">Processing</Badge>;
      case 'completed':
        return <Badge variant="success" className="bg-green-500/10 text-green-700 border-green-500/20">Completed</Badge>;
      case 'failed':
        return <Badge variant="destructive">Failed</Badge>;
      default:
        return <Badge variant="outline">Unknown</Badge>;
    }
  };

  const getElapsedTime = (status: ImportStatus) => {
    if (!status.startTime) return null;

    const endTime = status.endTime || Date.now();
    const elapsed = Math.round((endTime - status.startTime) / 1000);

    if (elapsed < 60) return `${elapsed}s`;
    if (elapsed < 3600) return `${Math.round(elapsed / 60)}m`;
    return `${Math.round(elapsed / 3600)}h`;
  };

  const visibleImports = Array.from(imports.values()).filter(status =>
    showCompleted || (status.status !== 'completed' && status.status !== 'failed')
  );

  if (visibleImports.length === 0) {
    return null;
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Upload className="h-5 w-5" />
            STIG Import Progress
          </CardTitle>
          <div className="flex items-center gap-2">
            {!connected && (
              <Badge variant="secondary" className="text-orange-600">
                Disconnected
              </Badge>
            )}
            {error && (
              <Badge variant="destructive">
                Error
              </Badge>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        {visibleImports.map((status) => (
          <div key={status.jobId} className="border rounded-lg p-4 space-y-3">
            {/* Header */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                {getStatusIcon(status)}
                <span className="font-medium">
                  {status.systemName || `System ${status.systemId}`}
                </span>
                {getStatusBadge(status)}
              </div>
              <div className="text-sm text-muted-foreground">
                {getElapsedTime(status)}
              </div>
            </div>

            {/* Progress */}
            {status.status === 'active' && (
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>{status.stage || 'Processing...'}</span>
                  {status.totalSteps && status.currentStep && (
                    <span>{status.currentStep}/{status.totalSteps}</span>
                  )}
                </div>
                <Progress value={status.progress || 0} className="h-2" />
                {status.details && (
                  <p className="text-xs text-muted-foreground">{status.details}</p>
                )}
              </div>
            )}

            {/* Completion details */}
            {status.status === 'completed' && status.details && (
              <p className="text-sm text-green-600">{status.details}</p>
            )}

            {/* Error details */}
            {status.status === 'failed' && (
              <div className="space-y-1">
                {status.details && (
                  <p className="text-sm text-red-600">{status.details}</p>
                )}
                {status.errors && status.errors.length > 0 && (
                  <div className="text-xs text-red-500 space-y-1">
                    {status.errors.map((error, index) => (
                      <div key={index}>â€¢ {error}</div>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
        ))}

        {/* Toggle completed */}
        {imports.size > visibleImports.length && (
          <button
            onClick={() => setShowCompleted(!showCompleted)}
            className="text-sm text-primary hover:underline"
          >
            {showCompleted ? 'Hide' : 'Show'} completed imports
          </button>
        )}
      </CardContent>
    </Card>
  );
}