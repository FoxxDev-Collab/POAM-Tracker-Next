import { NextRequest, NextResponse } from 'next/server';
import { serverApiUrl } from '@/lib/server-api-helpers';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ systemId: string }> }
) {
  try {
    const resolvedParams = await params;
    const { searchParams } = new URL(request.url);

    // Build query parameters
    const queryParams = new URLSearchParams();

    if (searchParams.has('scanId')) {
      queryParams.set('scanId', searchParams.get('scanId')!);
    }
    if (searchParams.has('page')) {
      queryParams.set('page', searchParams.get('page')!);
    }
    if (searchParams.has('limit')) {
      queryParams.set('limit', searchParams.get('limit')!);
    }
    if (searchParams.has('status')) {
      queryParams.set('status', searchParams.get('status')!);
    }
    if (searchParams.has('severity')) {
      queryParams.set('severity', searchParams.get('severity')!);
    }
    if (searchParams.has('controlId')) {
      queryParams.set('controlId', searchParams.get('controlId')!);
    }
    if (searchParams.has('search')) {
      queryParams.set('search', searchParams.get('search')!);
    }

    const url = `${serverApiUrl()}/vulnerability-center/systems/${resolvedParams.systemId}/stig-findings${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;

    const response = await fetch(url, {
      headers: {
        Authorization: request.headers.get('Authorization') || '',
      },
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        { error: data.message || 'Failed to fetch STIG findings' },
        { status: response.status }
      );
    }

    return NextResponse.json(data);
  } catch (error) {
    console.error('STIG findings API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}