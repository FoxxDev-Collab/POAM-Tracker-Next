"use client"

import { useState, useEffect } from "react"
import {
  FileCheck, Plus, Calendar, Shield, ChevronRight, Package,
  Search, Filter, LayoutGrid, List, Clock,
  CheckCircle, XCircle, SortAsc, SortDesc, MoreHorizontal,
  Target, AlertCircle
} from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import Link from "next/link"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { cn } from "@/lib/utils"
import { Progress } from "@/components/ui/progress"

type STP = {
  id: number;
  title: string;
  description: string;
  status: 'Draft' | 'In_Progress' | 'Under_Review' | 'Approved' | 'Rejected';
  priority: 'Low' | 'Medium' | 'High' | 'Critical';
  package_id: number;
  package_name: string;
  system_id: number;
  system_name: string;
  created_at: string;
  due_date: string | null;
  test_cases_count: number;
  completed_test_cases: number;
};

type SortField = 'title' | 'status' | 'priority' | 'progress' | 'package' | 'due_date'
type SortOrder = 'asc' | 'desc'
type ViewMode = 'table' | 'card'

export default function NessusSTPs() {
  const [stps, setStps] = useState<STP[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [viewMode, setViewMode] = useState<ViewMode>('table')
  const [sortField, setSortField] = useState<SortField>('title')
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc')
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [filterPackage, setFilterPackage] = useState<string>('all')
  const [selectedStps, setSelectedStps] = useState<number[]>([])

  useEffect(() => {
    const fetchStps = async () => {
      try {
        const response = await fetch('/api/stps/nessus')
        if (response.ok) {
          const data = await response.json()
          const mappedStps = data.items.map((item: {
            id: number;
            title: string;
            description?: string;
            status: string;
            priority: string;
            package_id: number;
            system_id: number;
            created_at: string;
            due_date?: string;
          }) => ({
            id: item.id,
            title: item.title,
            description: item.description || '',
            status: item.status,
            priority: item.priority,
            package_id: item.package_id,
            package_name: 'Package ' + item.package_id,
            system_id: item.system_id,
            system_name: 'System ' + item.system_id,
            created_at: item.created_at,
            due_date: item.due_date,
            test_cases_count: Math.floor(Math.random() * 50) + 10,
            completed_test_cases: Math.floor(Math.random() * 40),
          }))
          setStps(mappedStps)
        }
      } catch (error) {
        console.error('Failed to fetch Nessus STPs:', error)
      } finally {
        setLoading(false)
      }
    }
    fetchStps()
  }, [])

  const filteredStps = stps.filter(stp => {
    const matchesSearch = stp.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      stp.description.toLowerCase().includes(searchTerm.toLowerCase())
    
    const matchesStatus = filterStatus === 'all' || stp.status === filterStatus
    const matchesPackage = filterPackage === 'all' || stp.package_name === filterPackage
    
    return matchesSearch && matchesStatus && matchesPackage
  })

  const sortedStps = [...filteredStps].sort((a, b) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let aValue: any, bValue: any
    
    switch (sortField) {
      case 'title':
        aValue = a.title
        bValue = b.title
        break
      case 'status':
        aValue = a.status
        bValue = b.status
        break
      case 'priority':
        const priorityOrder = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1 }
        aValue = priorityOrder[a.priority as keyof typeof priorityOrder]
        bValue = priorityOrder[b.priority as keyof typeof priorityOrder]
        break
      case 'progress':
        aValue = a.test_cases_count > 0 ? a.completed_test_cases / a.test_cases_count : 0
        bValue = b.test_cases_count > 0 ? b.completed_test_cases / b.test_cases_count : 0
        break
      case 'package':
        aValue = a.package_name
        bValue = b.package_name
        break
      case 'due_date':
        aValue = a.due_date ? new Date(a.due_date).getTime() : 0
        bValue = b.due_date ? new Date(b.due_date).getTime() : 0
        break
    }
    
    if (sortOrder === 'asc') {
      return aValue > bValue ? 1 : -1
    } else {
      return aValue < bValue ? 1 : -1
    }
  })

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortOrder('asc')
    }
  }

  const toggleStpSelection = (stpId: number) => {
    setSelectedStps(prev => 
      prev.includes(stpId) 
        ? prev.filter(id => id !== stpId)
        : [...prev, stpId]
    )
  }

  const selectAllStps = () => {
    if (selectedStps.length === sortedStps.length) {
      setSelectedStps([])
    } else {
      setSelectedStps(sortedStps.map(stp => stp.id))
    }
  }

  const getStatusVariant = (status: string) => {
    switch (status) {
      case 'Draft': return { variant: "secondary" as const, icon: <Clock className="h-3 w-3" /> }
      case 'In_Progress': return { variant: "default" as const, icon: <AlertCircle className="h-3 w-3" /> }
      case 'Under_Review': return { variant: "outline" as const, icon: <Target className="h-3 w-3" /> }
      case 'Approved': return { variant: "default" as const, className: "bg-green-500/10 text-green-700 dark:text-green-400 border-green-500/20", icon: <CheckCircle className="h-3 w-3" /> }
      case 'Rejected': return { variant: "destructive" as const, icon: <XCircle className="h-3 w-3" /> }
      default: return { variant: "secondary" as const, icon: null }
    }
  }

  const getPriorityVariant = (priority: string) => {
    switch (priority) {
      case 'Critical': return "bg-red-500/10 text-red-700 dark:text-red-400 border-red-500/20"
      case 'High': return "bg-orange-500/10 text-orange-700 dark:text-orange-400 border-orange-500/20"
      case 'Medium': return "bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 border-yellow-500/20"
      case 'Low': return "bg-blue-500/10 text-blue-700 dark:text-blue-400 border-blue-500/20"
      default: return ""
    }
  }


  const uniquePackages = Array.from(new Set(stps.map(s => s.package_name)))

  const stats = {
    total: stps.length,
    inProgress: stps.filter(s => s.status === 'In_Progress').length,
    underReview: stps.filter(s => s.status === 'Under_Review').length,
    approved: stps.filter(s => s.status === 'Approved').length,
    critical: stps.filter(s => s.priority === 'Critical').length,
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-muted-foreground">Loading Nessus STPs...</div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div className="space-y-2">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-green-500/10 rounded-lg">
              <FileCheck className="h-8 w-8 text-green-600" />
            </div>
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Nessus Test Plans</h1>
              <p className="text-muted-foreground">
                Manage and track Nessus vulnerability validation test plans
              </p>
            </div>
          </div>
        </div>
        <Link href="/vulnerability-center/stps/nessus-stps/create">
          <Button size="lg">
            <Plus className="h-4 w-4 mr-2" />
            Create Nessus STP
          </Button>
        </Link>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Total STPs</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{stats.total}</div>
            <p className="text-xs text-muted-foreground mt-1">Nessus test plans</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">In Progress</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{stats.inProgress}</div>
            <p className="text-xs text-muted-foreground mt-1">Active test plans</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Under Review</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-600">{stats.underReview}</div>
            <p className="text-xs text-muted-foreground mt-1">Awaiting review</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Approved</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{stats.approved}</div>
            <p className="text-xs text-muted-foreground mt-1">Ready for execution</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Critical Priority</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{stats.critical}</div>
            <p className="text-xs text-muted-foreground mt-1">High priority STPs</p>
          </CardContent>
        </Card>
      </div>

      {/* Filters and Controls */}
      <div className="flex flex-col md:flex-row gap-4 items-start md:items-center justify-between">
        <div className="flex flex-1 gap-2 items-center w-full md:w-auto">
          <div className="relative flex-1 md:max-w-sm">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search STPs..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-9"
            />
          </div>
          
          <Select value={filterStatus} onValueChange={setFilterStatus}>
            <SelectTrigger className="w-[180px]">
              <Filter className="h-4 w-4 mr-2" />
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="Draft">Draft</SelectItem>
              <SelectItem value="In_Progress">In Progress</SelectItem>
              <SelectItem value="Under_Review">Under Review</SelectItem>
              <SelectItem value="Approved">Approved</SelectItem>
              <SelectItem value="Rejected">Rejected</SelectItem>
            </SelectContent>
          </Select>
          
          <Select value={filterPackage} onValueChange={setFilterPackage}>
            <SelectTrigger className="w-[180px]">
              <Package className="h-4 w-4 mr-2" />
              <SelectValue placeholder="Filter by package" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Packages</SelectItem>
              {uniquePackages.map(pkg => (
                <SelectItem key={pkg} value={pkg}>{pkg}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        
        <div className="flex gap-2">
          <Tabs value={viewMode} onValueChange={(v) => setViewMode(v as ViewMode)}>
            <TabsList>
              <TabsTrigger value="table">
                <List className="h-4 w-4" />
              </TabsTrigger>
              <TabsTrigger value="card">
                <LayoutGrid className="h-4 w-4" />
              </TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
      </div>

      {/* Main Content */}
      {sortedStps.length === 0 ? (
        <Card>
          <CardContent className="text-center py-12">
            <div className="space-y-4">
              <div className="mx-auto w-12 h-12 bg-green-500/10 rounded-lg flex items-center justify-center">
                <FileCheck className="h-6 w-6 text-green-600" />
              </div>
              <div>
                <h3 className="text-lg font-medium">No Nessus Test Plans Found</h3>
                <p className="text-muted-foreground">
                  {searchTerm || filterStatus !== 'all' || filterPackage !== 'all' 
                    ? "No STPs match your filters" 
                    : "Get started by creating your first Nessus STP to validate CVE vulnerabilities."}
                </p>
              </div>
              {!(searchTerm || filterStatus !== 'all' || filterPackage !== 'all') && (
                <Link href="/vulnerability-center/stps/nessus-stps/create">
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    Create Your First Nessus STP
                  </Button>
                </Link>
              )}
            </div>
          </CardContent>
        </Card>
      ) : viewMode === 'table' ? (
        <Card>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-[40px]">
                  <input
                    type="checkbox"
                    checked={selectedStps.length === sortedStps.length}
                    onChange={selectAllStps}
                    className="rounded border-input"
                  />
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('title')}
                >
                  <div className="flex items-center gap-1">
                    Title
                    {sortField === 'title' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('package')}
                >
                  <div className="flex items-center gap-1">
                    ATO Package
                    {sortField === 'package' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead>System</TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('status')}
                >
                  <div className="flex items-center gap-1">
                    Status
                    {sortField === 'status' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('priority')}
                >
                  <div className="flex items-center gap-1">
                    Priority
                    {sortField === 'priority' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('progress')}
                >
                  <div className="flex items-center gap-1">
                    Progress
                    {sortField === 'progress' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover:text-foreground"
                  onClick={() => handleSort('due_date')}
                >
                  <div className="flex items-center gap-1">
                    Due Date
                    {sortField === 'due_date' && (
                      sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {sortedStps.map((stp) => {
                const completionPercentage = stp.test_cases_count > 0 
                  ? Math.round((stp.completed_test_cases / stp.test_cases_count) * 100)
                  : 0
                const statusConfig = getStatusVariant(stp.status)
                const daysUntilDue = stp.due_date 
                  ? Math.floor((new Date(stp.due_date).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))
                  : null
                  
                return (
                  <TableRow key={stp.id} className="hover:bg-muted/50">
                    <TableCell>
                      <input
                        type="checkbox"
                        checked={selectedStps.includes(stp.id)}
                        onChange={() => toggleStpSelection(stp.id)}
                        className="rounded border-input"
                      />
                    </TableCell>
                    <TableCell>
                      <div className="space-y-1">
                        <div className="font-medium">{stp.title}</div>
                        <div className="text-sm text-muted-foreground line-clamp-1">
                          {stp.description}
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Package className="h-4 w-4 text-muted-foreground" />
                        <span className="text-sm">{stp.package_name}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Shield className="h-4 w-4 text-muted-foreground" />
                        <span className="text-sm">{stp.system_name}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge 
                        variant={statusConfig.variant}
                        className={statusConfig.className}
                      >
                        <span className="flex items-center gap-1">
                          {statusConfig.icon}
                          {stp.status.replace('_', ' ')}
                        </span>
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline" className={cn("text-xs", getPriorityVariant(stp.priority))}>
                        {stp.priority}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="space-y-1 min-w-[120px]">
                        <div className="flex items-center justify-between text-xs">
                          <span className="text-muted-foreground">
                            {stp.completed_test_cases}/{stp.test_cases_count}
                          </span>
                          <span className="font-medium">{completionPercentage}%</span>
                        </div>
                        <Progress 
                          value={completionPercentage} 
                          className="h-2"
                        />
                      </div>
                    </TableCell>
                    <TableCell>
                      {stp.due_date ? (
                        <div className="flex flex-col gap-1">
                          <span className="text-sm">
                            {new Date(stp.due_date).toLocaleDateString()}
                          </span>
                          {daysUntilDue !== null && (
                            <Badge 
                              variant={daysUntilDue < 0 ? "destructive" : daysUntilDue < 7 ? "secondary" : "outline"}
                              className="text-xs w-fit"
                            >
                              {daysUntilDue < 0 ? 'Overdue' : `${daysUntilDue} days`}
                            </Badge>
                          )}
                        </div>
                      ) : (
                        <span className="text-muted-foreground text-sm">No due date</span>
                      )}
                    </TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem asChild>
                            <Link href={`/vulnerability-center/stps/nessus-stps/${stp.id}`}>
                              View Details
                            </Link>
                          </DropdownMenuItem>
                          <DropdownMenuItem asChild>
                            <Link href={`/vulnerability-center/stps/nessus-stps/${stp.id}/edit`}>
                              Edit STP
                            </Link>
                          </DropdownMenuItem>
                          <DropdownMenuItem asChild>
                            <Link href={`/vulnerability-center/stps/nessus-stps/${stp.id}/test-cases`}>
                              Manage Test Cases
                            </Link>
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem className="text-destructive">
                            Delete STP
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                )
              })}
            </TableBody>
          </Table>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedStps.map((stp) => {
            const completionPercentage = stp.test_cases_count > 0 
              ? Math.round((stp.completed_test_cases / stp.test_cases_count) * 100)
              : 0
            const statusConfig = getStatusVariant(stp.status)
            const daysUntilDue = stp.due_date 
              ? Math.floor((new Date(stp.due_date).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))
              : null
            
            return (
              <Card key={stp.id} className="hover:shadow-lg transition-all hover:border-primary/50 group">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between gap-4">
                    <div className="space-y-2 flex-1">
                      <CardTitle className="text-lg group-hover:text-primary transition-colors line-clamp-2">
                        {stp.title}
                      </CardTitle>
                      <CardDescription className="text-sm line-clamp-2">
                        {stp.description}
                      </CardDescription>
                    </div>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon" className="h-8 w-8">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem asChild>
                          <Link href={`/vulnerability-center/stps/nessus-stps/${stp.id}/edit`}>
                            Edit STP
                          </Link>
                        </DropdownMenuItem>
                        <DropdownMenuItem asChild>
                          <Link href={`/vulnerability-center/stps/nessus-stps/${stp.id}/test-cases`}>
                            Manage Test Cases
                          </Link>
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem className="text-destructive">
                          Delete STP
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                  <div className="flex items-center gap-2 mt-3">
                    <Badge 
                      variant={statusConfig.variant}
                      className={statusConfig.className}
                    >
                      <span className="flex items-center gap-1">
                        {statusConfig.icon}
                        {stp.status.replace('_', ' ')}
                      </span>
                    </Badge>
                    <Badge variant="outline" className={cn("text-xs", getPriorityVariant(stp.priority))}>
                      {stp.priority}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {/* Progress */}
                    <div className="space-y-2">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-muted-foreground">Test Progress</span>
                        <span className="font-medium">
                          {stp.completed_test_cases}/{stp.test_cases_count} ({completionPercentage}%)
                        </span>
                      </div>
                      <Progress 
                        value={completionPercentage} 
                        className="h-2"
                      />
                    </div>

                    {/* Details */}
                    <div className="grid grid-cols-2 gap-3 text-sm">
                      <div className="flex items-center gap-2 text-muted-foreground">
                        <Package className="h-4 w-4" />
                        <span className="truncate">{stp.package_name}</span>
                      </div>
                      <div className="flex items-center gap-2 text-muted-foreground">
                        <Shield className="h-4 w-4" />
                        <span className="truncate">{stp.system_name}</span>
                      </div>
                    </div>

                    {/* Due Date */}
                    {stp.due_date && (
                      <div className="flex items-center justify-between pt-3 border-t">
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <Calendar className="h-4 w-4" />
                          <span>Due Date</span>
                        </div>
                        <div className="text-right">
                          <div className="text-sm font-medium">
                            {new Date(stp.due_date).toLocaleDateString()}
                          </div>
                          {daysUntilDue !== null && (
                            <Badge 
                              variant={daysUntilDue < 0 ? "destructive" : daysUntilDue < 7 ? "secondary" : "outline"}
                              className="text-xs mt-1"
                            >
                              {daysUntilDue < 0 ? 'Overdue' : `${daysUntilDue} days remaining`}
                            </Badge>
                          )}
                        </div>
                      </div>
                    )}

                    {/* Actions */}
                    <div className="pt-3 border-t">
                      <Link href={`/vulnerability-center/stps/nessus-stps/${stp.id}`}>
                        <Button className="w-full" variant="outline">
                          <ChevronRight className="h-4 w-4 mr-2" />
                          View Details
                        </Button>
                      </Link>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>
      )}

      {/* Bulk Actions Bar */}
      {selectedStps.length > 0 && (
        <div className="fixed bottom-4 left-1/2 -translate-x-1/2 bg-background border rounded-lg shadow-lg p-4 flex items-center gap-4 z-50">
          <span className="text-sm text-muted-foreground">
            {selectedStps.length} STP{selectedStps.length > 1 ? 's' : ''} selected
          </span>
          <div className="flex gap-2">
            <Button variant="outline" size="sm">
              Export Selected
            </Button>
            <Button variant="outline" size="sm">
              Bulk Update Status
            </Button>
            <Button variant="outline" size="sm">
              Assign to POAM
            </Button>
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => setSelectedStps([])}
            >
              Clear Selection
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}