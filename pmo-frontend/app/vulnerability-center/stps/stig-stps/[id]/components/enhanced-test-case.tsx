"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Card } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { 
  CheckCircle2, 
  XCircle, 
  Clock, 
  Play, 
  Pause, 
  Upload, 
  FileText, 
  MessageSquare,
  Paperclip,
  Download,
  Eye,
  Trash2,
} from "lucide-react"
import { cn } from "@/lib/utils"
import { toast } from "sonner"

type TestCaseStatus = 'Not_Started' | 'In_Progress' | 'Passed' | 'Failed' | 'Blocked'

type TestCase = {
  id: number
  stp_id: number
  title: string
  description: string
  test_procedure: string
  expected_result: string
  actual_result: string
  status: TestCaseStatus
  assigned_user_id: number | null
  created_at: string
  updated_at: string
}

type Evidence = {
  id: number
  filename: string
  originalFilename: string
  fileSize: number
  mimeType: string
  description: string
  uploadedAt: string
  uploader: {
    id: number
    name: string
    email: string
  }
}

type Comment = {
  id: number
  content: string
  createdAt: string
  createdBy: {
    id: number
    name: string
    email: string
  }
}

interface EnhancedTestCaseProps {
  testCase: TestCase
  onStatusUpdate: (testCaseId: number, status: TestCaseStatus, actualResult?: string) => void
  isActive: boolean
  onSetActive: (testCase: TestCase | null) => void
}

export function EnhancedTestCase({ testCase, onStatusUpdate, isActive, onSetActive }: EnhancedTestCaseProps) {
  const [actualResult, setActualResult] = useState(testCase.actual_result || '')
  const [evidence, setEvidence] = useState<Evidence[]>([])
  const [comments, setComments] = useState<Comment[]>([])
  const [newComment, setNewComment] = useState('')
  const [uploading, setUploading] = useState(false)
  const [selectedFiles, setSelectedFiles] = useState<File[]>([])
  const [dragOver, setDragOver] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const getTestStatusIcon = (status: TestCaseStatus) => {
    switch (status) {
      case 'Not_Started': return <Clock className="h-4 w-4 text-muted-foreground" />
      case 'In_Progress': return <Play className="h-4 w-4 text-blue-600" />
      case 'Passed': return <CheckCircle2 className="h-4 w-4 text-green-600" />
      case 'Failed': return <XCircle className="h-4 w-4 text-red-600" />
      case 'Blocked': return <Pause className="h-4 w-4 text-yellow-600" />
    }
  }

  const getTestStatusColor = (status: TestCaseStatus) => {
    switch (status) {
      case 'Not_Started': return 'bg-muted text-muted-foreground'
      case 'In_Progress': return 'bg-blue-500 text-white'
      case 'Passed': return 'bg-green-500 text-white'
      case 'Failed': return 'bg-red-500 text-white'
      case 'Blocked': return 'bg-yellow-500 text-white'
    }
  }

  const handleFileSelect = (files: FileList | null) => {
    if (!files) return

    const validFiles = Array.from(files).filter(file => {
      // Validate file size (max 50MB)
      if (file.size > 50 * 1024 * 1024) {
        toast.error(`File "${file.name}" is too large. Maximum size is 50MB.`)
        return false
      }
      return true
    })

    setSelectedFiles(prev => [...prev, ...validFiles])
  }

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    setDragOver(false)
    handleFileSelect(e.dataTransfer.files)
  }

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    setDragOver(true)
  }

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    setDragOver(false)
  }

  const uploadEvidence = async () => {
    if (selectedFiles.length === 0) return

    setUploading(true)
    try {
      for (const file of selectedFiles) {
        const formData = new FormData()
        formData.append('file', file)
        formData.append('testCaseId', testCase.id.toString())
        formData.append('description', `Evidence for test case: ${testCase.title}`)

        const response = await fetch(`/api/stps/test-cases/${testCase.id}/evidence`, {
          method: 'POST',
          body: formData
        })

        if (!response.ok) {
          throw new Error(`Failed to upload ${file.name}`)
        }

        const uploadedEvidence = await response.json()
        setEvidence(prev => [...prev, uploadedEvidence.item])
      }

      setSelectedFiles([])
      toast.success(`Successfully uploaded ${selectedFiles.length} file(s)`)
    } catch (error) {
      console.error('Upload error:', error)
      toast.error('Failed to upload files')
    } finally {
      setUploading(false)
    }
  }

  const addComment = async () => {
    if (!newComment.trim()) return

    try {
      const response = await fetch(`/api/stps/test-cases/${testCase.id}/comments`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content: newComment })
      })

      if (!response.ok) throw new Error('Failed to add comment')

      const comment = await response.json()
      setComments(prev => [...prev, comment.item])
      setNewComment('')
      toast.success('Comment added')
    } catch (error) {
      console.error('Comment error:', error)
      toast.error('Failed to add comment')
    }
  }

  const handleStatusUpdate = (status: TestCaseStatus) => {
    if (status === 'Passed' && evidence.length === 0) {
      toast.error('Please upload evidence before marking test as passed')
      return
    }
    
    if (status !== 'Not_Started' && !actualResult.trim()) {
      toast.error('Please provide actual results before updating status')
      return
    }

    onStatusUpdate(testCase.id, status, actualResult)
    onSetActive(null)
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  return (
    <Card className="p-4">
      <div className="space-y-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1 flex-1">
            <div className="flex items-center gap-2">
              {getTestStatusIcon(testCase.status)}
              <h4 className="font-medium">{testCase.title}</h4>
            </div>
            <p className="text-sm text-muted-foreground">{testCase.description}</p>
          </div>
          <div className="flex items-center gap-2">
            {evidence.length > 0 && (
              <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                <Paperclip className="h-3 w-3 mr-1" />
                {evidence.length} file{evidence.length !== 1 ? 's' : ''}
              </Badge>
            )}
            {comments.length > 0 && (
              <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                <MessageSquare className="h-3 w-3 mr-1" />
                {comments.length}
              </Badge>
            )}
            <Badge className={getTestStatusColor(testCase.status)}>
              {testCase.status.replace('_', ' ')}
            </Badge>
          </div>
        </div>

        {isActive ? (
          <div className="space-y-4 p-4 bg-muted/50 rounded-lg">
            {/* Test Procedure */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Test Procedure</label>
              <div className="text-sm bg-background p-3 rounded border">
                {testCase.test_procedure || 'No procedure defined'}
              </div>
            </div>
            
            {/* Expected Result */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Expected Result</label>
              <div className="text-sm bg-background p-3 rounded border">
                {testCase.expected_result || 'No expected result defined'}
              </div>
            </div>

            {/* Actual Result */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Actual Result</label>
              <Textarea
                placeholder="Enter the actual test result..."
                value={actualResult}
                onChange={(e) => setActualResult(e.target.value)}
                rows={4}
              />
            </div>

            {/* Evidence Upload */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Evidence</label>
              
              {/* Upload Area */}
              <div
                className={cn(
                  "border-2 border-dashed rounded-lg p-6 transition-colors",
                  dragOver ? "border-primary bg-primary/5" : "border-muted-foreground/25"
                )}
                onDrop={handleDrop}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
              >
                <div className="flex flex-col items-center gap-2 text-center">
                  <Upload className="h-8 w-8 text-muted-foreground" />
                  <div>
                    <p className="text-sm font-medium">Drop files here or click to upload</p>
                    <p className="text-xs text-muted-foreground">Max file size: 50MB</p>
                  </div>
                  <input
                    ref={fileInputRef}
                    type="file"
                    multiple
                    className="hidden"
                    onChange={(e) => handleFileSelect(e.target.files)}
                  />
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => fileInputRef.current?.click()}
                  >
                    Choose Files
                  </Button>
                </div>
              </div>

              {/* Selected Files */}
              {selectedFiles.length > 0 && (
                <div className="space-y-2">
                  <p className="text-sm font-medium">Selected Files ({selectedFiles.length})</p>
                  <div className="space-y-1">
                    {selectedFiles.map((file, index) => (
                      <div key={index} className="flex items-center justify-between p-2 bg-background rounded border">
                        <div className="flex items-center gap-2">
                          <FileText className="h-4 w-4" />
                          <span className="text-sm">{file.name}</span>
                          <span className="text-xs text-muted-foreground">({formatFileSize(file.size)})</span>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => setSelectedFiles(prev => prev.filter((_, i) => i !== index))}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                  <Button onClick={uploadEvidence} disabled={uploading} size="sm">
                    {uploading ? 'Uploading...' : 'Upload Files'}
                  </Button>
                </div>
              )}

              {/* Existing Evidence */}
              {evidence.length > 0 && (
                <div className="space-y-2">
                  <p className="text-sm font-medium">Uploaded Evidence ({evidence.length})</p>
                  <div className="space-y-1">
                    {evidence.map((item) => (
                      <div key={item.id} className="flex items-center justify-between p-2 bg-background rounded border">
                        <div className="flex items-center gap-2">
                          <FileText className="h-4 w-4" />
                          <div>
                            <p className="text-sm">{item.originalFilename}</p>
                            <p className="text-xs text-muted-foreground">
                              {formatFileSize(item.fileSize)} • {new Date(item.uploadedAt).toLocaleDateString()}
                            </p>
                          </div>
                        </div>
                        <div className="flex gap-1">
                          <Button variant="ghost" size="sm">
                            <Eye className="h-4 w-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Download className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Comments */}
            <div className="space-y-2">
              <label className="text-sm font-medium">Comments & Notes</label>
              
              {/* Add Comment */}
              <div className="flex gap-2">
                <Textarea
                  placeholder="Add a comment or note..."
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  rows={2}
                  className="flex-1"
                />
                <Button onClick={addComment} disabled={!newComment.trim()} size="sm">
                  <MessageSquare className="h-4 w-4" />
                </Button>
              </div>

              {/* Existing Comments */}
              {comments.length > 0 && (
                <ScrollArea className="h-32">
                  <div className="space-y-2">
                    {comments.map((comment) => (
                      <div key={comment.id} className="p-2 bg-background rounded border text-sm">
                        <p>{comment.content}</p>
                        <div className="flex items-center gap-2 mt-1 text-xs text-muted-foreground">
                          <span>{comment.createdBy.name}</span>
                          <span>•</span>
                          <span>{new Date(comment.createdAt).toLocaleDateString()}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              )}
            </div>

            {/* Action Buttons */}
            <Separator />
            <div className="flex gap-2">
              <Button 
                size="sm" 
                className="bg-green-600 hover:bg-green-700"
                onClick={() => handleStatusUpdate('Passed')}
              >
                <CheckCircle2 className="h-4 w-4 mr-1" />
                Pass Test
              </Button>
              <Button 
                size="sm" 
                variant="destructive"
                onClick={() => handleStatusUpdate('Failed')}
              >
                <XCircle className="h-4 w-4 mr-1" />
                Fail Test
              </Button>
              <Button 
                size="sm" 
                variant="secondary"
                onClick={() => handleStatusUpdate('Blocked')}
              >
                <Pause className="h-4 w-4 mr-1" />
                Block Test
              </Button>
              <Button 
                size="sm" 
                variant="outline"
                onClick={() => {
                  onSetActive(null)
                  setActualResult(testCase.actual_result || '')
                }}
              >
                Cancel
              </Button>
            </div>
          </div>
        ) : (
          <div className="flex items-center justify-between">
            <div className="text-sm text-muted-foreground">
              Created: {new Date(testCase.created_at).toLocaleDateString()}
              {evidence.length > 0 && (
                <span className="ml-2 text-green-600">• {evidence.length} evidence file{evidence.length !== 1 ? 's' : ''}</span>
              )}
            </div>
            <Button
              size="sm"
              variant="outline"
              onClick={() => {
                onSetActive(testCase)
                setActualResult(testCase.actual_result || '')
                if (testCase.status === 'Not_Started') {
                  onStatusUpdate(testCase.id, 'In_Progress')
                }
              }}
            >
              <Play className="h-4 w-4 mr-2" />
              {testCase.status === 'Not_Started' ? 'Start Test' : 'Continue Test'}
            </Button>
          </div>
        )}
      </div>
    </Card>
  )
}