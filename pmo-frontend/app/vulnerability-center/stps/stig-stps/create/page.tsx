"use client"

import { useState, useEffect } from "react"
import { useAuth } from "@/hooks/use-auth"
import { ArrowLeft, ArrowRight, Package, Users, Shield, FileCheck, CheckCircle2, AlertTriangle, AlertCircle, Info, Filter, SortAsc } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Progress } from "@/components/ui/progress"
import Link from "next/link"
import { useRouter } from "next/navigation"

type Package = {
  id: number;
  name: string;
  description: string;
}

type Group = {
  id: number;
  name: string;
  description: string;
  systems_count: number;
}

type System = {
  id: number;
  name: string;
  description: string;
  last_scan_date: string | null;
}

type Finding = {
  id: number;
  groupId?: string;
  vulnId?: string; // STIG Vulnerability ID (V-213192)
  ruleId?: string;
  ruleTitle?: string;
  severity: string;
  status: string;
  system?: {
    id: number;
    name: string;
  };
  systemId?: number;
  findingDetails?: string;
  checkContent?: string;
  fixText?: string;
}

type Vulnerability = {
  vuln_id: string;  // STIG Vulnerability ID (V-213192)
  rule_id: string;  // Rule ID (SV-xxxxx)
  rule_title: string;
  severity: string;
  status: string; // 'Open' | 'Not_Reviewed' | 'Not_A_Finding' | 'Not_Applicable'
  affected_systems: string[];
  system_ids: number[];
  finding_details: string;
  check_content: string;
  fix_text: string;
  stig_finding_id: number; // Reference to original StigFinding for updates
}

const WIZARD_STEPS = [
  { id: 1, title: "Select Package", description: "Choose ATO Package" },
  { id: 2, title: "Select Group", description: "Choose Group within Package" },
  { id: 3, title: "Select Systems", description: "Choose systems to test" },
  { id: 4, title: "Select Vulnerabilities", description: "Review open findings" },
  { id: 5, title: "Configure STP", description: "Set up test plan details" },
  { id: 6, title: "Review & Create", description: "Review and create STP" },
]

export default function CreateSTPPage() {
  const router = useRouter()
  const { user } = useAuth()
  const [currentStep, setCurrentStep] = useState(1)
  const [loading, setLoading] = useState(false)
  
  // Form data
  const [selectedPackage, setSelectedPackage] = useState<Package | null>(null)
  const [selectedGroup, setSelectedGroup] = useState<Group | null>(null)
  const [selectedSystems, setSelectedSystems] = useState<System[]>([])
  const [selectedVulnerabilities, setSelectedVulnerabilities] = useState<Vulnerability[]>([])
  const [stpConfig, setStpConfig] = useState({
    title: '',
    description: '',
    priority: 'Medium' as 'Low' | 'Medium' | 'High' | 'Critical',
    due_date: ''
  })
  const [sortBy, setSortBy] = useState<'severity' | 'vuln_id' | 'rule_title'>('severity')
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc') // Changed to 'asc' to show CAT I first

  // Data
  const [packages, setPackages] = useState<Package[]>([])
  const [groups, setGroups] = useState<Group[]>([])
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [systems, setSystems] = useState<System[]>([])

  // Load packages on mount
  useEffect(() => {
    const fetchPackages = async () => {
      try {
        const response = await fetch('/api/packages')
        if (response.ok) {
          const data = await response.json()
          setPackages(data.items)
        }
      } catch (error) {
        console.error('Failed to fetch packages:', error)
      }
    }
    fetchPackages()
  }, [])

  // Load groups when package is selected
  useEffect(() => {
    if (selectedPackage) {
      const fetchGroups = async () => {
        setLoading(true)
        try {
          const response = await fetch(`/api/packages/${selectedPackage.id}/groups`)
          if (response.ok) {
            const data = await response.json()
            setGroups(data.items)
          }
        } catch (error) {
          console.error('Failed to fetch groups:', error)
        } finally {
          setLoading(false)
        }
      }
      fetchGroups()
    }
  }, [selectedPackage])

  // Load systems when group is selected
  useEffect(() => {
    if (selectedGroup) {
      const fetchSystems = async () => {
        setLoading(true)
        try {
          const systemsResponse = await fetch(`/api/systems?groupId=${selectedGroup.id}`)
          if (systemsResponse.ok) {
            const systemsData = await systemsResponse.json()
            setSystems(systemsData.items)
          }
        } catch (error) {
          console.error('Failed to fetch systems:', error)
        } finally {
          setLoading(false)
        }
      }
      fetchSystems()
    }
  }, [selectedGroup])

  // Load vulnerabilities when systems are selected
  useEffect(() => {
    if (selectedSystems.length > 0 && selectedGroup) {
      const fetchVulnerabilities = async () => {
        setLoading(true)
        try {
          // Get vulnerabilities for the group (more efficient than per-system)
          const vulnResponse = await fetch(`/api/vulnerabilities/systems?group_id=${selectedGroup.id}&status=Open`)
          if (vulnResponse.ok) {
            const vulnData = await vulnResponse.json()
            
            // The API returns array directly, not wrapped in { vulnerabilities: [] }
            const allFindings = Array.isArray(vulnData) ? vulnData : []
            
            // Filter for systems we've selected and map to expected format
            const selectedSystemIds = selectedSystems.map(s => s.id)
            const relevantFindings = allFindings.filter((finding: Finding) => 
              finding.system?.id !== undefined && selectedSystemIds.includes(finding.system.id)
            )
            
            
            // Convert to expected Vulnerability format and filter for testable findings
            const vulnerabilities: Vulnerability[] = relevantFindings
              .filter((finding: Finding) =>
                finding.status === 'Open' || finding.status === 'Not_Reviewed'
              )
              .map((finding: Finding) => ({
                vuln_id: finding.vulnId || finding.groupId || `V-${finding.id}`, // Use proper STIG format
                rule_id: finding.ruleId || `SV-${finding.id}`,
                rule_title: finding.ruleTitle || finding.findingDetails || 'Unknown Rule',
                severity: finding.severity,
                status: finding.status,
                affected_systems: finding.system?.name ? [finding.system.name] : [],
                system_ids: finding.system?.id ? [finding.system.id] : [],
                finding_details: finding.findingDetails || '',
                check_content: finding.checkContent || '',
                fix_text: finding.fixText || '',
                stig_finding_id: finding.id // Keep reference to original finding for updates
              }))
            
            // Auto-select CAT I open findings (includes both CAT I and legacy 'high' format)
            const catIOpenVulns = vulnerabilities.filter((v: Vulnerability) => {
              const sev = v.severity.toLowerCase().replace(/_/g, ' ')
              return (sev === 'high' || sev === 'cat i') &&
                     (v.status === 'Open' || v.status === 'Not_Reviewed')
            })
            
            
            setVulnerabilities(vulnerabilities)
            setSelectedVulnerabilities(catIOpenVulns)
          }
        } catch (error) {
          console.error('Failed to fetch vulnerabilities:', error)
        } finally {
          setLoading(false)
        }
      }
      fetchVulnerabilities()
    }
  }, [selectedSystems, selectedGroup])

  const handleNext = () => {
    if (currentStep < WIZARD_STEPS.length) {
      setCurrentStep(currentStep + 1)
    }
  }

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleCreateSTP = async () => {
    if (!selectedPackage || !selectedGroup || selectedSystems.length === 0 || selectedVulnerabilities.length === 0) {
      return
    }

    setLoading(true)
    try {
      // Prepare vulnerabilities data
      const vulnerabilities = selectedVulnerabilities.map(vuln => ({
        systemId: vuln.system_ids[0], // Using first system ID from the vulnerability
        vulnId: vuln.vuln_id,
        ruleId: vuln.rule_id
      }));

      // Create the STP
      const stpResponse = await fetch('/api/stps', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: stpConfig.title,
          description: stpConfig.description,
          package_id: selectedPackage.id,
          system_id: selectedSystems[0]?.id || 1, // Use first selected system as primary
          priority: stpConfig.priority,
          due_date: stpConfig.due_date || null,
          createdBy: user?.id || 1,
          vulnerabilities
        })
      })

      if (stpResponse.ok) {
        const stpData = await stpResponse.json()
        
        // Create test cases for selected vulnerabilities
        for (const vuln of selectedVulnerabilities) {
          const testCaseResponse = await fetch(`/api/stps/${stpData.item.id}/test-cases`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              title: `Test ${vuln.vuln_id}: ${vuln.rule_title}`,
              description: `Validate vulnerability findings for ${vuln.vuln_id} (${vuln.rule_id}) across selected systems: ${selectedSystems.map(s => s.name).join(', ')}`,
              testProcedure: vuln.check_content || `1. Review the vulnerability finding for ${vuln.vuln_id}\n2. Verify the current configuration on affected systems: ${selectedSystems.map(s => s.name).join(', ')}\n3. Assess compliance with security requirement: ${vuln.rule_title}\n4. Document current state and any deviations\n5. Record findings and evidence`,
              expectedResult: vuln.fix_text || `System should be compliant with security requirement ${vuln.vuln_id}. The vulnerability should be remediated according to STIG guidelines for: ${vuln.rule_title}`,
            })
          })
          
          if (!testCaseResponse.ok) {
            const error = await testCaseResponse.json()
            console.error('Failed to create test case for', vuln.vuln_id, ':', error)
          }
        }

        router.push(`/vulnerability-center/stps/stig-stps/${stpData.item.id}`)
      }
    } catch (error) {
      console.error('Failed to create STP:', error)
    } finally {
      setLoading(false)
    }
  }

  const canProceed = () => {
    switch (currentStep) {
      case 1: return selectedPackage !== null
      case 2: return selectedGroup !== null
      case 3: return selectedSystems.length > 0
      case 4: return selectedVulnerabilities.length > 0
      case 5: return stpConfig.title.trim().length > 0
      case 6: return true
      default: return false
    }
  }


  const mapSeverityToStigFormat = (severity: string) => {
    const sev = severity.toLowerCase().replace(/_/g, ' ')
    if (sev === 'cat i' || sev === 'high') return 'CAT I'
    if (sev === 'cat ii' || sev === 'medium') return 'CAT II'
    if (sev === 'cat iii' || sev === 'low') return 'CAT III'
    return severity.replace(/_/g, ' ') // fallback to original with underscores replaced
  }

  const getSeverityBadgeStyle = (severity: string) => {
    const sev = severity.toLowerCase().replace(/_/g, ' ')
    if (sev === 'cat i' || sev === 'high') {
      return 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 border-red-300 dark:border-red-700'
    }
    if (sev === 'cat ii' || sev === 'medium') {
      return 'bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-200 border-orange-300 dark:border-orange-700'
    }
    if (sev === 'cat iii' || sev === 'low') {
      return 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200 border-yellow-300 dark:border-yellow-700'
    }
    return 'bg-gray-100 dark:bg-gray-900/30 text-gray-800 dark:text-gray-200 border-gray-300 dark:border-gray-700'
  }

  const getSeverityOrder = (severity: string) => {
    const sev = severity.toLowerCase().replace(/_/g, ' ')
    if (sev === 'cat i' || sev === 'high') return 3
    if (sev === 'cat ii' || sev === 'medium') return 2
    if (sev === 'cat iii' || sev === 'low') return 1
    return 0
  }

  const sortVulnerabilities = (vulns: typeof vulnerabilities) => {
    if (!vulns) return []

    return [...vulns].sort((a, b) => {
      let comparison = 0

      switch (sortBy) {
        case 'severity':
          // Always sort by severity order (CAT I = 3, CAT II = 2, CAT III = 1)
          comparison = getSeverityOrder(b.severity) - getSeverityOrder(a.severity)
          // When sorting by severity, 'asc' means CAT I first (highest severity)
          // 'desc' means CAT III first (lowest severity)
          return sortOrder === 'asc' ? comparison : -comparison
        case 'vuln_id':
          comparison = a.vuln_id.localeCompare(b.vuln_id)
          return sortOrder === 'asc' ? comparison : -comparison
        case 'rule_title':
          comparison = a.rule_title.localeCompare(b.rule_title)
          return sortOrder === 'asc' ? comparison : -comparison
        default:
          return 0
      }
    })
  }

  const selectAllVulnerabilities = (category?: 'cat1' | 'cat2' | 'cat3') => {
    if (!vulnerabilities) return

    let vulnsToSelect = vulnerabilities

    if (category) {
      vulnsToSelect = vulnerabilities.filter(v => {
        const sev = v.severity.toLowerCase().replace(/_/g, ' ')
        switch (category) {
          case 'cat1': return sev === 'cat i' || sev === 'high'
          case 'cat2': return sev === 'cat ii' || sev === 'medium'
          case 'cat3': return sev === 'cat iii' || sev === 'low'
          default: return false
        }
      })
    }

    // Add all vulnerabilities that aren't already selected
    const newSelections = vulnsToSelect.filter(v =>
      !selectedVulnerabilities.some(sv => sv.vuln_id === v.vuln_id)
    )

    setSelectedVulnerabilities(prev => [...prev, ...newSelections])
  }

  const deselectAllVulnerabilities = (category?: 'cat1' | 'cat2' | 'cat3') => {
    if (category) {
      setSelectedVulnerabilities(prev => prev.filter(v => {
        const sev = v.severity.toLowerCase().replace(/_/g, ' ')
        switch (category) {
          case 'cat1': return !(sev === 'cat i' || sev === 'high')
          case 'cat2': return !(sev === 'cat ii' || sev === 'medium')
          case 'cat3': return !(sev === 'cat iii' || sev === 'low')
          default: return true
        }
      }))
    } else {
      setSelectedVulnerabilities([])
    }
  }

  const renderStepContent = () => {
    switch (currentStep) {
      case 1: // Select Package
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Select ATO Package</h3>
              <p className="text-muted-foreground mb-4">
                Choose the ATO package that contains the systems you want to test.
              </p>
            </div>
            
            {packages && packages.length > 0 ? (
              <div className="grid grid-cols-1 gap-4">
                {packages.map((pkg) => (
                  <Card 
                    key={pkg.id} 
                    className={`cursor-pointer transition-all ${
                      selectedPackage?.id === pkg.id 
                        ? 'ring-2 ring-primary border-primary' 
                        : 'hover:shadow-md'
                    }`}
                    onClick={() => setSelectedPackage(pkg)}
                  >
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Package className="h-5 w-5 text-primary" />
                          <CardTitle className="text-base">{pkg.name}</CardTitle>
                        </div>
                        {selectedPackage?.id === pkg.id && (
                          <CheckCircle2 className="h-5 w-5 text-primary" />
                        )}
                      </div>
                      <CardDescription>{pkg.description}</CardDescription>
                    </CardHeader>
                  </Card>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <div className="text-muted-foreground">No packages available.</div>
              </div>
            )}
          </div>
        )

      case 2: // Select Group
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Select Group</h3>
              <p className="text-muted-foreground mb-4">
                Choose the group within <strong>{selectedPackage?.name}</strong> that contains the systems to test.
              </p>
            </div>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Loading groups...</div>
              </div>
            ) : groups && groups.length > 0 ? (
              <div className="grid grid-cols-1 gap-4">
                {groups.map((group) => (
                  <Card 
                    key={group.id} 
                    className={`cursor-pointer transition-all ${
                      selectedGroup?.id === group.id 
                        ? 'ring-2 ring-primary border-primary' 
                        : 'hover:shadow-md'
                    }`}
                    onClick={() => setSelectedGroup(group)}
                  >
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Users className="h-5 w-5 text-primary" />
                          <div>
                            <CardTitle className="text-base">{group.name}</CardTitle>
                            <CardDescription>{group.description}</CardDescription>
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <Badge variant="outline">
                            {group.systems_count} systems
                          </Badge>
                          {selectedGroup?.id === group.id && (
                            <CheckCircle2 className="h-5 w-5 text-primary" />
                          )}
                        </div>
                      </div>
                    </CardHeader>
                  </Card>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <div className="text-muted-foreground">No groups found in this package.</div>
              </div>
            )}
          </div>
        )

      case 3: // Select Systems
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Select Systems to Test</h3>
              <p className="text-muted-foreground mb-4">
                Choose one or more systems from <strong>{selectedGroup?.name}</strong> to include in this test plan.
              </p>
              <Badge className="bg-blue-500">
                {selectedSystems.length} system{selectedSystems.length !== 1 ? 's' : ''} selected
              </Badge>
            </div>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Loading systems...</div>
              </div>
            ) : systems && systems.length > 0 ? (
              <div className="grid grid-cols-1 gap-4">
                {systems.map((system) => {
                  const isSelected = selectedSystems.some(s => s.id === system.id)
                  
                  return (
                    <Card 
                      key={system.id} 
                      className={`cursor-pointer transition-all ${
                        isSelected 
                          ? 'ring-2 ring-primary border-primary' 
                          : 'hover:shadow-md'
                      }`}
                      onClick={() => {
                        if (isSelected) {
                          setSelectedSystems(prev => prev.filter(s => s.id !== system.id))
                        } else {
                          setSelectedSystems(prev => [...prev, system])
                        }
                      }}
                    >
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <Shield className="h-5 w-5 text-primary" />
                            <div>
                              <CardTitle className="text-base">{system.name}</CardTitle>
                              <CardDescription>{system.description || 'No description'}</CardDescription>
                            </div>
                          </div>
                          <div className="flex items-center gap-3">
                            {system.last_scan_date && (
                              <Badge variant="outline" className="text-xs">
                                Last scan: {new Date(system.last_scan_date).toLocaleDateString()}
                              </Badge>
                            )}
                            {isSelected && (
                              <CheckCircle2 className="h-5 w-5 text-primary" />
                            )}
                          </div>
                        </div>
                      </CardHeader>
                    </Card>
                  )
                })}
              </div>
            ) : (
              <div className="text-center py-8">
                <div className="text-muted-foreground">
                  {systems && systems.length === 0 
                    ? "No systems found in this group." 
                    : "Failed to load systems. Please try again."
                  }
                </div>
              </div>
            )}
          </div>
        )

      case 4: // Select Vulnerabilities
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2 flex items-center gap-2">
                <Shield className="h-5 w-5 text-primary" />
                Select Open Vulnerabilities
              </h3>
              <div className="space-y-3">
                <div className="flex items-start gap-2 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                  <Info className="h-4 w-4 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0" />
                  <div className="text-sm text-blue-800 dark:text-blue-200">
                    <strong>OPEN</strong> and <strong>NOT REVIEWED</strong> findings are displayed.
                    <span className="text-red-600 dark:text-red-400 font-semibold"> CAT I findings are automatically selected</span> as they represent critical security risks.
                    Findings are organized by scope: shared across all systems or system-specific.
                  </div>
                </div>

                <div className="flex items-start gap-2 p-3 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg">
                  <AlertTriangle className="h-4 w-4 text-amber-600 dark:text-amber-400 mt-0.5 flex-shrink-0" />
                  <div className="text-sm text-amber-800 dark:text-amber-200">
                    <strong>NOT REVIEWED findings require manual testing</strong> to determine their actual status.
                    These represent controls that couldn&apos;t be automatically verified and need cybersecurity professional assessment.
                    Use STPs to test these findings and update their status based on your manual verification results.
                  </div>
                </div>
              </div>

              {/* Controls and Statistics */}
              <div className="space-y-4">
                {/* Statistics Cards with Icons */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  <Card className="border-2 border-primary bg-primary/5">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="text-2xl font-bold text-primary">{selectedVulnerabilities.length}</div>
                          <div className="text-xs font-medium text-primary">Selected</div>
                        </div>
                        <CheckCircle2 className="h-8 w-8 text-primary/20" />
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-2 border-red-500 bg-red-50 dark:bg-red-900/20">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="text-2xl font-bold text-red-600 dark:text-red-400">
                            {vulnerabilities ? vulnerabilities.filter(v => {
                              const sev = v.severity.toLowerCase().replace(/_/g, ' ')
                              return sev === 'cat i' || sev === 'high'
                            }).length : 0}
                          </div>
                          <div className="text-xs font-medium text-red-700 dark:text-red-300">CAT I (Critical)</div>
                        </div>
                        <AlertTriangle className="h-8 w-8 text-red-500/30" />
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-2 border-orange-400 bg-orange-50 dark:bg-orange-900/20">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">
                            {vulnerabilities ? vulnerabilities.filter(v => {
                              const sev = v.severity.toLowerCase().replace(/_/g, ' ')
                              return sev === 'cat ii' || sev === 'medium'
                            }).length : 0}
                          </div>
                          <div className="text-xs font-medium text-orange-700 dark:text-orange-300">CAT II (High)</div>
                        </div>
                        <AlertCircle className="h-8 w-8 text-orange-500/30" />
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-2 border-yellow-400 bg-yellow-50 dark:bg-yellow-900/20">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">
                            {vulnerabilities ? vulnerabilities.filter(v => {
                              const sev = v.severity.toLowerCase().replace(/_/g, ' ')
                              return sev === 'cat iii' || sev === 'low'
                            }).length : 0}
                          </div>
                          <div className="text-xs font-medium text-yellow-700 dark:text-yellow-300">CAT III (Medium)</div>
                        </div>
                        <Info className="h-8 w-8 text-yellow-500/30" />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Sort Controls */}
                <Card className="border-primary/20">
                  <CardContent className="p-3">
                    <div className="flex flex-wrap items-center gap-3">
                      <div className="flex items-center gap-2">
                        <Filter className="h-4 w-4 text-primary" />
                        <label className="text-sm font-medium">Sort by:</label>
                        <Select value={sortBy} onValueChange={(value: 'severity' | 'vuln_id' | 'rule_title') => setSortBy(value)}>
                          <SelectTrigger className="w-40">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="severity">
                              <div className="flex items-center gap-2">
                                <AlertTriangle className="h-3 w-3" />
                                Severity
                              </div>
                            </SelectItem>
                            <SelectItem value="vuln_id">Vulnerability ID</SelectItem>
                            <SelectItem value="rule_title">Rule Title</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="flex items-center gap-2">
                        <SortAsc className="h-4 w-4 text-primary" />
                        <label className="text-sm font-medium">Order:</label>
                        <Select value={sortOrder} onValueChange={(value: 'asc' | 'desc') => setSortOrder(value)}>
                          <SelectTrigger className="w-48">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="asc">
                              <div className="flex items-center gap-2">
                                <span className="text-red-600">●</span> CAT I First (Critical → Low)
                              </div>
                            </SelectItem>
                            <SelectItem value="desc">
                              <div className="flex items-center gap-2">
                                <span className="text-yellow-600">●</span> CAT III First (Low → Critical)
                              </div>
                            </SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Select All Controls */}
                <div className="flex flex-wrap items-center gap-2 p-3 border rounded-lg">
                  <span className="text-sm font-medium mr-2">Quick Select:</span>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => selectAllVulnerabilities()}
                    disabled={!vulnerabilities || vulnerabilities.length === 0}
                  >
                    Select All
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => deselectAllVulnerabilities()}
                    disabled={selectedVulnerabilities.length === 0}
                  >
                    Deselect All
                  </Button>
                  <div className="h-4 w-px bg-border mx-1" />
                  <Button
                    size="sm"
                    variant="outline"
                    className="text-red-600 border-red-200 hover:bg-red-50 dark:text-red-400 dark:border-red-800 dark:hover:bg-red-900/20"
                    onClick={() => selectAllVulnerabilities('cat1')}
                    disabled={!vulnerabilities || vulnerabilities.filter(v => {
                      const sev = v.severity.toLowerCase().replace(/_/g, ' ')
                      return sev === 'cat i' || sev === 'high'
                    }).length === 0}
                  >
                    Select All CAT I
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    className="text-orange-600 border-orange-200 hover:bg-orange-50 dark:text-orange-400 dark:border-orange-800 dark:hover:bg-orange-900/20"
                    onClick={() => selectAllVulnerabilities('cat2')}
                    disabled={!vulnerabilities || vulnerabilities.filter(v => {
                      const sev = v.severity.toLowerCase().replace(/_/g, ' ')
                      return sev === 'cat ii' || sev === 'medium'
                    }).length === 0}
                  >
                    Select All CAT II
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    className="text-yellow-600 border-yellow-200 hover:bg-yellow-50 dark:text-yellow-400 dark:border-yellow-800 dark:hover:bg-yellow-900/20"
                    onClick={() => selectAllVulnerabilities('cat3')}
                    disabled={!vulnerabilities || vulnerabilities.filter(v => {
                      const sev = v.severity.toLowerCase().replace(/_/g, ' ')
                      return sev === 'cat iii' || sev === 'low'
                    }).length === 0}
                  >
                    Select All CAT III
                  </Button>
                </div>
              </div>
            </div>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Loading vulnerabilities...</div>
              </div>
            ) : (
              <div className="space-y-4 max-h-96 overflow-y-auto">
                {/* Group vulnerabilities by shared vs unique */}
                {(() => {
                  if (!vulnerabilities || vulnerabilities.length === 0) {
                    return (
                      <div className="text-center py-8 text-muted-foreground">
                        No open vulnerabilities found for the selected systems.
                      </div>
                    )
                  }
                  
                  const selectedSystemNames = selectedSystems.map(s => s.name)
                  const allSortedVulns = sortVulnerabilities(vulnerabilities)

                  // A vulnerability is "shared" only if:
                  // 1. We have more than 1 selected system AND
                  // 2. The vulnerability affects ALL selected systems
                  const sharedVulns = selectedSystemNames.length > 1
                    ? allSortedVulns.filter(v =>
                        selectedSystemNames.every(sysName => v.affected_systems.includes(sysName))
                      )
                    : []

                  // All other vulnerabilities are system-specific (or all vulns if only 1 system selected)
                  const uniqueVulns = selectedSystemNames.length > 1
                    ? allSortedVulns.filter(v =>
                        !selectedSystemNames.every(sysName => v.affected_systems.includes(sysName))
                      )
                    : allSortedVulns
                  

                  return (
                    <>
                      {/* Shared Vulnerabilities */}
                      {sharedVulns.length > 0 && (
                        <div className="space-y-3">
                          <div className="flex items-center gap-2">
                            <h4 className="font-medium text-green-600 dark:text-green-400">
                              Shared Across All Selected Systems ({sharedVulns.length})
                            </h4>
                          </div>
                          {sharedVulns.map((vuln) => {
                            const isSelected = selectedVulnerabilities.some(v => v.vuln_id === vuln.vuln_id)
                            const sev = vuln.severity.toLowerCase().replace(/_/g, ' ')
                            const isCatI = sev === 'cat i' || sev === 'high'
                            
                            return (
                              <Card
                                key={`shared-${vuln.vuln_id}-${vuln.system_ids.join('-')}`}
                                className={`
                                  transition-all duration-200 hover:shadow-md
                                  ${isSelected ? 'ring-2 ring-primary bg-primary/5' : ''}
                                  ${isCatI ? 'border-l-4 border-l-red-500' : ''}
                                `}
                              >
                                <div className="flex items-start gap-3 p-4">
                                  <Checkbox
                                    checked={isSelected}
                                    onCheckedChange={(checked) => {
                                      if (checked) {
                                        setSelectedVulnerabilities(prev => [...prev, vuln])
                                      } else {
                                        setSelectedVulnerabilities(prev =>
                                          prev.filter(v => v.vuln_id !== vuln.vuln_id)
                                        )
                                      }
                                    }}
                                    className="mt-1"
                                  />
                                  <div className="flex-1">
                                    <div className="flex flex-wrap items-center gap-2 mb-2">
                                      {/* Severity Icon */}
                                      {isCatI ? (
                                        <AlertTriangle className="h-4 w-4 text-red-500" />
                                      ) : sev === 'cat ii' || sev === 'medium' ? (
                                        <AlertCircle className="h-4 w-4 text-orange-500" />
                                      ) : (
                                        <Info className="h-4 w-4 text-yellow-500" />
                                      )}

                                      <span className="font-semibold text-sm">{vuln.vuln_id}</span>

                                      <Badge
                                        variant="outline"
                                        className={getSeverityBadgeStyle(vuln.severity)}
                                      >
                                        {mapSeverityToStigFormat(vuln.severity)}
                                      </Badge>

                                      <Badge
                                        variant={vuln.status === 'Open' ? 'destructive' : 'secondary'}
                                        className={vuln.status === 'Not_Reviewed' ? 'bg-amber-100 dark:bg-amber-900/30 text-amber-800 dark:text-amber-200 border-amber-300 dark:border-amber-700' : ''}
                                      >
                                        {vuln.status === 'Open' ? '🔴 OPEN' : '🟡 NEEDS MANUAL TEST'}
                                      </Badge>

                                      {isCatI && (
                                        <Badge variant="default" className="bg-red-600 hover:bg-red-700">
                                          <CheckCircle2 className="h-3 w-3 mr-1" />
                                          AUTO-SELECTED
                                        </Badge>
                                      )}

                                      <Badge variant="outline" className="bg-green-50 dark:bg-green-900/30 text-green-700 dark:text-green-300">
                                        <Users className="h-3 w-3 mr-1" />
                                        SHARED
                                      </Badge>
                                    </div>

                                    <p className="text-sm font-medium mb-2 line-clamp-2">
                                      {vuln.rule_title}
                                    </p>

                                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                                      <Shield className="h-3 w-3" />
                                      <span>Affects all {selectedSystemNames.length} selected systems</span>
                                    </div>
                                  </div>
                                </div>
                              </Card>
                            )
                          })}
                        </div>
                      )}

                      {/* System-Specific Vulnerabilities */}
                      {uniqueVulns.length > 0 && (
                        <div className="space-y-3">
                          <div className="flex items-center gap-2">
                            <h4 className="font-medium text-blue-600 dark:text-blue-400">
                              {selectedSystemNames.length === 1
                                ? `Vulnerabilities for ${selectedSystemNames[0]} (${uniqueVulns.length})`
                                : `System-Specific Findings (${uniqueVulns.length})`
                              }
                            </h4>
                          </div>
                          {uniqueVulns.map((vuln) => {
                            const isSelected = selectedVulnerabilities.some(v => v.vuln_id === vuln.vuln_id)
                            const sev = vuln.severity.toLowerCase().replace(/_/g, ' ')
                            const isCatI = sev === 'cat i' || sev === 'high'
                            
                            return (
                              <Card
                                key={`unique-${vuln.vuln_id}-${vuln.system_ids.join('-')}`}
                                className={`
                                  transition-all duration-200 hover:shadow-md
                                  ${isSelected ? 'ring-2 ring-primary bg-primary/5' : ''}
                                  ${isCatI ? 'border-l-4 border-l-red-500' : ''}
                                `}
                              >
                                <div className="flex items-start gap-3 p-4">
                                  <Checkbox
                                    checked={isSelected}
                                    onCheckedChange={(checked) => {
                                      if (checked) {
                                        setSelectedVulnerabilities(prev => [...prev, vuln])
                                      } else {
                                        setSelectedVulnerabilities(prev =>
                                          prev.filter(v => v.vuln_id !== vuln.vuln_id)
                                        )
                                      }
                                    }}
                                    className="mt-1"
                                  />
                                  <div className="flex-1">
                                    <div className="flex flex-wrap items-center gap-2 mb-2">
                                      {/* Severity Icon */}
                                      {isCatI ? (
                                        <AlertTriangle className="h-4 w-4 text-red-500" />
                                      ) : sev === 'cat ii' || sev === 'medium' ? (
                                        <AlertCircle className="h-4 w-4 text-orange-500" />
                                      ) : (
                                        <Info className="h-4 w-4 text-yellow-500" />
                                      )}

                                      <span className="font-semibold text-sm">{vuln.vuln_id}</span>

                                      <Badge
                                        variant="outline"
                                        className={getSeverityBadgeStyle(vuln.severity)}
                                      >
                                        {mapSeverityToStigFormat(vuln.severity)}
                                      </Badge>

                                      <Badge
                                        variant={vuln.status === 'Open' ? 'destructive' : 'secondary'}
                                        className={vuln.status === 'Not_Reviewed' ? 'bg-amber-100 dark:bg-amber-900/30 text-amber-800 dark:text-amber-200 border-amber-300 dark:border-amber-700' : ''}
                                      >
                                        {vuln.status === 'Open' ? '🔴 OPEN' : '🟡 NEEDS MANUAL TEST'}
                                      </Badge>

                                      {isCatI && (
                                        <Badge variant="default" className="bg-red-600 hover:bg-red-700">
                                          <CheckCircle2 className="h-3 w-3 mr-1" />
                                          AUTO-SELECTED
                                        </Badge>
                                      )}

                                      <Badge variant="outline" className="bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300">
                                        <Shield className="h-3 w-3 mr-1" />
                                        {selectedSystemNames.length === 1 ? 'SYSTEM' : 'SPECIFIC'}
                                      </Badge>
                                    </div>

                                    <p className="text-sm font-medium mb-2 line-clamp-2">
                                      {vuln.rule_title}
                                    </p>

                                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                                      <Shield className="h-3 w-3" />
                                      <span className="font-medium">Affects: </span>
                                      <span className="text-primary">{vuln.affected_systems.join(', ')}</span>
                                    </div>
                                  </div>
                                </div>
                              </Card>
                            )
                          })}
                        </div>
                      )}

                      {sharedVulns.length === 0 && uniqueVulns.length === 0 && (
                        <div className="text-center py-8 text-muted-foreground">
                          No open vulnerabilities found for the selected systems.
                        </div>
                      )}
                    </>
                  )
                })()}
              </div>
            )}
          </div>
        )

      case 5: // Configure STP
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Configure Test Plan</h3>
              <p className="text-muted-foreground mb-4">
                Set up the details for your Security Test Plan.
              </p>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium">Test Plan Title *</label>
                <Input
                  placeholder="Enter a descriptive title for this STP"
                  value={stpConfig.title}
                  onChange={(e) => setStpConfig(prev => ({ ...prev, title: e.target.value }))}
                />
              </div>
              
              <div>
                <label className="text-sm font-medium">Description</label>
                <Textarea
                  placeholder="Describe the scope and objectives of this test plan"
                  value={stpConfig.description}
                  onChange={(e) => setStpConfig(prev => ({ ...prev, description: e.target.value }))}
                  rows={3}
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium">Priority</label>
                  <Select 
                    value={stpConfig.priority} 
                    onValueChange={(value: 'Low' | 'Medium' | 'High' | 'Critical') => 
                      setStpConfig(prev => ({ ...prev, priority: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Low">Low</SelectItem>
                      <SelectItem value="Medium">Medium</SelectItem>
                      <SelectItem value="High">High</SelectItem>
                      <SelectItem value="Critical">Critical</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Due Date</label>
                  <Input
                    type="date"
                    value={stpConfig.due_date}
                    onChange={(e) => setStpConfig(prev => ({ ...prev, due_date: e.target.value }))}
                  />
                </div>
              </div>
            </div>
          </div>
        )

      case 6: // Review & Create
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Review & Create</h3>
              <p className="text-muted-foreground mb-4">
                Review your selections and create the Security Test Plan.
              </p>
            </div>
            
            <div className="space-y-4">
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-base">Test Plan Summary</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-muted-foreground">Package:</span>
                      <div className="font-medium">{selectedPackage?.name}</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Group:</span>
                      <div className="font-medium">{selectedGroup?.name}</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Title:</span>
                      <div className="font-medium">{stpConfig.title}</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Priority:</span>
                      <Badge variant="outline">{stpConfig.priority}</Badge>
                    </div>
                  </div>
                  
                  <div className="pt-3 border-t">
                    <span className="text-sm text-muted-foreground">
                      {selectedVulnerabilities.length} test cases will be created for the selected vulnerabilities.
                    </span>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <div className="flex items-center gap-3">
            <Link href="/vulnerability-center/stps">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4" />
                Back to STPs
              </Button>
            </Link>
          </div>
          <h1 className="text-3xl font-bold">Create Security Test Plan</h1>
          <p className="text-muted-foreground">
            Follow the wizard to create an STP with automated test cases
          </p>
        </div>
      </div>

      {/* Progress Indicator */}
      <div className="space-y-4">
        <Progress value={(currentStep / WIZARD_STEPS.length) * 100} className="h-2" />
        <div className="flex justify-between">
          {WIZARD_STEPS.map((step) => (
            <div key={step.id} className="flex flex-col items-center gap-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                currentStep >= step.id 
                  ? 'bg-primary text-primary-foreground' 
                  : 'bg-muted text-muted-foreground'
              }`}>
                {currentStep > step.id ? <CheckCircle2 className="h-4 w-4" /> : step.id}
              </div>
              <div className="text-center">
                <div className="text-xs font-medium">{step.title}</div>
                <div className="text-xs text-muted-foreground">{step.description}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Step Content */}
      <Card className="min-h-96">
        <CardContent className="p-6">
          {renderStepContent()}
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-between">
        <Button 
          variant="outline" 
          onClick={handleBack} 
          disabled={currentStep === 1}
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back
        </Button>
        
        <div className="flex gap-2">
          {currentStep < WIZARD_STEPS.length ? (
            <Button 
              onClick={handleNext} 
              disabled={!canProceed() || loading}
            >
              Next
              <ArrowRight className="h-4 w-4 ml-2" />
            </Button>
          ) : (
            <Button 
              onClick={handleCreateSTP} 
              disabled={!canProceed() || loading}
              className="bg-green-600 hover:bg-green-700"
            >
              {loading ? (
                <>
                  <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2" />
                  Creating...
                </>
              ) : (
                <>
                  <FileCheck className="h-4 w-4 mr-2" />
                  Create STP
                </>
              )}
            </Button>
          )}
        </div>
      </div>
    </div>
  )
}