"use client"

import { useState, useEffect, useCallback, use, useMemo } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  ArrowLeft,
  Shield,
  AlertTriangle,
  XCircle,
  FileText,
  Upload,
  RefreshCw,
  Calendar,
  Server,
  Search,
  Filter,
  ChevronUp,
  ChevronDown,
  FileCheck
} from "lucide-react"
import { cn } from "@/lib/utils"
import { toast } from "sonner"
import { StigUploadDialog } from "../../components/stig-upload-dialog"

interface StigFinding {
  id: number
  vulnId: string
  ruleId: string
  ruleTitle: string
  severity: 'CAT_I' | 'CAT_II' | 'CAT_III'
  status: 'Open' | 'NotAFinding' | 'Not_Applicable' | 'Not_Reviewed'
  findingDetails: string | null
  checkContent: string | null
  cci: string | null
  controlId: string | null
  groupId: string | null
  lastSeen: string
  scan?: {
    id: number
    filename: string
    createdAt: string
  }
  reviewer?: {
    id: number
    firstName: string
    lastName: string
  }
  activeStps?: Array<{
    id: number
    title: string
    status: string
  }>
}

interface StigScan {
  id: number
  filename: string
  createdAt: string
  importer: {
    id: number
    firstName: string
    lastName: string
    email: string
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  systemScores: any[]
  _count: {
    stigFindings: number
  }
}

interface System {
  id: number
  name: string
  description: string
  ipAddress: string | null
  operatingSystem: string | null
  packageId: number
  groupId: number | null
  package: { name: string }
  group: { name: string } | null
}

export default function SystemStigPage({ params }: { params: Promise<{ id: string }> }) {
  const resolvedParams = use(params)
  const router = useRouter()
  const [system, setSystem] = useState<System | null>(null)
  const [findings, setFindings] = useState<StigFinding[]>([])
  const [scans, setScans] = useState<StigScan[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  
  // Filtering and sorting state
  const [searchTerm, setSearchTerm] = useState('')
  const [severityFilter, setSeverityFilter] = useState<string>('all')
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [sortField, setSortField] = useState<'severity' | 'status' | 'ruleTitle' | 'groupId'>('severity')
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc')

  // Pagination state - variables defined but not currently used
  // const [currentPage, setCurrentPage] = useState(1)
  // const [totalPages, setTotalPages] = useState(1)
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [paginationInfo, setPaginationInfo] = useState<any>(null)

  const fetchData = useCallback(async () => {
    setLoading(true)
    setError(null)
    try {
      // Fetch system details
      const systemResponse = await fetch(`/api/systems/${resolvedParams.id}`)
      if (!systemResponse.ok) {
        throw new Error('Failed to fetch system details')
      }
      const systemData = await systemResponse.json()
      setSystem(systemData)

      // Fetch STIG findings with high limit to get all findings
      try {
        const findingsResponse = await fetch(`/api/vulnerability-center/systems/${resolvedParams.id}/stig-findings?limit=10000`)
        if (findingsResponse.ok) {
          const findingsData = await findingsResponse.json()
          setFindings(findingsData.findings || [])
          setPaginationInfo(findingsData.pagination || null)
          // Removed setTotalPages as pagination not currently used
          // if (findingsData.pagination) {
          //   setTotalPages(findingsData.pagination.pages || 1)
          // }
        } else {
          console.warn('Failed to fetch STIG findings:', findingsResponse.status)
          setFindings([])
          setPaginationInfo(null)
        }
      } catch (findingsError) {
        console.error('STIG findings fetch error:', findingsError)
        setFindings([])
        setPaginationInfo(null)
      }

      // Fetch STIG scans
      try {
        const scansResponse = await fetch(`/api/vulnerability-center/systems/${resolvedParams.id}/stig-scans`)
        if (scansResponse.ok) {
          const scansData = await scansResponse.json()
          setScans(scansData || [])
        } else {
          console.warn('Failed to fetch STIG scans:', scansResponse.status)
          setScans([])
        }
      } catch (scansError) {
        console.error('STIG scans fetch error:', scansError)
        setScans([])
      }

    } catch (err) {
      console.error("Error fetching system STIG data:", err)
      setError(err instanceof Error ? err.message : "Failed to load system data")
      toast.error("Failed to load system STIG data")
    } finally {
      setLoading(false)
    }
  }, [resolvedParams.id])

  useEffect(() => {
    fetchData()
  }, [fetchData])

   
  const getSeverityBadge = (severity: string) => {
    const severityMap = {
      'CAT_I': { bg: 'bg-red-100 border-red-200 text-red-800', cat: 'CAT I' },
      'CAT_II': { bg: 'bg-orange-100 border-orange-200 text-orange-800', cat: 'CAT II' },
      'CAT_III': { bg: 'bg-yellow-100 border-yellow-200 text-yellow-800', cat: 'CAT III' }
    }
    return severityMap[severity as keyof typeof severityMap] || { bg: 'bg-gray-100 border-gray-200 text-gray-800', cat: 'UNKNOWN' }
  }

  const getStatusBadge = (status: string) => {
    const statusMap = {
      'Open': 'bg-red-100 border-red-200 text-red-800',
      'NotAFinding': 'bg-green-100 border-green-200 text-green-800',
      'Not_Applicable': 'bg-gray-100 border-gray-200 text-gray-600',
      'Not_Reviewed': 'bg-blue-100 border-blue-200 text-blue-800'
    }
    return statusMap[status as keyof typeof statusMap] || 'bg-gray-100 border-gray-200 text-gray-600'
  }

  const formatStatus = (status: string) => {
    switch (status) {
      case 'NotAFinding': return 'Not a Finding'
      case 'Not_Applicable': return 'Not Applicable'
      case 'Not_Reviewed': return 'Not Reviewed'
      default: return status
    }
  }

  // Filtered and sorted findings
  const filteredAndSortedFindings = useMemo(() => {
    const filtered = findings.filter(finding => {
      const matchesSearch = !searchTerm ||
        finding.ruleTitle?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        finding.vulnId?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        finding.controlId?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        finding.cci?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        finding.findingDetails?.toLowerCase().includes(searchTerm.toLowerCase())

      const matchesSeverity = severityFilter === 'all' || finding.severity === severityFilter
      const matchesStatus = statusFilter === 'all' || finding.status === statusFilter

      return matchesSearch && matchesSeverity && matchesStatus
    })

    // Sort the filtered results
    filtered.sort((a, b) => {
      let aValue: unknown, bValue: unknown

      switch (sortField) {
        case 'severity':
          const severityOrder = { 'CAT_I': 3, 'CAT_II': 2, 'CAT_III': 1 }
          aValue = severityOrder[a.severity as keyof typeof severityOrder] || 0
          bValue = severityOrder[b.severity as keyof typeof severityOrder] || 0
          break
        case 'status':
          const statusOrder = { 'Open': 4, 'Not_Reviewed': 3, 'Not_Applicable': 2, 'NotAFinding': 1 }
          aValue = statusOrder[a.status as keyof typeof statusOrder] || 0
          bValue = statusOrder[b.status as keyof typeof statusOrder] || 0
          break
        case 'ruleTitle':
          aValue = a.ruleTitle?.toLowerCase() || ''
          bValue = b.ruleTitle?.toLowerCase() || ''
          break
        case 'groupId':
          aValue = a.vulnId?.toLowerCase() || ''
          bValue = b.vulnId?.toLowerCase() || ''
          break
        default:
          return 0
      }

      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return sortDirection === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue)
      }
      if (typeof aValue === 'number' && typeof bValue === 'number') {
        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue
      }
      return 0
    })

    return filtered
  }, [findings, searchTerm, severityFilter, statusFilter, sortField, sortDirection])

  const handleSort = (field: typeof sortField) => {
    if (field === sortField) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortDirection('desc')
    }
  }

  // Calculate metrics from filtered findings
  const displayedFindings = filteredAndSortedFindings
  const totalFindings = findings.length
  const openFindings = findings.filter(f => f.status === 'Open').length
  const closedFindings = findings.filter(f => f.status === 'NotAFinding').length
  const notApplicableFindings = findings.filter(f => f.status === 'Not_Applicable').length

  const highSeverityFindings = findings.filter(f => f.severity === 'CAT_I').length

  const compliancePercentage = totalFindings > 0 
    ? Math.round(((closedFindings + notApplicableFindings) / totalFindings) * 100)
    : 0

  if (loading) {
    return (
      <div className="container mx-auto p-6 space-y-6">
        <div className="flex items-center justify-center h-64">
          <RefreshCw className="h-8 w-8 animate-spin" />
        </div>
      </div>
    )
  }

  if (error || !system) {
    return (
      <div className="container mx-auto p-6">
        <Card>
          <CardContent className="text-center py-12">
            <XCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">System Not Found</h3>
            <p className="text-muted-foreground mb-4">{error || "System not found"}</p>
            <Button onClick={() => router.push('/vulnerability-center/vulnerabilities')} variant="outline">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Packages
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="sm" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Button>
          <div>
            <h1 className="text-2xl font-bold flex items-center gap-2">
              <Shield className="h-6 w-6" />
              {system.name} — STIG
            </h1>
            <p className="text-muted-foreground">
              Security Technical Implementation Guide findings and scans
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <StigUploadDialog
            systemId={parseInt(resolvedParams.id)}
            systemName={system.name}
            onUploadComplete={fetchData}
          >
            <Button size="sm">
              <Upload className="h-4 w-4 mr-2" />
              Upload STIG File
            </Button>
          </StigUploadDialog>
          <Button onClick={fetchData} variant="outline" size="sm" disabled={loading}>
            <RefreshCw className={cn("h-4 w-4 mr-2", loading && "animate-spin")} />
            Refresh
          </Button>
        </div>
      </div>

      {/* System Info */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Server className="h-5 w-5" />
            System Information
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
              <span className="text-sm text-muted-foreground">Package:</span>
              <div className="font-medium">{system.package?.name}</div>
            </div>
            <div>
              <span className="text-sm text-muted-foreground">Group:</span>
              <div className="font-medium">{system.group?.name || 'No Group'}</div>
            </div>
            <div>
              <span className="text-sm text-muted-foreground">IP Address:</span>
              <div className="font-medium">{system.ipAddress || 'Not specified'}</div>
            </div>
            <div>
              <span className="text-sm text-muted-foreground">Operating System:</span>
              <div className="font-medium">{system.operatingSystem || 'Not specified'}</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Compliance Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="border-t-4 border-primary">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm">Compliance Rate</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold mb-2">
              <span className={cn(
                compliancePercentage >= 90 ? 'text-green-600' :
                compliancePercentage >= 75 ? 'text-yellow-600' :
                'text-red-600'
              )}>
                {compliancePercentage}%
              </span>
            </div>
            <Progress value={compliancePercentage} className="mb-2" />
            <p className="text-xs text-muted-foreground">
              {closedFindings + notApplicableFindings} of {totalFindings} compliant
            </p>
          </CardContent>
        </Card>

        <Card className="border-t-4 border-red-500">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm">Open Findings</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-red-600 mb-2">{openFindings}</div>
            <p className="text-xs text-muted-foreground">Require remediation</p>
          </CardContent>
        </Card>

        <Card className="border-t-4 border-orange-500">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm">High Severity</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-red-600 mb-2">{highSeverityFindings}</div>
            <p className="text-xs text-muted-foreground">CAT I findings</p>
          </CardContent>
        </Card>

        <Card className="border-t-4 border-blue-500">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm">Total Scans</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold mb-2">{scans.length}</div>
            <p className="text-xs text-muted-foreground">STIG scan history</p>
          </CardContent>
        </Card>
      </div>

      {/* Main Content */}
      <Tabs defaultValue="findings" className="space-y-6">
        <TabsList>
          <TabsTrigger value="findings" className="flex items-center gap-2">
            <AlertTriangle className="h-4 w-4" />
            Findings ({totalFindings})
          </TabsTrigger>
          <TabsTrigger value="scans" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            Scan History ({scans.length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="findings" className="space-y-6">
          
          {/* Filtering and Search Controls */}
          {findings.length > 0 && (
            <Card>
              <CardContent className="p-4">
                <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center">
                  {/* Search */}
                  <div className="relative flex-1 min-w-[200px]">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search findings..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  
                  {/* Severity Filter */}
                  <div className="flex items-center gap-2">
                    <Filter className="h-4 w-4 text-muted-foreground" />
                    <Select value={severityFilter} onValueChange={setSeverityFilter}>
                      <SelectTrigger className="w-32">
                        <SelectValue placeholder="Severity" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Severity</SelectItem>
                        <SelectItem value="CAT_I">CAT I</SelectItem>
                        <SelectItem value="CAT_II">CAT II</SelectItem>
                        <SelectItem value="CAT_III">CAT III</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  {/* Status Filter */}
                  <Select value={statusFilter} onValueChange={setStatusFilter}>
                    <SelectTrigger className="w-40">
                      <SelectValue placeholder="Status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Status</SelectItem>
                      <SelectItem value="Open">Open</SelectItem>
                      <SelectItem value="NotAFinding">Not a Finding</SelectItem>
                      <SelectItem value="Not_Applicable">Not Applicable</SelectItem>
                      <SelectItem value="Not_Reviewed">Not Reviewed</SelectItem>
                    </SelectContent>
                  </Select>
                  
                  {/* Results Count */}
                  <div className="text-sm text-muted-foreground whitespace-nowrap">
                    Showing {displayedFindings.length} of {totalFindings} findings
                    {paginationInfo && paginationInfo.total > 10000 && (
                      <div className="text-xs text-orange-600 mt-1">
                        Note: Displaying first 10,000 of {paginationInfo.total} total findings
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
          
          {findings.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No STIG Findings</h3>
                <p className="text-muted-foreground mb-4">
                  No STIG scan results found for this system. Upload a STIG checklist file to see findings.
                </p>
                <StigUploadDialog
                  systemId={parseInt(resolvedParams.id)}
                  systemName={system.name}
                  onUploadComplete={fetchData}
                >
                  <Button variant="outline">
                    <Upload className="h-4 w-4 mr-2" />
                    Upload STIG File
                  </Button>
                </StigUploadDialog>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardHeader>
                <CardTitle>STIG Findings</CardTitle>
                <CardDescription>
                  Security vulnerabilities and compliance findings
                </CardDescription>
              </CardHeader>
              <CardContent className="p-0">
                <div className="overflow-x-auto">
                  <Table className="table-fixed">
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[12%]">
                          <Button
                            variant="ghost"
                            className="h-auto p-0 font-semibold text-left justify-start"
                            onClick={() => handleSort('groupId')}
                          >
                            Group ID
                            {sortField === 'groupId' && (
                              sortDirection === 'asc' ?
                                <ChevronUp className="ml-1 h-3 w-3" /> :
                                <ChevronDown className="ml-1 h-3 w-3" />
                            )}
                          </Button>
                        </TableHead>
                        <TableHead className="w-[35%]">
                          <Button 
                            variant="ghost" 
                            className="h-auto p-0 font-semibold text-left justify-start"
                            onClick={() => handleSort('ruleTitle')}
                          >
                            Title
                            {sortField === 'ruleTitle' && (
                              sortDirection === 'asc' ? 
                                <ChevronUp className="ml-1 h-3 w-3" /> : 
                                <ChevronDown className="ml-1 h-3 w-3" />
                            )}
                          </Button>
                        </TableHead>
                        <TableHead className="w-[10%]">
                          <Button 
                            variant="ghost" 
                            className="h-auto p-0 font-semibold text-center justify-center"
                            onClick={() => handleSort('severity')}
                          >
                            Severity
                            {sortField === 'severity' && (
                              sortDirection === 'asc' ? 
                                <ChevronUp className="ml-1 h-3 w-3" /> : 
                                <ChevronDown className="ml-1 h-3 w-3" />
                            )}
                          </Button>
                        </TableHead>
                        <TableHead className="w-[12%]">
                          <Button
                            variant="ghost"
                            className="h-auto p-0 font-semibold text-center justify-center"
                            onClick={() => handleSort('status')}
                          >
                            Status
                            {sortField === 'status' && (
                              sortDirection === 'asc' ?
                                <ChevronUp className="ml-1 h-3 w-3" /> :
                                <ChevronDown className="ml-1 h-3 w-3" />
                            )}
                          </Button>
                        </TableHead>
                        <TableHead className="w-[10%]">NIST Control</TableHead>
                        <TableHead className="w-[8%]">CCI</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {displayedFindings.map((finding) => (
                        <TableRow key={finding.id} className="hover:bg-muted/50">
                          <TableCell className="font-mono text-xs p-3 w-[12%]">
                            <div className="truncate overflow-hidden">
                              {finding.vulnId || 'N/A'}
                            </div>
                          </TableCell>
                          <TableCell className="p-3 w-[35%]">
                            <div className="space-y-1">
                              <div className="font-medium text-sm leading-tight">
                                <div className="line-clamp-2 break-words overflow-hidden">
                                  {finding.ruleTitle}
                                </div>
                              </div>
                              {finding.findingDetails && (
                                <div className="text-xs text-muted-foreground leading-relaxed">
                                  <div className="line-clamp-2 break-words opacity-80 overflow-hidden">
                                    {finding.findingDetails}
                                  </div>
                                </div>
                              )}
                            </div>
                          </TableCell>
                          <TableCell className="p-2 w-[10%] text-center">
                            <div className={cn(
                              "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border whitespace-nowrap",
                              getSeverityBadge(finding.severity).bg
                            )}>
                              {getSeverityBadge(finding.severity).cat}
                            </div>
                          </TableCell>
                          <TableCell className="p-2 w-[12%]">
                            <div className="flex flex-col items-center gap-1">
                              {/* Show Active STP badge for Open or Not_Reviewed findings with active STPs */}
                              {finding.activeStps && finding.activeStps.length > 0 && 
                               (finding.status === 'Open' || finding.status === 'Not_Reviewed') ? (
                                <div className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 border border-blue-300 dark:border-blue-700 whitespace-nowrap">
                                  <FileCheck className="h-3 w-3 mr-1" />
                                  Active STP
                                </div>
                              ) : (
                                <div className={cn(
                                  "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border whitespace-nowrap",
                                  getStatusBadge(finding.status)
                                )}>
                                  {formatStatus(finding.status)}
                                </div>
                              )}
                              {/* Show STP count badge if there are active STPs */}
                              {finding.activeStps && finding.activeStps.length > 0 && (
                                <div className="text-xs text-muted-foreground">
                                  {finding.activeStps.length} STP{finding.activeStps.length > 1 ? 's' : ''}
                                </div>
                              )}
                            </div>
                          </TableCell>
                          <TableCell className="text-xs p-2 w-[10%] text-center">
                            <div className="truncate overflow-hidden">
                              {finding.controlId || 'N/A'}
                            </div>
                          </TableCell>
                          <TableCell className="text-xs p-2 w-[8%] text-center">
                            <div className="truncate overflow-hidden">
                              {finding.cci || 'N/A'}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="scans" className="space-y-6">
          {scans.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Scan History</h3>
                <p className="text-muted-foreground mb-4">
                  No STIG scans have been performed on this system yet.
                </p>
                <StigUploadDialog
                  systemId={parseInt(resolvedParams.id)}
                  systemName={system.name}
                  onUploadComplete={fetchData}
                >
                  <Button variant="outline">
                    <Upload className="h-4 w-4 mr-2" />
                    Upload First Scan
                  </Button>
                </StigUploadDialog>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardHeader>
                <CardTitle>Scan History</CardTitle>
                <CardDescription>
                  STIG checklist files uploaded for this system
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Filename</TableHead>
                      <TableHead>Findings</TableHead>
                      <TableHead>Uploaded By</TableHead>
                      <TableHead>Upload Date</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {scans.map((scan) => (
                      <TableRow key={scan.id}>
                        <TableCell className="font-medium">
                          {scan.filename}
                        </TableCell>
                        <TableCell className="text-sm">
                          {scan._count?.stigFindings || 0} findings
                        </TableCell>
                        <TableCell className="text-sm">
                          {scan.importer ? `${scan.importer.firstName} ${scan.importer.lastName}` : 'Unknown'}
                        </TableCell>
                        <TableCell className="text-sm text-muted-foreground">
                          <div className="flex items-center gap-2">
                            <Calendar className="h-4 w-4" />
                            {new Date(scan.createdAt).toLocaleDateString()}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Button variant="outline" size="sm">
                            View Details
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          )}
        </TabsContent>
      </Tabs>
    </div>
  )
}
