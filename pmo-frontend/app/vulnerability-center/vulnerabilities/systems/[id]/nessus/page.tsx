"use client"

import { useState, useEffect, useCallback, use } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  ShieldAlert, 
  Upload, 
  ArrowLeft, 
  RefreshCw, 
  XCircle, 
  Server,
  AlertTriangle,
  TrendingUp,
  Database,
  FileText
} from "lucide-react"
import { toast } from "sonner"
import { cn } from "@/lib/utils"
import NessusScanHistory from "./components/NessusScanHistory"

interface System {
  id: number
  name: string
  description: string
  ipAddress: string | null
  operatingSystem: string | null
  packageId: number
  groupId: number | null
  package: { name: string }
  group: { name: string } | null
}

interface NessusReport {
  id: number
  filename: string
  scan_name: string
  scan_date: string
  total_hosts: number
  total_vulnerabilities: number
  createdAt: string
}

interface NessusVulnerability {
  id: number
  plugin_id: number
  plugin_name: string
  plugin_family: string
  severity: number
  port?: string
  protocol?: string
  service?: string
  description?: string
  solution?: string
  cve?: string
  cvss_score?: number
  cvss3_score?: number
  risk_factor?: string
  exploit_available?: boolean
  host: {
    id: number
    hostname: string
    ip_address: string
  }
}

interface NessusStats {
  total: number
  critical: number
  high: number
  medium: number
  low: number
  info: number
  exploitable: number
  topFamilies: Array<{ family: string; count: number }>
}

export default function SystemNessusPage({ params }: { params: Promise<{ id: string }> }) {
  const resolvedParams = use(params)
  const router = useRouter()
  const [system, setSystem] = useState<System | null>(null)
  const [reports, setReports] = useState<NessusReport[]>([])
  const [vulnerabilities, setVulnerabilities] = useState<NessusVulnerability[]>([])
  const [stats, setStats] = useState<NessusStats | null>(null)
  const [loading, setLoading] = useState(true)
  const [uploading, setUploading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [selectedFile, setSelectedFile] = useState<File | null>(null)

  const fetchData = useCallback(async () => {
    setLoading(true)
    setError(null)
    try {
      // Fetch system details
      const systemResponse = await fetch(`/api/systems/${resolvedParams.id}`)
      if (!systemResponse.ok) {
        throw new Error('System not found')
      }
      const systemData = await systemResponse.json()
      setSystem(systemData)

      // Fetch Nessus reports for this system
      const reportsResponse = await fetch(`/api/vulnerabilities/reports?system_id=${resolvedParams.id}`)
      let reportsData = []
      if (reportsResponse.ok) {
        reportsData = await reportsResponse.json()
        setReports(reportsData || [])
      }

      // Fetch Nessus vulnerabilities for this system
      try {
        if (reportsData.length > 0) {
          // Use the first report to get vulnerabilities
          const reportVulnsResponse = await fetch(`/api/vulnerabilities/nessus?report_id=${reportsData[0].id}&limit=100`)
          if (reportVulnsResponse.ok) {
            const vulnData = await reportVulnsResponse.json()
            setVulnerabilities(vulnData.vulnerabilities || [])
          }
        } else {
          // Try system-wide vulnerability fetch
          const vulnerabilitiesResponse = await fetch(`/api/vulnerabilities/nessus?system_id=${resolvedParams.id}&limit=100`)
          if (vulnerabilitiesResponse.ok) {
            const vulnData = await vulnerabilitiesResponse.json()
            setVulnerabilities(vulnData.vulnerabilities || [])
          }
        }
      } catch (_error) {
        console.warn("Nessus vulnerabilities endpoint not available yet", _error)
      }

      // Fetch Nessus statistics for this system
      try {
        const statsResponse = await fetch(`/api/vulnerabilities/nessus/stats?system_id=${resolvedParams.id}`)
        if (statsResponse.ok) {
          const statsData = await statsResponse.json()
          setStats(statsData)
        } else {
          // Default stats to show UI structure
          setStats({
            total: 0,
            critical: 0,
            high: 0,
            medium: 0,
            low: 0,
            info: 0,
            exploitable: 0,
            topFamilies: []
          })
        }
      } catch {
        console.warn("Nessus stats endpoint not available yet")
        setStats({
          total: 0,
          critical: 0,
          high: 0,
          medium: 0,
          low: 0,
          info: 0,
          exploitable: 0,
          topFamilies: []
        })
      }

    } catch (err) {
      console.error("Error fetching Nessus data:", err)
      setError(err instanceof Error ? err.message : "Failed to load Nessus data")
      toast.error("Failed to load Nessus data")
    } finally {
      setLoading(false)
    }
  }, [resolvedParams.id])

  useEffect(() => {
    fetchData()
  }, [fetchData])

  const handleFileUpload = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!selectedFile || !system) {
      toast.error("Please select a .nessus file")
      return
    }

    // Check file size (50MB limit)
    const maxSize = 50 * 1024 * 1024; // 50MB in bytes
    if (selectedFile.size > maxSize) {
      toast.error(`File is too large. Maximum size is ${Math.round(maxSize / 1024 / 1024)}MB. Your file is ${Math.round(selectedFile.size / 1024 / 1024)}MB.`)
      return
    }

    setUploading(true)
    try {
      const formData = new FormData()
      formData.append('file', selectedFile)
      formData.append('system_id', system.id.toString())
      formData.append('package_id', system.packageId.toString())

      const response = await fetch('/api/vulnerabilities/upload', {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Upload failed')
      }

      const result = await response.json()
      toast.success(`Successfully imported ${result.summary.vulnerabilities_imported} vulnerabilities from ${result.summary.hosts_imported} hosts`)
      
      // Reset form and refresh data
      setSelectedFile(null)
      const fileInput = document.getElementById('nessus-file') as HTMLInputElement
      if (fileInput) fileInput.value = ''
      
      fetchData()
    } catch (err) {
      console.error("Upload error:", err)
      toast.error(err instanceof Error ? err.message : "Upload failed")
    } finally {
      setUploading(false)
    }
  }

  function getSeverityLabel(severity: number): string {
    switch (severity) {
      case 4: return 'Critical'
      case 3: return 'High'
      case 2: return 'Medium'
      case 1: return 'Low'
      case 0: return 'Info'
      default: return 'Unknown'
    }
  }

  function getSeverityColor(severity: number): string {
    switch (severity) {
      case 4: return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'
      case 3: return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
      case 2: return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'
      case 1: return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
      case 0: return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
    }
  }

  if (loading) {
    return (
      <div className="p-6 flex items-center justify-center h-64">
        <RefreshCw className="h-8 w-8 animate-spin" />
      </div>
    )
  }

  if (error || !system) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="text-center py-12">
            <XCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">System Not Found</h3>
            <p className="text-muted-foreground mb-4">{error || "System not found"}</p>
            <Button onClick={() => router.push('/vulnerability-center/vulnerabilities')} variant="outline">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Packages
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="p-6 grid gap-6">
      {/* Header */}
      <div className="rounded-md border bg-card text-card-foreground p-5">
        <div className="mb-3">
          <div className="flex items-center justify-between">
            <Button variant="outline" size="sm" onClick={() => router.push(`/vulnerability-center/vulnerabilities/systems/${system.id}`)}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to System
            </Button>
            <Button variant="outline" size="sm" onClick={() => router.push(`/vulnerability-center/systems/${system.id}/stig`)}>
              <ShieldAlert className="h-4 w-4 mr-2" />
              Go to STIG
            </Button>
          </div>
        </div>
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="space-y-1">
            <h1 className="text-2xl font-semibold flex items-center gap-2">
              <Server className="h-6 w-6" />
              {system.name} â€” Nessus Vulnerabilities
            </h1>
            <p className="text-sm text-muted-foreground">{system.description}</p>
            <div className="flex flex-wrap gap-4 text-sm text-muted-foreground">
              <span>Package: {system.package?.name}</span>
              {system.group && <span>Group: {system.group.name}</span>}
              {system.ipAddress && <span>IP: {system.ipAddress}</span>}
              {system.operatingSystem && <span>OS: {system.operatingSystem}</span>}
            </div>
          </div>
          <div className="flex flex-wrap gap-2">
            <Button onClick={fetchData} variant="outline" size="sm" disabled={loading}>
              <RefreshCw className={cn("h-4 w-4 mr-2", loading && "animate-spin")} />
              Refresh
            </Button>
          </div>
        </div>
      </div>

      {/* Upload Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Upload className="h-5 w-5" />
            Upload Nessus Scan
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleFileUpload} className="space-y-4">
            <div className="flex flex-col md:flex-row gap-3 items-start">
              <Input
                id="nessus-file"
                type="file"
                accept=".nessus,application/xml,text/xml"
                onChange={(e) => setSelectedFile(e.target.files?.[0] || null)}
                disabled={uploading}
                className="flex-1"
              />
              <Button type="submit" disabled={uploading || !selectedFile}>
                {uploading ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    Uploading...
                  </>
                ) : (
                  <>
                    <Upload className="h-4 w-4 mr-2" />
                    Upload
                  </>
                )}
              </Button>
            </div>
            <div className="text-sm text-muted-foreground">
              Upload a .nessus file to import vulnerability scan results for this system.
              <div className="mt-2 text-xs">
                Maximum file size: 50MB
                {selectedFile && (
                  <span className={cn("ml-2", selectedFile.size > 50 * 1024 * 1024 ? "text-red-600" : "text-green-600")}>
                    â€¢ Selected: {Math.round(selectedFile.size / 1024 / 1024 * 100) / 100}MB
                  </span>
                )}
              </div>
              {!system?.packageId && (
                <div className="mt-2 p-2 bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 rounded text-yellow-800 dark:text-yellow-200">
                  Note: Backend service is currently offline. Upload functionality will be available when the backend is running.
                </div>
              )}
            </div>
          </form>
        </CardContent>
      </Card>

      {/* Statistics */}
      {stats && (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card className="border-t-4 border-blue-600 bg-blue-50/60 dark:bg-blue-950/20">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{stats.total}</CardContent>
          </Card>
          <Card className="border-t-4 border-purple-600 bg-purple-50/60 dark:bg-purple-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">Critical</CardTitle>
              <AlertTriangle className="h-4 w-4 text-purple-600" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{stats.critical}</CardContent>
          </Card>
          <Card className="border-t-4 border-red-600 bg-red-50/60 dark:bg-red-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">High</CardTitle>
              <ShieldAlert className="h-4 w-4 text-red-600" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{stats.high}</CardContent>
          </Card>
          <Card className="border-t-4 border-orange-500 bg-orange-50/60 dark:bg-orange-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">Exploitable</CardTitle>
              <TrendingUp className="h-4 w-4 text-orange-500" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{stats.exploitable}</CardContent>
          </Card>
        </div>
      )}

      {/* Scan History */}
      <NessusScanHistory systemId={system.id} reports={reports} />

      {/* Main Content Tabs */}
      <Tabs defaultValue="vulnerabilities" className="space-y-4">
        <TabsList>
          <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
          <TabsTrigger value="reports">Scan Reports</TabsTrigger>
          <TabsTrigger value="families">Plugin Families</TabsTrigger>
        </TabsList>

        {/* Vulnerabilities Tab */}
        <TabsContent value="vulnerabilities">
          <Card>
            <CardHeader>
              <CardTitle>Recent Vulnerabilities</CardTitle>
            </CardHeader>
            <CardContent>
              {vulnerabilities.length > 0 ? (
                <div className="space-y-3">
                  {vulnerabilities.slice(0, 20).map((vuln) => (
                    <div key={vuln.id} className="border rounded-lg p-4 hover:bg-muted/50 transition-colors">
                      <div className="flex items-start justify-between gap-4">
                        <div className="flex-1 space-y-2">
                          <div className="flex items-center gap-2">
                            <Badge className={getSeverityColor(vuln.severity)}>
                              {getSeverityLabel(vuln.severity)}
                            </Badge>
                            {vuln.exploit_available && (
                              <Badge variant="destructive" className="text-xs">
                                Exploitable
                              </Badge>
                            )}
                            <span className="text-sm text-muted-foreground">
                              Plugin {vuln.plugin_id}
                            </span>
                          </div>
                          <h4 className="font-medium">{vuln.plugin_name}</h4>
                          <div className="text-sm text-muted-foreground">
                            <div>Host: {vuln.host.hostname} ({vuln.host.ip_address})</div>
                            <div>Family: {vuln.plugin_family}</div>
                            {vuln.port && <div>Port: {vuln.port}/{vuln.protocol}</div>}
                            {vuln.cve && <div>CVE: {vuln.cve}</div>}
                          </div>
                        </div>
                        <div className="text-right text-sm text-muted-foreground">
                          {vuln.cvss3_score && (
                            <div>CVSS: {vuln.cvss3_score}</div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                  {vulnerabilities.length > 20 && (
                    <div className="text-center py-4">
                      <Button variant="outline">
                        View All {vulnerabilities.length} Vulnerabilities
                      </Button>
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-center py-12 text-muted-foreground">
                  <Database className="h-12 w-12 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No Vulnerabilities Found</h3>
                  <p>Upload a Nessus scan to see vulnerability data for this system.</p>
                  <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 rounded text-blue-800 dark:text-blue-200 text-sm">
                    âœ… Nessus UI is ready! Backend connection needed for data import.
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Reports Tab */}
        <TabsContent value="reports">
          <Card>
            <CardHeader>
              <CardTitle>Scan Reports</CardTitle>
            </CardHeader>
            <CardContent>
              {reports.length > 0 ? (
                <div className="space-y-3">
                  {reports.map((report) => (
                    <div key={report.id} className="border rounded-lg p-4 hover:bg-muted/50 transition-colors">
                      <div className="flex items-center justify-between">
                        <div className="space-y-1">
                          <h4 className="font-medium">{report.scan_name}</h4>
                          <div className="text-sm text-muted-foreground">
                            <div>File: {report.filename}</div>
                            <div>Scan Date: {new Date(report.scan_date).toLocaleDateString()}</div>
                            <div>Imported: {new Date(report.createdAt).toLocaleString()}</div>
                          </div>
                        </div>
                        <div className="text-right space-y-1">
                          <div className="text-sm">
                            <Badge variant="secondary">
                              {report.total_vulnerabilities} vulnerabilities
                            </Badge>
                          </div>
                          <div className="text-sm">
                            <Badge variant="outline">
                              {report.total_hosts} hosts
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-muted-foreground">
                  <FileText className="h-12 w-12 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No Scan Reports</h3>
                  <p>Upload Nessus scan files to see reports here.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Plugin Families Tab */}
        <TabsContent value="families">
          <Card>
            <CardHeader>
              <CardTitle>Top Plugin Families</CardTitle>
            </CardHeader>
            <CardContent>
              {stats?.topFamilies && stats.topFamilies.length > 0 ? (
                <div className="space-y-3">
                  {stats.topFamilies.map((family, index) => (
                    <div key={family.family} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center text-xs font-semibold">
                          {index + 1}
                        </div>
                        <span className="font-medium">{family.family}</span>
                      </div>
                      <Badge variant="secondary">{family.count} vulnerabilities</Badge>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-muted-foreground">
                  <Database className="h-12 w-12 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No Plugin Family Data</h3>
                  <p>Upload Nessus scans to see plugin family breakdown.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}