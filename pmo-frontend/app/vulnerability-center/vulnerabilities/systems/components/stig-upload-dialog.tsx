"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Checkbox } from "@/components/ui/checkbox"
import { Upload, FileText, AlertCircle, CheckCircle, Shield, Database } from "lucide-react"
import { toast } from "sonner"
import { cn } from "@/lib/utils"
import { StigImportProgressDialog } from "@/components/vulnerability-center/StigImportProgressDialog"

interface StigUploadDialogProps {
  systemId: number
  systemName?: string
  onUploadComplete: () => void
  children?: React.ReactNode
}

export function StigUploadDialog({ systemId, systemName, onUploadComplete, children }: StigUploadDialogProps) {
  const [open, setOpen] = useState(false)
  const [uploading, setUploading] = useState(false)
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [dragOver, setDragOver] = useState(false)
  const [retainStpResults, setRetainStpResults] = useState(true)
  const [hasExistingStps, setHasExistingStps] = useState(false)

  // Progress dialog state
  const [progressOpen, setProgressOpen] = useState(false)
  const [currentJobId, setCurrentJobId] = useState<string | null>(null)

  // Check for existing STPs when dialog opens
   
  useEffect(() => {
    if (open && systemId) {
      checkForExistingStps()
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open, systemId])

  const checkForExistingStps = async () => {
    try {
      const response = await fetch(`/api/stps?systemId=${systemId}&status=active`)
      if (response.ok) {
        const data = await response.json()
        setHasExistingStps(data.items && data.items.length > 0)
      }
    } catch (error) {
      console.error('Failed to check for existing STPs:', error)
      setHasExistingStps(false)
    }
  }

  const handleFileSelect = (file: File) => {
    // Validate file type
    const validExtensions = ['.ckl', '.cklb']
    const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'))

    if (!validExtensions.includes(fileExtension)) {
      toast.error("Invalid file type. Please upload a .ckl or .cklb file.")
      return
    }

    // Validate file size (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      toast.error("File too large. Maximum size is 10MB.")
      return
    }

    setSelectedFile(file)
  }

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()
    setDragOver(false)

    const files = Array.from(e.dataTransfer.files)
    if (files.length > 0) {
      handleFileSelect(files[0])
    }
  }

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()
    e.dataTransfer.dropEffect = 'copy'
    setDragOver(true)
  }

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()
    setDragOver(false)
  }

  const handleUpload = async () => {
    if (!selectedFile) {
      toast.error("Please select a file first")
      return
    }

    setUploading(true)
    try {
      const formData = new FormData()
      formData.append('file', selectedFile)
      formData.append('retainStpResults', retainStpResults.toString())

      const response = await fetch(`/api/vulnerability-center/systems/${systemId}/stig-import`, {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Failed to upload STIG file')
      }

      const result = await response.json()

      // Start progress tracking
      setCurrentJobId(result.jobId)
      setProgressOpen(true)

      // Close upload dialog and reset form
      setSelectedFile(null)
      setOpen(false)

      toast.success(`STIG import started successfully!`)

    } catch (error) {
      console.error('STIG upload error:', error)
      toast.error(error instanceof Error ? error.message : 'Failed to upload STIG file')
    } finally {
      setUploading(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {children || (
          <Button>
            <Upload className="h-4 w-4 mr-2" />
            Upload STIG File
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Upload STIG File</DialogTitle>
          <DialogDescription>
            Upload a STIG checklist file (.ckl or .cklb) to import findings.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* File Drop Zone */}
          <div
            className={cn(
              "border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer",
              dragOver
                ? "border-primary bg-primary/10"
                : selectedFile
                  ? "border-green-500 dark:border-green-400 bg-green-500/10 dark:bg-green-400/10"
                  : "border-muted-foreground/25 hover:border-muted-foreground/50 bg-background"
            )}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onClick={() => document.getElementById('file-upload')?.click()}
          >
            {selectedFile ? (
              <div className="flex flex-col items-center space-y-2">
                <CheckCircle className="h-8 w-8 text-green-600 dark:text-green-400" />
                <div className="text-sm font-medium">{selectedFile.name}</div>
                <div className="text-xs text-muted-foreground">
                  {(selectedFile.size / 1024).toFixed(1)} KB
                </div>
              </div>
            ) : (
              <div className="flex flex-col items-center space-y-2">
                <FileText className="h-8 w-8 text-muted-foreground" />
                <div className="text-sm font-medium">Drop STIG checklist file here or click to browse</div>
                <div className="text-xs text-muted-foreground">
                  Supports .ckl and .cklb files (max 10MB)
                </div>
              </div>
            )}
          </div>

          {/* Hidden File Input */}
          <Input
            id="file-upload"
            type="file"
            accept=".ckl,.cklb"
            className="hidden"
            onChange={(e) => {
              const file = e.target.files?.[0]
              if (file) handleFileSelect(file)
            }}
          />

          {/* File Info */}
          {selectedFile && (
            <div className="bg-muted p-3 rounded-lg space-y-2">
              <div className="text-sm font-medium">File Information:</div>
              <div className="text-xs space-y-1">
                <div><strong>Name:</strong> {selectedFile.name}</div>
                <div><strong>Size:</strong> {(selectedFile.size / 1024).toFixed(1)} KB</div>
                <div><strong>Type:</strong> {selectedFile.type || 'Unknown'}</div>
              </div>
            </div>
          )}

          {/* STP Data Retention Option */}
          {hasExistingStps && selectedFile && (
            <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4 space-y-3">
              <div className="flex items-start gap-2">
                <Shield className="h-5 w-5 text-green-600 dark:text-green-400 mt-0.5 flex-shrink-0" />
                <div>
                  <div className="text-sm font-medium text-green-800 dark:text-green-200">
                    Active Security Test Plans Detected
                  </div>
                  <div className="text-xs text-green-700 dark:text-green-300 mt-1">
                    This system has active STPs with test results that could be preserved during the STIG update.
                  </div>
                </div>
              </div>

              <div className="flex items-start space-x-2">
                <Checkbox
                  id="retain-stp-results"
                  checked={retainStpResults}
                  onCheckedChange={(checked) => setRetainStpResults(checked === true)}
                />
                <div className="grid gap-1.5 leading-none">
                  <label
                    htmlFor="retain-stp-results"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-green-800 dark:text-green-200"
                  >
                    Retain STP test results for matching vulnerability IDs
                  </label>
                  <p className="text-xs text-green-600 dark:text-green-400">
                    When enabled, vulnerabilities with the same ID will preserve their STP-updated status (Not_A_Finding, Not_Applicable, etc.)
                    instead of being overwritten by the new STIG scan data. This maintains your manual testing results.
                  </p>
                </div>
              </div>

              <div className="bg-green-100 dark:bg-green-900/30 rounded p-2">
                <div className="flex items-center gap-2 text-xs text-green-700 dark:text-green-300">
                  <Database className="h-3 w-3" />
                  <span>
                    <strong>Recommended:</strong> Keep this enabled to preserve your cybersecurity testing work.
                  </span>
                </div>
              </div>
            </div>
          )}

          {/* Upload Button */}
          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setOpen(false)} disabled={uploading}>
              Cancel
            </Button>
            <Button 
              onClick={handleUpload} 
              disabled={!selectedFile || uploading}
            >
              {uploading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Uploading...
                </>
              ) : (
                <>
                  <Upload className="h-4 w-4 mr-2" />
                  Upload
                </>
              )}
            </Button>
          </div>

          {/* Help Text */}
          <div className="bg-blue-500/10 dark:bg-blue-400/10 border border-blue-500/20 dark:border-blue-400/20 rounded-lg p-3">
            <div className="flex items-start space-x-2">
              <AlertCircle className="h-4 w-4 text-blue-600 dark:text-blue-400 mt-0.5" />
              <div className="text-xs text-blue-900 dark:text-blue-100">
                <div className="font-medium mb-1">Supported Formats:</div>
                <ul className="space-y-0.5 text-xs">
                  <li>• <strong>.ckl</strong> - STIG checklist files (XML format)</li>
                  <li>• <strong>.cklb</strong> - STIG checklist files (binary format)</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </DialogContent>

      {/* Progress Dialog */}
      <StigImportProgressDialog
        open={progressOpen}
        onOpenChange={setProgressOpen}
        jobId={currentJobId}
        systemId={systemId}
        systemName={systemName}
        onComplete={(result) => {
          console.error('STIG import completed:', result);
          // The progress dialog will handle the success message
          // Only refresh after user clicks OK
          setProgressOpen(false);
          setCurrentJobId(null);
          onUploadComplete();
        }}
        onError={(error) => {
          console.error('STIG import failed:', error);
          toast.error(`STIG import failed: ${error}`);
          setProgressOpen(false);
          setCurrentJobId(null);
        }}
      />
    </Dialog>
  )
}