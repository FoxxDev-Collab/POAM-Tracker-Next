import { cookies } from "next/headers";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import Link from "next/link";
import { ArrowLeft, Users } from "lucide-react";
import { fetchGroupScore, fetchSystemScore } from "@/lib/vulnerability-api";
import { ScoreCard } from "@/components/vulnerability-center/ScoreCard";
import { SystemsStigSummary } from "@/components/vulnerability-center/SystemsStigSummary";
import { RecalculateButton } from "@/components/vulnerability-center/RecalculateButton";

export const dynamic = "force-dynamic";

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:3001';

interface Group {
  id: number;
  package_id: number;
  name: string;
  description: string | null;
}

interface System {
  id: number;
  name: string;
  hostname?: string;
  group_id: number;
  package_id: number;
}

async function getAuthHeaders(): Promise<HeadersInit> {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  if (token) headers['Authorization'] = `Bearer ${token.value}`
  return headers
}

export default async function GroupDetailPage({ params }: { params: Promise<{ id: string; gid: string }> }) {
  const { id: pid, gid: g } = await params;
  const packageId = Number(pid);
  const gid = Number(g);

  let group: Group | null = null;
  let systems: System[] = [];

  try {
    // Fetch group data from API
    const headers = await getAuthHeaders();
    const groupResponse = await fetch(`${BACKEND_URL}/groups/${gid}`, { headers });

    if (!groupResponse.ok) {
      console.error(`Group fetch failed: ${groupResponse.status} ${groupResponse.statusText}`);
      return (
        <div className="max-w-7xl mx-auto space-y-4 p-6">
          <div className="text-sm text-muted-foreground">Group not found.</div>
          <Link href={`/vulnerability-center/vulnerabilities/${packageId}`}>
            <Button variant="outline">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Package
            </Button>
          </Link>
        </div>
      );
    }

    // Check content type before parsing
    const contentType = groupResponse.headers.get("content-type");
    if (contentType && contentType.includes("application/json")) {
      group = await groupResponse.json() as Group;
    } else {
      console.error("Group response is not JSON:", await groupResponse.text());
      throw new Error("Invalid response format");
    }

    // Fetch systems for this group
    const systemsResponse = await fetch(`${BACKEND_URL}/systems?groupId=${gid}`, { headers });

    if (systemsResponse.ok) {
      const contentType = systemsResponse.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        const responseData = await systemsResponse.json();
        // Handle both array and {items: array} response formats
        systems = Array.isArray(responseData) ? responseData : (responseData.items || []);
      }
    } else {
      console.error(`Systems fetch failed: ${systemsResponse.status}`);
      const errorText = await systemsResponse.text();
      console.error('Error response:', errorText);
    }

  } catch (error) {
    console.error("Error fetching group data:", error);
    return (
      <div className="max-w-7xl mx-auto space-y-4 p-6">
        <div className="text-sm text-red-600">Error loading group data</div>
        <Link href={`/vulnerability-center/vulnerabilities/${packageId}`}>
          <Button variant="outline">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Package
          </Button>
        </Link>
      </div>
    );
  }

  // Fetch group score
  const groupScore = await fetchGroupScore(gid);

  // Ensure systems is an array
  const systemsArray = Array.isArray(systems) ? systems : [];

  // Fetch system scores for all systems in the group
  const systemScoresPromises = systemsArray.map(async (system) => {
    try {
      const score = await fetchSystemScore(system.id);
      return {
        systemId: system.id,
        systemName: system.name,
        hostname: system.hostname,
        assessmentProgress: score?.assessmentProgress || 0,
        complianceScore: score?.complianceScore || 0,
        totalFindings: score?.totalFindings || 0,
        openFindings: score?.openFindings || 0,
        notReviewedFindings: score?.notReviewedFindings || 0,
        catIOpen: score?.catIOpen || 0,
        catIIOpen: score?.catIIOpen || 0,
        catIIIOpen: score?.catIIIOpen || 0,
      };
    } catch (error) {
      console.error(`Error fetching score for system ${system.id}:`, error);
      return {
        systemId: system.id,
        systemName: system.name,
        hostname: system.hostname,
        assessmentProgress: 0,
        complianceScore: 0,
        totalFindings: 0,
        openFindings: 0,
        notReviewedFindings: 0,
        catIOpen: 0,
        catIIOpen: 0,
        catIIIOpen: 0,
      };
    }
  });

  const systemStigDataResults = await Promise.all(systemScoresPromises);
  const systemStigData = systemStigDataResults.filter(data => data !== null);

  // Map systems to SystemItem format for the GroupSystemsManager with STIG data
  // Note: systemItems is defined but not used in current implementation
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const systemItems: GroupSystemItem[] = systemsArray.map(system => {
    const stigData = systemStigDataResults.find(data => data.systemId === system.id);
    return {
      id: system.id,
      package_id: system.package_id,
      group_id: system.group_id,
      name: system.name,
      description: system.hostname || "",
      hostname: system.hostname,
      assessmentProgress: stigData?.assessmentProgress || 0,
      complianceScore: stigData?.complianceScore || 0,
      totalFindings: stigData?.totalFindings || 0,
      openFindings: stigData?.openFindings || 0,
      notReviewedFindings: stigData?.notReviewedFindings || 0,
      catIOpen: stigData?.catIOpen || 0,
      catIIOpen: stigData?.catIIOpen || 0,
      catIIIOpen: stigData?.catIIIOpen || 0,
    };
  });

  return (
    <div className="max-w-7xl mx-auto space-y-6 p-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">{group?.name || 'Group'}</h1>
          {group?.description && (
            <p className="text-muted-foreground mt-1">{group.description}</p>
          )}
        </div>
        <div className="flex gap-2">
          <RecalculateButton type="group" id={gid} />
          <Link href={`/vulnerability-center/vulnerabilities/${packageId}`}>
            <Button variant="outline">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Package
            </Button>
          </Link>
        </div>
      </div>

      <Separator />

      {/* Group Score Card */}
      {groupScore && (
        <div className="grid gap-6 md:grid-cols-2">
          <ScoreCard
            title="Group STIG Compliance"
            assessmentCompleteness={groupScore.assessmentCompleteness}
            overallCompliance={groupScore.overallCompliance}
            totalFindings={groupScore.totalFindings}
            openFindings={groupScore.openFindings}
            notReviewedFindings={groupScore.notReviewedFindings}
            catIOpen={groupScore.catIOpen}
            catIIOpen={groupScore.catIIOpen}
            catIIIOpen={groupScore.catIIIOpen}
            worstEntityName={groupScore.worstSystemName}
            worstEntityType="asset"
          />

          {/* Group Statistics */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5" />
                Group Statistics
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-xs text-muted-foreground">Total Assets</p>
                  <p className="text-2xl font-semibold">{groupScore.totalSystems}</p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">Complete Assessments</p>
                  <p className="text-2xl font-semibold">{groupScore.completeAssessments}</p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">Controls Affected</p>
                  <p className="text-2xl font-semibold">{groupScore.controlsAffected}</p>
                </div>
                <div>
                  <p className="text-xs text-muted-foreground">Controls Compliant</p>
                  <p className="text-2xl font-semibold text-green-600 dark:text-green-400">
                    {groupScore.controlsCompliant}
                  </p>
                </div>
              </div>

              <Separator />

              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-sm">Best Asset Score</span>
                  <span className="text-sm font-medium text-green-600 dark:text-green-400">
                    {groupScore.highestSystemScore.toFixed(1)}%
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm">Worst Asset Score</span>
                  <span className="text-sm font-medium text-red-600 dark:text-red-400">
                    {groupScore.lowestSystemScore.toFixed(1)}%
                  </span>
                </div>
                {groupScore.worstSystemName && (
                  <p className="text-xs text-muted-foreground mt-2">
                    Worst asset: <span className="font-medium">{groupScore.worstSystemName}</span>
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Systems STIG Summary */}
      <SystemsStigSummary systems={systemStigData} packageId={packageId} />
    </div>
  );
}