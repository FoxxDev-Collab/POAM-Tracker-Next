"use client"

import { useCallback, useEffect, useState } from "react"
import { z } from "zod"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Progress } from "@/components/ui/progress"
import Link from "next/link"
import { Badge } from "@/components/ui/badge"
import { AlertTriangle, XCircle, AlertCircle } from "lucide-react"

export type SystemItem = {
  id: number;
  package_id: number;
  group_id: number | null;
  name: string;
  description: string;
  hostname?: string;
  assessmentProgress?: number;
  complianceScore?: number;
  totalFindings?: number;
  openFindings?: number;
  notReviewedFindings?: number;
  catIOpen?: number;
  catIIOpen?: number;
  catIIIOpen?: number;
}

const schema = z.object({
  name: z.string().min(1, "Required").max(100),
  description: z.string().max(1000).default("")
})

type FormInput = z.input<typeof schema>
type FormOutput = z.output<typeof schema>

export default function GroupSystemsManager({ gid, packageId: _packageId, initial }: { gid: number; packageId: number; initial: SystemItem[] }) {
  const [items, setItems] = useState<SystemItem[]>(initial)
  const [loading, setLoading] = useState(false)

  const getComplianceColor = (score: number) => {
    if (score >= 95) return 'text-green-600 dark:text-green-400';
    if (score >= 80) return 'text-yellow-600 dark:text-yellow-400';
    if (score >= 60) return 'text-orange-600 dark:text-orange-400';
    return 'text-red-600 dark:text-red-400';
  };

  const getStatusBadge = (system: SystemItem) => {
    if ((system.notReviewedFindings || 0) > 0) {
      return <Badge variant="secondary">Assessment Incomplete</Badge>;
    }
    if ((system.catIOpen || 0) > 0) {
      return <Badge variant="destructive">Critical Findings</Badge>;
    }
    if ((system.openFindings || 0) > 0) {
      return <Badge variant="warning">Open Findings</Badge>;
    }
    if ((system.complianceScore || 0) >= 95) {
      return <Badge variant="success">Compliant</Badge>;
    }
    return <Badge variant="secondary">Non-Compliant</Badge>;
  };

  const reload = useCallback(async () => {
    setLoading(true)
    try {
      const res = await fetch(`/api/systems?groupId=${gid}`, { cache: "no-store" })
      const json = await res.json()
      setItems(json.items ?? json ?? [])
    } finally {
      setLoading(false)
    }
  }, [gid])


  async function onUpdate(id: number, values: z.infer<typeof schema>) {
    const res = await fetch(`/api/systems/${id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(values) })
    if (!res.ok) {
      const j = await res.json().catch(() => ({}))
      alert(j.error ?? "Failed to update system")
      return false
    }
    reload()
    return true
  }

  async function onDelete(id: number) {
    if (!confirm("Delete this system?")) return
    const res = await fetch(`/api/systems/${id}`, { method: "DELETE" })
    if (!res.ok) {
      const j = await res.json().catch(() => ({}))
      alert(j.error ?? "Failed to delete system")
      return
    }
    setItems((xs) => xs.filter((x) => x.id !== id))
  }

  useEffect(() => {
    // Load enriched stats on mount
    reload()
  }, [reload])

  const sortedItems = [...items].sort((a, b) => {
    return (a.complianceScore || 0) - (b.complianceScore || 0);
  });

  return (
    <div className="space-y-6">
      {loading && <div className="text-sm text-muted-foreground">Loadingâ€¦</div>}
      {!loading && items.length === 0 && (
        <div className="text-sm text-muted-foreground">No assets in this group yet. Assets can be added from the RMF Center.</div>
      )}
      {!loading && items.length > 0 && (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Asset</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-center">Compliance</TableHead>
                <TableHead className="text-center">Assessment</TableHead>
                <TableHead className="text-center">CAT I</TableHead>
                <TableHead className="text-center">CAT II</TableHead>
                <TableHead className="text-center">CAT III</TableHead>
                <TableHead className="text-center">Total Open</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {sortedItems.map((asset) => (
                <TableRow key={asset.id}>
                  <TableCell>
                    <div>
                      <p className="font-medium">{asset.name}</p>
                      {asset.hostname && (
                        <p className="text-xs text-muted-foreground">{asset.hostname}</p>
                      )}
                      {asset.description && !asset.hostname && (
                        <p className="text-xs text-muted-foreground">{asset.description}</p>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>{getStatusBadge(asset)}</TableCell>
                  <TableCell className="text-center">
                    <div className="flex flex-col items-center gap-1">
                      <span className={`font-semibold ${getComplianceColor(asset.complianceScore || 0)}`}>
                        {(asset.complianceScore || 0).toFixed(1)}%
                      </span>
                      <Progress value={asset.complianceScore || 0} className="h-1.5 w-16" />
                    </div>
                  </TableCell>
                  <TableCell className="text-center">
                    <div className="flex flex-col items-center gap-1">
                      <span className="text-sm">
                        {(asset.assessmentProgress || 0).toFixed(0)}%
                      </span>
                      {(asset.notReviewedFindings || 0) > 0 && (
                        <span className="text-xs text-orange-600 dark:text-orange-400">
                          {asset.notReviewedFindings} pending
                        </span>
                      )}
                    </div>
                  </TableCell>
                  <TableCell className="text-center">
                    {(asset.catIOpen || 0) > 0 ? (
                      <div className="flex items-center justify-center gap-1">
                        <XCircle className="h-4 w-4 text-red-600 dark:text-red-400" />
                        <span className="font-medium text-red-600 dark:text-red-400">
                          {asset.catIOpen}
                        </span>
                      </div>
                    ) : (
                      <span className="text-muted-foreground">0</span>
                    )}
                  </TableCell>
                  <TableCell className="text-center">
                    {(asset.catIIOpen || 0) > 0 ? (
                      <div className="flex items-center justify-center gap-1">
                        <AlertTriangle className="h-4 w-4 text-orange-600 dark:text-orange-400" />
                        <span className="font-medium text-orange-600 dark:text-orange-400">
                          {asset.catIIOpen}
                        </span>
                      </div>
                    ) : (
                      <span className="text-muted-foreground">0</span>
                    )}
                  </TableCell>
                  <TableCell className="text-center">
                    {(asset.catIIIOpen || 0) > 0 ? (
                      <div className="flex items-center justify-center gap-1">
                        <AlertCircle className="h-4 w-4 text-yellow-600 dark:text-yellow-400" />
                        <span className="font-medium text-yellow-600 dark:text-yellow-400">
                          {asset.catIIIOpen}
                        </span>
                      </div>
                    ) : (
                      <span className="text-muted-foreground">0</span>
                    )}
                  </TableCell>
                  <TableCell className="text-center">
                    <span className={(asset.openFindings || 0) > 0 ? 'font-semibold' : 'text-muted-foreground'}>
                      {asset.openFindings || 0}
                    </span>
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-wrap gap-2">
                      <Link href={`/vulnerability-center/vulnerabilities/systems/${asset.id}`} className="inline-flex">
                        <Button variant="outline" size="sm">View Details</Button>
                      </Link>
                      <EditSystemDialog item={asset} onSave={onUpdate} />
                      <Button variant="destructive" size="sm" onClick={() => onDelete(asset.id)}>Delete</Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      )}
    </div>
  )
}

function EditSystemDialog({ item, onSave }: { item: SystemItem; onSave: (id: number, v: z.infer<typeof schema>) => Promise<boolean> }) {
  const form = useForm<FormInput, unknown, FormOutput>({ resolver: zodResolver(schema), defaultValues: { name: item.name, description: item.description } })
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="secondary" size="sm">Edit</Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Asset</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form
            className="grid gap-3"
            onSubmit={form.handleSubmit(async (v) => {
              const ok = await onSave(item.id, v)
              if (ok) (document.activeElement as HTMLElement | null)?.blur()
            })}
          >
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Name</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              <Button type="submit">Save</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
}
