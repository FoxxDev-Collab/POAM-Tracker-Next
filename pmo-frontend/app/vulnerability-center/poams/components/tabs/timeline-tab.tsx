'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { Calendar, ChevronLeft, ChevronRight, Clock, Target, AlertTriangle } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface TimelineEvent {
  id: string;
  type: 'poam' | 'milestone';
  title: string;
  date: string;
  status: string;
  priority?: string;
  severity?: string;
  poam_id?: number;
  poam_number?: string;
  milestone_type?: string;
  completion_percentage?: number;
  overdue: boolean;
}

interface TimelineTabProps {
  packageId?: number;
  groupId?: number;
}

export default function TimelineTab({ packageId, groupId }: TimelineTabProps) {
  const router = useRouter();
  const [events, setEvents] = useState<TimelineEvent[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [viewMode, setViewMode] = useState<'month' | 'week'>('month');
  const [filterType, setFilterType] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');

  const fetchTimelineData = useCallback(async (): Promise<void> => {
    try {
      setLoading(true);
      
      // Fetch POAMs
      let poamUrl = '/api/poams';
      const poamParams = new URLSearchParams();
      if (packageId) poamParams.append('package_id', packageId.toString());
      if (groupId) poamParams.append('group_id', groupId.toString());
      if (poamParams.toString()) poamUrl += `?${poamParams.toString()}`;

      const poamRes = await fetch(poamUrl);
      const poamData = poamRes.ok ? await poamRes.json() : { items: [] };

      // Fetch Milestones
      let milestoneUrl = '/api/milestones';
      const milestoneParams = new URLSearchParams();
      if (packageId) milestoneParams.append('package_id', packageId.toString());
      if (groupId) milestoneParams.append('group_id', groupId.toString());
      if (milestoneParams.toString()) milestoneUrl += `?${milestoneParams.toString()}`;

      const milestoneRes = await fetch(milestoneUrl);
      const milestoneData = milestoneRes.ok ? await milestoneRes.json() : { items: [] };

      // Convert to timeline events
      const timelineEvents: TimelineEvent[] = [];

      // Add POAM events
      (poamData.items || []).forEach((poam: {
        id: number;
        poam_number: string;
        title: string;
        target_completion_date?: string;
        status: string;
        priority: string;
        severity: string;
      }) => {
        if (poam.target_completion_date) {
          timelineEvents.push({
            id: `poam-${poam.id}`,
            type: 'poam',
            title: `${poam.poam_number}: ${poam.title}`,
            date: poam.target_completion_date,
            status: poam.status,
            priority: poam.priority,
            severity: poam.severity,
            poam_id: poam.id,
            poam_number: poam.poam_number,
            overdue: new Date(poam.target_completion_date) < new Date() && 
                    !['Completed', 'Closed', 'Cancelled'].includes(poam.status)
          });
        }
      });

      // Add milestone events
      (milestoneData.items || []).forEach((milestone: {
        id: number;
        title: string;
        target_date?: string;
        status: string;
        milestone_type: string;
        completion_percentage?: number;
        poam_id: number;
        poam?: { poam_number: string };
      }) => {
        if (milestone.target_date) {
          timelineEvents.push({
            id: `milestone-${milestone.id}`,
            type: 'milestone',
            title: milestone.title,
            date: milestone.target_date,
            status: milestone.status,
            milestone_type: milestone.milestone_type,
            completion_percentage: milestone.completion_percentage,
            poam_id: milestone.poam_id,
            poam_number: milestone.poam?.poam_number,
            overdue: new Date(milestone.target_date) < new Date() && 
                    !['Completed', 'Cancelled'].includes(milestone.status)
          });
        }
      });

      // Sort by date
      timelineEvents.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

      setEvents(timelineEvents);
    } catch (error) {
      console.error('Failed to fetch timeline data:', error);
    } finally {
      setLoading(false);
    }
  }, [packageId, groupId]);

  useEffect(() => {
    fetchTimelineData();
  }, [fetchTimelineData, currentDate]);

  const filteredEvents = events.filter(event => {
    const matchesType = filterType === 'all' || event.type === filterType;
    const matchesStatus = filterStatus === 'all' || event.status === filterStatus;
    return matchesType && matchesStatus;
  });

  const getEventColor = (event: TimelineEvent) => {
    if (event.overdue) return 'bg-red-100 border-red-400 text-red-800';
    
    if (event.type === 'poam') {
      switch (event.severity) {
        case 'Critical': return 'bg-red-100 border-red-400 text-red-800';
        case 'High': return 'bg-orange-100 border-orange-400 text-orange-800';
        case 'Medium': return 'bg-yellow-100 border-yellow-400 text-yellow-800';
        case 'Low': return 'bg-green-100 border-green-400 text-green-800';
        default: return 'bg-blue-100 border-blue-400 text-blue-800';
      }
    } else {
      switch (event.status) {
        case 'Completed': return 'bg-green-100 border-green-400 text-green-800';
        case 'In_Progress': return 'bg-blue-100 border-blue-400 text-blue-800';
        case 'Delayed': return 'bg-red-100 border-red-400 text-red-800';
        default: return 'bg-gray-100 border-gray-400 text-gray-800';
      }
    }
  };

  const getStatusIcon = (event: TimelineEvent) => {
    if (event.overdue) return <AlertTriangle className="h-3 w-3" />;
    if (event.type === 'poam') return <Calendar className="h-3 w-3" />;
    return <Target className="h-3 w-3" />;
  };

  const navigateMonth = (direction: 'prev' | 'next') => {
    const newDate = new Date(currentDate);
    if (direction === 'prev') {
      newDate.setMonth(currentDate.getMonth() - 1);
    } else {
      newDate.setMonth(currentDate.getMonth() + 1);
    }
    setCurrentDate(newDate);
  };

  const navigateWeek = (direction: 'prev' | 'next') => {
    const newDate = new Date(currentDate);
    if (direction === 'prev') {
      newDate.setDate(currentDate.getDate() - 7);
    } else {
      newDate.setDate(currentDate.getDate() + 7);
    }
    setCurrentDate(newDate);
  };

  const navigate = (direction: 'prev' | 'next') => {
    if (viewMode === 'month') {
      navigateMonth(direction);
    } else {
      navigateWeek(direction);
    }
  };

  const goToToday = () => {
    setCurrentDate(new Date());
  };

  const formatDateHeader = () => {
    if (viewMode === 'month') {
      return currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
    } else {
      const startOfWeek = new Date(currentDate);
      startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      
      return `${startOfWeek.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${endOfWeek.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
    }
  };

  const getEventsForDateRange = () => {
    if (viewMode === 'month') {
      const year = currentDate.getFullYear();
      const month = currentDate.getMonth();
      
      return filteredEvents.filter(event => {
        const eventDate = new Date(event.date);
        return eventDate.getFullYear() === year && eventDate.getMonth() === month;
      });
    } else {
      const startOfWeek = new Date(currentDate);
      startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      
      return filteredEvents.filter(event => {
        const eventDate = new Date(event.date);
        return eventDate >= startOfWeek && eventDate <= endOfWeek;
      });
    }
  };

  const groupEventsByDate = (events: TimelineEvent[]) => {
    const grouped: Record<string, TimelineEvent[]> = {};
    events.forEach(event => {
      const dateKey = event.date.split('T')[0];
      if (!grouped[dateKey]) {
        grouped[dateKey] = [];
      }
      grouped[dateKey].push(event);
    });
    return grouped;
  };

  const currentRangeEvents = getEventsForDateRange();
  const groupedEvents = groupEventsByDate(currentRangeEvents);

  // Calculate summary stats
  const totalEvents = filteredEvents.length;
  const overdueEvents = filteredEvents.filter(e => e.overdue).length;
  const completedEvents = filteredEvents.filter(e => e.status === 'Completed').length;
  const thisWeekEvents = filteredEvents.filter(event => {
    const eventDate = new Date(event.date);
    const now = new Date();
    const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay()));
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);
    return eventDate >= startOfWeek && eventDate <= endOfWeek;
  }).length;

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Total Events</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{totalEvents}</div>
            <p className="text-xs text-muted-foreground">POAMs & milestones</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">This Week</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">{thisWeekEvents}</div>
            <p className="text-xs text-muted-foreground">Due this week</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Completed</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{completedEvents}</div>
            <p className="text-xs text-muted-foreground">Finished on time</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Overdue</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{overdueEvents}</div>
            <p className="text-xs text-muted-foreground">Past target date</p>
          </CardContent>
        </Card>
      </div>

      {/* Controls */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => navigate('prev')}
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={goToToday}
                >
                  Today
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => navigate('next')}
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
              
              <h2 className="text-lg font-semibold">{formatDateHeader()}</h2>
            </div>

            <div className="flex items-center gap-4">
              <Select value={viewMode} onValueChange={(value: 'month' | 'week') => setViewMode(value)}>
                <SelectTrigger className="w-28">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="month">Month</SelectItem>
                  <SelectItem value="week">Week</SelectItem>
                </SelectContent>
              </Select>

              <Select value={filterType} onValueChange={setFilterType}>
                <SelectTrigger className="w-32">
                  <SelectValue placeholder="All Types" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Types</SelectItem>
                  <SelectItem value="poam">POAMs</SelectItem>
                  <SelectItem value="milestone">Milestones</SelectItem>
                </SelectContent>
              </Select>

              <Select value={filterStatus} onValueChange={setFilterStatus}>
                <SelectTrigger className="w-36">
                  <SelectValue placeholder="All Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="Open">Open</SelectItem>
                  <SelectItem value="In_Progress">In Progress</SelectItem>
                  <SelectItem value="Completed">Completed</SelectItem>
                  <SelectItem value="Delayed">Delayed</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Timeline View */}
      <Card>
        <CardContent className="p-6">
          {Object.keys(groupedEvents).length === 0 ? (
            <div className="text-center py-12">
              <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No events found for the selected time period.</p>
            </div>
          ) : (
            <div className="space-y-6">
              {Object.entries(groupedEvents)
                .sort(([a], [b]) => new Date(a).getTime() - new Date(b).getTime())
                .map(([date, dayEvents]) => (
                  <div key={date} className="relative">
                    {/* Date Header */}
                    <div className="flex items-center gap-4 mb-4">
                      <div className="flex-shrink-0 w-24">
                        <div className="text-lg font-semibold">
                          {new Date(date).toLocaleDateString('en-US', { 
                            weekday: 'short',
                            month: 'short', 
                            day: 'numeric' 
                          })}
                        </div>
                        <div className="text-sm text-gray-500">
                          {new Date(date).getFullYear()}
                        </div>
                      </div>
                      <div className="flex-1 border-t border-gray-200"></div>
                    </div>

                    {/* Events for this date */}
                    <div className="ml-8 space-y-3">
                      {dayEvents.map(event => (
                        <div
                          key={event.id}
                          className={`p-3 rounded-lg border-l-4 cursor-pointer hover:shadow-md transition-shadow ${getEventColor(event)}`}
                          onClick={() => {
                            if (event.poam_id) {
                              router.push(`/vulnerability-center/poams/${event.poam_id}`);
                            }
                          }}
                        >
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                {getStatusIcon(event)}
                                <Badge variant="outline" className="text-xs">
                                  {event.type === 'poam' ? 'POAM' : 'Milestone'}
                                </Badge>
                                {event.overdue && (
                                  <Badge variant="destructive" className="text-xs">
                                    Overdue
                                  </Badge>
                                )}
                              </div>
                              
                              <h4 className="font-medium">{event.title}</h4>
                              
                              <div className="text-xs text-gray-600 mt-1">
                                {event.type === 'milestone' && event.poam_number && (
                                  <span>POAM: {event.poam_number} • </span>
                                )}
                                Status: {event.status.replace('_', ' ')}
                                {event.completion_percentage !== undefined && (
                                  <span> • Progress: {event.completion_percentage}%</span>
                                )}
                              </div>
                            </div>
                            
                            <div className="text-xs text-gray-500">
                              <Clock className="h-3 w-3 inline mr-1" />
                              Target
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}