"use client"

import { useState, useEffect } from "react"
import { Plus, Package, Shield, Server, Users, BarChart3, Edit, Trash2 } from "lucide-react"
import Link from "next/link"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { toast } from "sonner"

interface Package {
  id: number
  name: string
  description: string | null
  atoExpirationDate: string | null
  createdAt: string
  updatedAt: string
  _count?: {
    systems: number
    groups: number
  }
  stats?: {
    totalFindings: number
    criticalFindings: number
    highFindings: number
    openItems: number
    complianceScore: number
  }
}

export default function PackagesManagementPage() {
  const [packages, setPackages] = useState<Package[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [createDialogOpen, setCreateDialogOpen] = useState(false)
  const [editingPackage, setEditingPackage] = useState<Package | null>(null)
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    atoExpirationDate: ""
  })

  const fetchPackages = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/packages')
      if (response.ok) {
        const data = await response.json()
        setPackages(data.items || data || [])
      } else {
        throw new Error('Failed to fetch packages')
      }
    } catch (error) {
      console.error('Error fetching packages:', error)
      toast.error("Failed to load packages")
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchPackages()
  }, [])

  const handleCreatePackage = async () => {
    try {
      // Map frontend field names to backend field names
      const payload = {
        name: formData.name,
        description: formData.description,
        authorizationExpiry: formData.atoExpirationDate  // Map atoExpirationDate to authorizationExpiry
      }
      const response = await fetch('/api/packages', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })

      if (!response.ok) throw new Error('Failed to create package')

      toast.success("Package created successfully")
      setCreateDialogOpen(false)
      setFormData({ name: "", description: "", atoExpirationDate: "" })
      fetchPackages()
    } catch (error) {
      console.error('Error creating package:', error)
      toast.error("Failed to create package")
    }
  }

  const handleUpdatePackage = async () => {
    if (!editingPackage) return

    try {
      // Map frontend field names to backend field names
      const payload = {
        name: formData.name,
        description: formData.description,
        authorizationExpiry: formData.atoExpirationDate  // Map atoExpirationDate to authorizationExpiry
      }
      const response = await fetch(`/api/packages/${editingPackage.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })

      if (!response.ok) throw new Error('Failed to update package')

      toast.success("Package updated successfully")
      setEditingPackage(null)
      setFormData({ name: "", description: "", atoExpirationDate: "" })
      fetchPackages()
    } catch (error) {
      console.error('Error updating package:', error)
      toast.error("Failed to update package")
    }
  }

  const handleDeletePackage = async (id: number) => {
    if (!confirm("Are you sure you want to delete this package? This action cannot be undone.")) {
      return
    }

    try {
      const response = await fetch(`/api/packages/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) throw new Error('Failed to delete package')

      toast.success("Package deleted successfully")
      fetchPackages()
    } catch (error) {
      console.error('Error deleting package:', error)
      toast.error("Failed to delete package")
    }
  }

  const filteredPackages = packages.filter(pkg => 
    pkg.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    pkg.description?.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const getComplianceColor = (score: number = 0) => {
    if (score >= 90) return "text-green-600"
    if (score >= 70) return "text-yellow-600"
    return "text-red-600"
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-2">
            <Package className="h-8 w-8" />
            VMP: ATO Packages
          </h1>
          <p className="text-muted-foreground">
            Manage Vulnerabilities for each Authorization Package
          </p>
        </div>
        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              New Package
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create New Package</DialogTitle>
              <DialogDescription>
                Add a new authorization package to track security compliance
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="name">Package Name</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  placeholder="e.g., Production Web Services"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  placeholder="Describe the package and its scope..."
                  rows={3}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="ato-date">ATO Expiration Date</Label>
                <Input
                  id="ato-date"
                  type="date"
                  value={formData.atoExpirationDate}
                  onChange={(e) => setFormData({...formData, atoExpirationDate: e.target.value})}
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setCreateDialogOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleCreatePackage} disabled={!formData.name}>
                Create Package
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Search */}
      <div className="flex gap-4">
        <Input
          placeholder="Search packages..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="max-w-sm"
        />
      </div>

      {/* Package Grid */}
      {loading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader>
                <div className="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-full"></div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                  <div className="h-4 bg-gray-200 rounded w-2/3"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : filteredPackages.length === 0 ? (
        <Card>
          <CardContent className="text-center py-12">
            <Package className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Packages Found</h3>
            <p className="text-muted-foreground mb-4">
              {searchTerm ? "No packages match your search" : "Create your first package to get started"}
            </p>
            {!searchTerm && (
              <Button onClick={() => setCreateDialogOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Create First Package
              </Button>
            )}
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredPackages.map((pkg) => (
            <Card key={pkg.id} className="hover:shadow-lg transition-shadow">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <CardTitle className="flex items-center gap-2">
                      <Shield className="h-5 w-5 text-primary" />
                      {pkg.name}
                    </CardTitle>
                    <CardDescription className="mt-1">
                      {pkg.description || "No description provided"}
                    </CardDescription>
                  </div>
                  <div className="flex gap-1">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => {
                        setEditingPackage(pkg)
                        setFormData({
                          name: pkg.name,
                          description: pkg.description || "",
                          atoExpirationDate: pkg.atoExpirationDate || ""
                        })
                      }}
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => handleDeletePackage(pkg.id)}
                    >
                      <Trash2 className="h-4 w-4 text-red-600" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {/* Package Stats */}
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div className="flex items-center gap-2">
                      <Users className="h-4 w-4 text-muted-foreground" />
                      <span>{pkg._count?.groups || 0} Groups</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Server className="h-4 w-4 text-muted-foreground" />
                      <span>{pkg._count?.systems || 0} Systems</span>
                    </div>
                  </div>

                  {/* Compliance Score */}
                  {pkg.stats && (
                    <div className="pt-3 border-t">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm text-muted-foreground">Compliance</span>
                        <span className={`text-sm font-semibold ${getComplianceColor(pkg.stats.complianceScore)}`}>
                          {pkg.stats.complianceScore || 0}%
                        </span>
                      </div>
                      <div className="flex gap-2 flex-wrap">
                        {pkg.stats.criticalFindings > 0 && (
                          <Badge variant="destructive" className="text-xs">
                            {pkg.stats.criticalFindings} Critical
                          </Badge>
                        )}
                        {pkg.stats.highFindings > 0 && (
                          <Badge variant="secondary" className="text-xs">
                            {pkg.stats.highFindings} High
                          </Badge>
                        )}
                        {pkg.stats.openItems > 0 && (
                          <Badge variant="outline" className="text-xs">
                            {pkg.stats.openItems} Open
                          </Badge>
                        )}
                      </div>
                    </div>
                  )}

                  {/* ATO Expiration */}
                  {pkg.atoExpirationDate && (
                    <div className="pt-3 border-t">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-muted-foreground">ATO Expires</span>
                        <span className="font-medium">
                          {new Date(pkg.atoExpirationDate).toLocaleDateString()}
                        </span>
                      </div>
                    </div>
                  )}

                  {/* Actions */}
                  <div className="pt-3 border-t">
                    <Link href={`/vulnerability-center/vulnerabilities/${pkg.id}`}>
                      <Button className="w-full" variant="outline">
                        <BarChart3 className="h-4 w-4 mr-2" />
                        View Details
                      </Button>
                    </Link>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* Edit Dialog */}
      <Dialog open={!!editingPackage} onOpenChange={(open) => !open && setEditingPackage(null)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Package</DialogTitle>
            <DialogDescription>
              Update the package information
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="edit-name">Package Name</Label>
              <Input
                id="edit-name"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="edit-description">Description</Label>
              <Textarea
                id="edit-description"
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                rows={3}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="edit-ato-date">ATO Expiration Date</Label>
              <Input
                id="edit-ato-date"
                type="date"
                value={formData.atoExpirationDate}
                onChange={(e) => setFormData({...formData, atoExpirationDate: e.target.value})}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setEditingPackage(null)}>
              Cancel
            </Button>
            <Button onClick={handleUpdatePackage}>
              Save Changes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}