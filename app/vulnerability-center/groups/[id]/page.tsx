"use client"

import { useEffect, useState, use } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { 
  ArrowLeft, 
  Plus, 
  Edit,
  Trash2,
  Server, 
  Network,
  Eye,
  Upload,
  FileCheck,
  Shield,
  AlertTriangle,
  CheckCircle,
  Clock,
  TrendingUp,
  BarChart3,
  Target,
  Activity
} from "lucide-react"
import { Progress } from "@/components/ui/progress"

interface Group {
  id: number
  name: string
  description: string | null
  packageId: number
  systems?: System[]
  package?: {
    id: number
    name: string
  }
  _count?: {
    systems: number
  }
}

interface System {
  id: number
  name: string
  description: string | null
  ipAddress: string | null
  operatingSystem: string | null
  groupId: number
  packageId: number
  createdAt: string
  updatedAt: string
  _count?: {
    stigFindings: number
    stigScans: number
  }
  stigFindings?: StigFinding[]
  vulnerabilityBreakdown?: {
    catI: number
    catII: number
    catIII: number
    total: number
  }
}

interface StigFinding {
  id: number
  severity: 'high' | 'medium' | 'low'
  status: 'Open' | 'NotAFinding' | 'Not_Applicable' | 'Not_Reviewed'
  ruleTitle: string
  lastSeen: string
}

interface VulnMetrics {
  totalFindings: number
  openFindings: number
  closedFindings: number
  highSeverity: number
  mediumSeverity: number
  lowSeverity: number
  complianceRate: number
  systemsWithFindings: number
  lastScanDate: string | null
}

export default function GroupDetailPage({ params }: { params: Promise<{ id: string }> }) {
  const resolvedParams = use(params)
  const router = useRouter()
  const [group, setGroup] = useState<Group | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [editDialogOpen, setEditDialogOpen] = useState(false)
  const [editFormData, setEditFormData] = useState<Partial<Group>>({})
  const [systemDialogOpen, setSystemDialogOpen] = useState(false)
  const [newSystem, setNewSystem] = useState({
    name: '',
    description: '',
    ipAddress: '',
    operatingSystem: ''
  })
  const [saving, setSaving] = useState(false)
  const [deleteSystemId, setDeleteSystemId] = useState<number | null>(null)
  const [vulnMetrics, setVulnMetrics] = useState<VulnMetrics | null>(null)

  useEffect(() => {
    fetchGroupData()
  }, [resolvedParams.id])

  const fetchGroupData = async () => {
    try {
      setLoading(true)
      const response = await fetch(`/api/groups/${resolvedParams.id}`)
      
      if (!response.ok) {
        if (response.status === 404) {
          setError("Group not found")
        } else {
          setError("Failed to load group data")
        }
        return
      }

      const data = await response.json()
      
      // If we have systems, fetch their STIG findings for the table
      if (data.systems && data.systems.length > 0) {
        const systemsWithFindings = await Promise.all(
          data.systems.map(async (system: System) => {
            try {
              const findingsResponse = await fetch(`/api/vulnerabilities/systems?system_id=${system.id}`)
              if (findingsResponse.ok) {
                const findings = await findingsResponse.json()
                return { ...system, stigFindings: findings }
              }
            } catch (err) {
              console.error(`Error fetching findings for system ${system.id}:`, err)
            }
            return system
          })
        )
        data.systems = systemsWithFindings
      }
      
      setGroup(data)
      setEditFormData(data)
      
      // Fetch vulnerability metrics for this group
      await fetchVulnerabilityMetrics()
    } catch (err) {
      console.error("Error fetching group:", err)
      setError("Failed to load group data")
    } finally {
      setLoading(false)
    }
  }

  const fetchVulnerabilityMetrics = async () => {
    try {
      const response = await fetch(`/api/vulnerabilities/group/${resolvedParams.id}`)
      if (response.ok) {
        const metrics = await response.json()
        setVulnMetrics(metrics)
      }
    } catch (err) {
      console.error("Error fetching vulnerability metrics:", err)
    }
  }

  const handleEditGroup = async () => {
    if (!group) return
    setSaving(true)

    try {
      const response = await fetch(`/api/groups/${group.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(editFormData)
      })

      if (!response.ok) throw new Error('Failed to update group')

      const updated = await response.json()
      setGroup(updated)
      setEditDialogOpen(false)
      // Show success message if you have toast
    } catch (err) {
      console.error("Error updating group:", err)
      // Show error message if you have toast
    } finally {
      setSaving(false)
    }
  }

  const handleCreateSystem = async () => {
    if (!group || !newSystem.name) return
    setSaving(true)

    try {
      const response = await fetch('/api/systems', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...newSystem,
          groupId: group.id,
          packageId: group.packageId
        })
      })

      if (!response.ok) throw new Error('Failed to create system')

      await fetchGroupData()
      setSystemDialogOpen(false)
      setNewSystem({ name: '', description: '', ipAddress: '', operatingSystem: '' })
      // Show success message if you have toast
    } catch (err) {
      console.error("Error creating system:", err)
      // Show error message if you have toast
    } finally {
      setSaving(false)
    }
  }

  const handleDeleteSystem = async (systemId: number) => {
    try {
      const response = await fetch(`/api/systems/${systemId}`, {
        method: 'DELETE'
      })

      if (!response.ok) throw new Error('Failed to delete system')

      await fetchGroupData()
      // Show success message if you have toast
    } catch (err) {
      console.error("Error deleting system:", err)
      // Show error message if you have toast
    } finally {
      setDeleteSystemId(null)
    }
  }

  if (loading) {
    return (
      <div className="p-6 space-y-6">
        <div className="rounded-md border bg-card text-card-foreground p-5">
          <Skeleton className="h-8 w-48 mb-2" />
          <Skeleton className="h-4 w-64" />
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {[...Array(4)].map((_, i) => (
            <Card key={i}>
              <CardHeader className="pb-2">
                <Skeleton className="h-4 w-32" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-8 w-16" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  if (error || !group) {
    return (
      <div className="max-w-4xl mx-auto space-y-4 p-6">
        <div className="text-sm text-muted-foreground">{error || "Group not found."}</div>
        <Button variant="outline" onClick={() => router.back()}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back
        </Button>
      </div>
    )
  }

  const totalSystems = group.systems?.length || 0

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="sm" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Package
          </Button>
          <div>
            <h1 className="text-2xl font-bold flex items-center gap-2">
              <Shield className="h-6 w-6 text-primary" />
              {group.name} â€” Vulnerability Management
            </h1>
            <p className="text-muted-foreground">
              Security posture and compliance overview for this group
            </p>
            {group.package && (
              <div className="flex items-center gap-2 text-sm text-muted-foreground mt-1">
                <span>Package:</span>
                <Badge variant="outline">{group.package.name}</Badge>
              </div>
            )}
          </div>
        </div>
        <div className="flex gap-2">
          <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>
            <DialogTrigger asChild>
              <Button size="sm" variant="outline">
                <Edit className="h-4 w-4 mr-2" />
                Edit Group
              </Button>
            </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Edit Group Details</DialogTitle>
                  <DialogDescription>
                    Update the name and description for this group.
                  </DialogDescription>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  <div className="space-y-2">
                    <Label htmlFor="groupName">Group Name</Label>
                    <Input
                      id="groupName"
                      value={editFormData.name || ''}
                      onChange={(e) => setEditFormData({...editFormData, name: e.target.value})}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="groupDescription">Description</Label>
                    <Textarea
                      id="groupDescription"
                      value={editFormData.description || ''}
                      onChange={(e) => setEditFormData({...editFormData, description: e.target.value})}
                      rows={3}
                    />
                  </div>
                </div>
                <DialogFooter>
                  <Button variant="outline" onClick={() => setEditDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleEditGroup} disabled={saving}>
                    {saving ? "Saving..." : "Save Changes"}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          <Button size="sm" onClick={fetchVulnerabilityMetrics} disabled={loading}>
            <Activity className="h-4 w-4 mr-2" />
            Refresh Data
          </Button>
        </div>
      </div>

      {/* Vulnerability Overview Dashboard */}
      {vulnMetrics && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card className="border-t-4 border-red-500">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm flex items-center gap-2">
                <AlertTriangle className="h-4 w-4 text-red-500" />
                Open Findings
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-red-600 mb-2">{vulnMetrics.openFindings}</div>
              <p className="text-xs text-muted-foreground">Require immediate attention</p>
            </CardContent>
          </Card>

          <Card className="border-t-4 border-primary">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm flex items-center gap-2">
                <Target className="h-4 w-4 text-primary" />
                Compliance Rate
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold mb-2">
                <span className={
                  vulnMetrics.complianceRate >= 90 ? 'text-green-600' :
                  vulnMetrics.complianceRate >= 75 ? 'text-yellow-600' :
                  'text-red-600'
                }>
                  {vulnMetrics.complianceRate}%
                </span>
              </div>
              <Progress value={vulnMetrics.complianceRate} className="mb-2" />
              <p className="text-xs text-muted-foreground">
                {vulnMetrics.closedFindings} of {vulnMetrics.totalFindings} compliant
              </p>
            </CardContent>
          </Card>

          <Card className="border-t-4 border-orange-500">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm flex items-center gap-2">
                <TrendingUp className="h-4 w-4 text-orange-500" />
                High Severity
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-red-600 mb-2">{vulnMetrics.highSeverity}</div>
              <p className="text-xs text-muted-foreground">CAT I findings</p>
            </CardContent>
          </Card>

          <Card className="border-t-4 border-blue-500">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm flex items-center gap-2">
                <BarChart3 className="h-4 w-4 text-blue-500" />
                Systems Scanned
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold mb-2">{vulnMetrics.systemsWithFindings}</div>
              <p className="text-xs text-muted-foreground">of {totalSystems} total systems</p>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Severity Breakdown */}
      {vulnMetrics && vulnMetrics.totalFindings > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart3 className="h-5 w-5 text-primary" />
              Severity Distribution
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium text-red-600">CAT I (High)</span>
                  <span className="text-sm">{vulnMetrics.highSeverity}</span>
                </div>
                <Progress value={(vulnMetrics.highSeverity / vulnMetrics.totalFindings) * 100} className="h-2" />
              </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium text-orange-600">CAT II (Medium)</span>
                  <span className="text-sm">{vulnMetrics.mediumSeverity}</span>
                </div>
                <Progress value={(vulnMetrics.mediumSeverity / vulnMetrics.totalFindings) * 100} className="h-2" />
              </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium text-yellow-600">CAT III (Low)</span>
                  <span className="text-sm">{vulnMetrics.lowSeverity}</span>
                </div>
                <Progress value={(vulnMetrics.lowSeverity / vulnMetrics.totalFindings) * 100} className="h-2" />
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Systems Vulnerability Table */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle className="flex items-center gap-2">
              <Server className="h-5 w-5 text-primary" />
              Systems Vulnerability Summary
            </CardTitle>
            <Dialog open={systemDialogOpen} onOpenChange={setSystemDialogOpen}>
              <DialogTrigger asChild>
                <Button size="sm" className="bg-primary text-primary-foreground hover:bg-primary/90">
                  <Plus className="h-4 w-4 mr-2" />
                  Add System
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-lg">
                <DialogHeader>
                  <DialogTitle>Add New System</DialogTitle>
                  <DialogDescription>
                    Add a new system to this group for vulnerability scanning.
                  </DialogDescription>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  <div className="space-y-2">
                    <Label htmlFor="systemName">System Name *</Label>
                    <Input
                      id="systemName"
                      value={newSystem.name}
                      onChange={(e) => setNewSystem({...newSystem, name: e.target.value})}
                      placeholder="e.g., Web Server 01"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="systemDescription">Description</Label>
                    <Textarea
                      id="systemDescription"
                      value={newSystem.description}
                      onChange={(e) => setNewSystem({...newSystem, description: e.target.value})}
                      placeholder="Describe this system's purpose..."
                      rows={2}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="ipAddress">IP Address</Label>
                    <Input
                      id="ipAddress"
                      value={newSystem.ipAddress}
                      onChange={(e) => setNewSystem({...newSystem, ipAddress: e.target.value})}
                      placeholder="e.g., 192.168.1.100"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="operatingSystem">Operating System</Label>
                    <Select
                      value={newSystem.operatingSystem}
                      onValueChange={(value) => setNewSystem({...newSystem, operatingSystem: value})}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select OS" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Windows Server 2019">Windows Server 2019</SelectItem>
                        <SelectItem value="Windows Server 2022">Windows Server 2022</SelectItem>
                        <SelectItem value="RHEL 8">Red Hat Enterprise Linux 8</SelectItem>
                        <SelectItem value="RHEL 9">Red Hat Enterprise Linux 9</SelectItem>
                        <SelectItem value="Ubuntu 20.04">Ubuntu Server 20.04</SelectItem>
                        <SelectItem value="Ubuntu 22.04">Ubuntu Server 22.04</SelectItem>
                        <SelectItem value="CentOS 7">CentOS 7</SelectItem>
                        <SelectItem value="CentOS 8">CentOS 8</SelectItem>
                        <SelectItem value="Other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <DialogFooter>
                  <Button variant="outline" onClick={() => setSystemDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleCreateSystem} disabled={saving || !newSystem.name}>
                    {saving ? "Creating..." : "Create System"}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
        <CardContent>
          {group.systems && group.systems.length > 0 ? (
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[30%]">System</TableHead>
                    <TableHead className="text-center w-[15%]">CAT I</TableHead>
                    <TableHead className="text-center w-[15%]">CAT II</TableHead>
                    <TableHead className="text-center w-[15%]">CAT III</TableHead>
                    <TableHead className="text-center w-[15%]">Total</TableHead>
                    <TableHead className="text-right w-[10%]">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {group.systems.map((system: System) => {
                    // Calculate findings breakdown from stigFindings if available
                    const catI = system.stigFindings?.filter(f => f.severity === 'high').length || 0
                    const catII = system.stigFindings?.filter(f => f.severity === 'medium').length || 0
                    const catIII = system.stigFindings?.filter(f => f.severity === 'low').length || 0
                    const total = catI + catII + catIII
                    
                    return (
                      <TableRow key={system.id} className="hover:bg-muted/50">
                        <TableCell>
                          <div className="space-y-1">
                            <div className="font-medium">{system.name}</div>
                            <div className="text-sm text-muted-foreground flex items-center gap-2">
                              {system.ipAddress && (
                                <span className="flex items-center gap-1">
                                  <Network className="h-3 w-3" />
                                  {system.ipAddress}
                                </span>
                              )}
                              {system.operatingSystem && (
                                <span>{system.operatingSystem}</span>
                              )}
                            </div>
                          </div>
                        </TableCell>
                        <TableCell className="text-center">
                          {catI > 0 ? (
                            <div className="inline-flex items-center justify-center w-8 h-8 rounded-full bg-red-100 text-red-800 text-sm font-medium">
                              {catI}
                            </div>
                          ) : (
                            <span className="text-muted-foreground">0</span>
                          )}
                        </TableCell>
                        <TableCell className="text-center">
                          {catII > 0 ? (
                            <div className="inline-flex items-center justify-center w-8 h-8 rounded-full bg-orange-100 text-orange-800 text-sm font-medium">
                              {catII}
                            </div>
                          ) : (
                            <span className="text-muted-foreground">0</span>
                          )}
                        </TableCell>
                        <TableCell className="text-center">
                          {catIII > 0 ? (
                            <div className="inline-flex items-center justify-center w-8 h-8 rounded-full bg-yellow-100 text-yellow-800 text-sm font-medium">
                              {catIII}
                            </div>
                          ) : (
                            <span className="text-muted-foreground">0</span>
                          )}
                        </TableCell>
                        <TableCell className="text-center">
                          {total > 0 ? (
                            <div className="font-medium">{total}</div>
                          ) : (
                            <span className="text-muted-foreground">No Data</span>
                          )}
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex gap-1 justify-end">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => router.push(`/vulnerability-center/systems/${system.id}/stig`)}
                              className="h-8 w-8 p-0"
                            >
                              {total > 0 ? <Eye className="h-4 w-4" /> : <Upload className="h-4 w-4" />}
                            </Button>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="h-8 w-8 p-0 text-destructive hover:bg-destructive/10"
                              onClick={() => setDeleteSystemId(system.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    )
                  })}
                </TableBody>
              </Table>
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="p-4 rounded-full bg-muted/50 w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <Server className="h-8 w-8 text-muted-foreground/50" />
              </div>
              <h3 className="font-medium mb-2">No systems yet</h3>
              <p className="text-sm text-muted-foreground mb-4">
                Add systems to this group to begin vulnerability scanning and management.
              </p>
              <Button 
                size="sm" 
                variant="outline"
                onClick={() => setSystemDialogOpen(true)}
                className="bg-primary/10 text-primary border-primary/20 hover:bg-primary/20"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add First System
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* STIG Upload Guide */}
      <Card className="border-primary/20 bg-primary/5">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-primary">
            <FileCheck className="h-5 w-5" />
            STIG Checklist Upload Guide
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <p className="text-sm text-muted-foreground">
            Once you've added systems to this group, you can upload STIG checklists (.cklb files) for vulnerability assessment:
          </p>
          <div className="space-y-2 text-sm">
            <div className="flex items-start gap-2">
              <div className="w-6 h-6 rounded-full bg-primary text-primary-foreground text-xs flex items-center justify-center flex-shrink-0 mt-0.5">1</div>
              <div>Click the "Upload STIG" button next to any system</div>
            </div>
            <div className="flex items-start gap-2">
              <div className="w-6 h-6 rounded-full bg-primary text-primary-foreground text-xs flex items-center justify-center flex-shrink-0 mt-0.5">2</div>
              <div>Select and upload your STIG checklist file (.cklb format)</div>
            </div>
            <div className="flex items-start gap-2">
              <div className="w-6 h-6 rounded-full bg-primary text-primary-foreground text-xs flex items-center justify-center flex-shrink-0 mt-0.5">3</div>
              <div>Review findings and manage compliance status</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Simple Alert Dialog for Delete Confirmation */}
      {deleteSystemId && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-background border rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="font-semibold mb-2">Delete System?</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Are you sure you want to delete this system? This action cannot be undone and will remove all associated STIG findings.
            </p>
            <div className="flex gap-2 justify-end">
              <Button variant="outline" onClick={() => setDeleteSystemId(null)}>
                Cancel
              </Button>
              <Button 
                variant="destructive" 
                onClick={() => deleteSystemId && handleDeleteSystem(deleteSystemId)}
              >
                Delete
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}