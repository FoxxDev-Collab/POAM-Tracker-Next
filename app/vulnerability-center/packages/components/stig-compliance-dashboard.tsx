"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Button } from "@/components/ui/button"
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  XCircle,
  Clock,
  TrendingUp,
  TrendingDown,
  Activity,
  FileText,
  Server,
  BarChart3,
  Target,
  AlertCircle,
  RefreshCw,
  Scan
} from "lucide-react"
import { cn } from "@/lib/utils"
import { toast } from "sonner"

interface StigFinding {
  id: number
  ruleId: string
  ruleTitle: string
  severity: 'high' | 'medium' | 'low'
  status: 'Open' | 'NotAFinding' | 'Not_Applicable' | 'Not_Reviewed'
  systemId: number
  lastSeen: string
}

interface StigScan {
  id: number
  title: string
  systemId: number
  createdAt: string
  findingsCount?: number
}

interface SystemWithScans {
  id: number
  name: string
  groupId: number | null
  scans: StigScan[]
  findings: StigFinding[]
}

interface StigComplianceMetrics {
  totalSystems: number
  systemsWithScans: number
  totalFindings: number
  openFindings: number
  closedFindings: number
  notApplicableFindings: number
  notReviewedFindings: number
  highSeverityFindings: number
  mediumSeverityFindings: number
  lowSeverityFindings: number
  compliancePercentage: number
  lastScanDate?: string
  averageFindingsPerSystem: number
}

interface StigComplianceDashboardProps {
  packageData: any
  groups: any[]
  systems: any[]
}

export function StigComplianceDashboard({ packageData, groups, systems }: StigComplianceDashboardProps) {
  const [loading, setLoading] = useState(true)
  const [metrics, setMetrics] = useState<StigComplianceMetrics>({
    totalSystems: 0,
    systemsWithScans: 0,
    totalFindings: 0,
    openFindings: 0,
    closedFindings: 0,
    notApplicableFindings: 0,
    notReviewedFindings: 0,
    highSeverityFindings: 0,
    mediumSeverityFindings: 0,
    lowSeverityFindings: 0,
    compliancePercentage: 0,
    averageFindingsPerSystem: 0
  })
  const [systemsData, setSystemsData] = useState<SystemWithScans[]>([])

  const fetchStigData = async () => {
    setLoading(true)
    try {
      const systemsWithScansData: SystemWithScans[] = []
      
      for (const system of systems) {
        // Fetch STIG scans for this system
        const scansResponse = await fetch(`/api/systems/${system.id}/stig/scans`)
        const scansData = scansResponse.ok ? await scansResponse.json() : { items: [] }
        
        // Fetch STIG findings for this system
        const findingsResponse = await fetch(`/api/systems/${system.id}/stig/findings`)
        const findingsData = findingsResponse.ok ? await findingsResponse.json() : { items: [] }
        
        systemsWithScansData.push({
          id: system.id,
          name: system.name,
          groupId: system.groupId,
          scans: scansData.items || [],
          findings: findingsData.items || []
        })
      }
      
      setSystemsData(systemsWithScansData)
      
      // Calculate metrics
      const totalSystems = systems.length
      const systemsWithScansCount = systemsWithScansData.filter(s => s.scans.length > 0).length
      const allFindings = systemsWithScansData.flatMap(s => s.findings)
      
      const totalFindings = allFindings.length
      const openFindings = allFindings.filter(f => f.status === 'Open').length
      const closedFindings = allFindings.filter(f => f.status === 'NotAFinding').length
      const notApplicableFindings = allFindings.filter(f => f.status === 'Not_Applicable').length
      const notReviewedFindings = allFindings.filter(f => f.status === 'Not_Reviewed').length
      
      const highSeverityFindings = allFindings.filter(f => f.severity === 'high').length
      const mediumSeverityFindings = allFindings.filter(f => f.severity === 'medium').length
      const lowSeverityFindings = allFindings.filter(f => f.severity === 'low').length
      
      const compliancePercentage = totalFindings > 0 
        ? Math.round(((closedFindings + notApplicableFindings) / totalFindings) * 100)
        : 0
        
      const averageFindingsPerSystem = totalSystems > 0 ? totalFindings / totalSystems : 0
      
      // Get last scan date
      const allScans = systemsWithScansData.flatMap(s => s.scans)
      const lastScanDate = allScans.length > 0 
        ? allScans.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())[0].createdAt
        : undefined
      
      setMetrics({
        totalSystems,
        systemsWithScans: systemsWithScansCount,
        totalFindings,
        openFindings,
        closedFindings,
        notApplicableFindings,
        notReviewedFindings,
        highSeverityFindings,
        mediumSeverityFindings,
        lowSeverityFindings,
        compliancePercentage,
        lastScanDate,
        averageFindingsPerSystem: Math.round(averageFindingsPerSystem * 10) / 10
      })
      
    } catch (error) {
      console.error("Failed to fetch STIG data:", error)
      toast.error("Failed to load STIG compliance data")
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchStigData()
  }, [systems])

  const getComplianceColor = (percentage: number) => {
    if (percentage >= 90) return 'text-green-600'
    if (percentage >= 75) return 'text-yellow-600'
    if (percentage >= 60) return 'text-orange-600'
    return 'text-red-600'
  }

  const getComplianceGrade = (percentage: number) => {
    if (percentage >= 90) return 'A'
    if (percentage >= 80) return 'B'
    if (percentage >= 70) return 'C'
    if (percentage >= 60) return 'D'
    return 'F'
  }

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'high': return 'text-red-600'
      case 'medium': return 'text-orange-600'
      case 'low': return 'text-yellow-600'
      default: return 'text-gray-600'
    }
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>Loading STIG Compliance Data...</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-center h-32">
              <RefreshCw className="h-8 w-8 animate-spin" />
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header Card */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Scan className="h-5 w-5" />
                STIG Compliance Dashboard
              </CardTitle>
              <CardDescription>
                Security Technical Implementation Guide compliance status for {packageData.name}
              </CardDescription>
            </div>
            <Button onClick={fetchStigData} variant="outline" size="sm" disabled={loading}>
              <RefreshCw className={cn("h-4 w-4 mr-2", loading && "animate-spin")} />
              Refresh
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Overall Compliance Score */}
            <div className="flex flex-col items-center justify-center p-6 bg-muted/50 rounded-lg">
              <div className="text-5xl font-bold mb-2">
                <span className={getComplianceColor(metrics.compliancePercentage)}>
                  {metrics.compliancePercentage}%
                </span>
              </div>
              <div className="text-sm text-muted-foreground mb-2">STIG Compliance Rate</div>
              <div className="flex items-center gap-2">
                <Badge className={cn(
                  "text-lg px-3 py-1",
                  metrics.compliancePercentage >= 90 ? 'bg-green-500' :
                  metrics.compliancePercentage >= 75 ? 'bg-yellow-500' :
                  metrics.compliancePercentage >= 60 ? 'bg-orange-500' :
                  'bg-red-500'
                )}>
                  Grade: {getComplianceGrade(metrics.compliancePercentage)}
                </Badge>
              </div>
            </div>

            {/* System Coverage */}
            <div className="p-6 bg-muted/50 rounded-lg">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-sm font-medium">System Coverage</h3>
                <Server className="h-5 w-5 text-primary" />
              </div>
              <div className="space-y-3">
                <div className="text-2xl font-bold">
                  {metrics.systemsWithScans}/{metrics.totalSystems}
                </div>
                <Progress 
                  value={metrics.totalSystems > 0 ? (metrics.systemsWithScans / metrics.totalSystems) * 100 : 0} 
                  className="mb-2" 
                />
                <div className="text-sm text-muted-foreground">
                  Systems with STIG scans
                </div>
                {metrics.lastScanDate && (
                  <div className="text-xs text-muted-foreground">
                    Last scan: {new Date(metrics.lastScanDate).toLocaleDateString()}
                  </div>
                )}
              </div>
            </div>

            {/* Finding Summary */}
            <div className="p-6 bg-muted/50 rounded-lg">
              <h3 className="text-sm font-medium mb-4">Finding Summary</h3>
              <div className="space-y-2 text-sm">
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Total Findings:</span>
                  <span className="font-medium">{metrics.totalFindings}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-muted-foreground">Avg per System:</span>
                  <span className="font-medium">{metrics.averageFindingsPerSystem}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-red-600">Open:</span>
                  <span className="font-medium">{metrics.openFindings}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-green-600">Closed:</span>
                  <span className="font-medium">{metrics.closedFindings}</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Findings by Severity */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="border-t-4 border-red-500">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm flex items-center gap-2">
              <AlertCircle className="h-4 w-4" />
              High Severity (CAT I)
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-red-600 mb-2">
              {metrics.highSeverityFindings}
            </div>
            <p className="text-xs text-muted-foreground">
              Critical security vulnerabilities
            </p>
            {metrics.totalFindings > 0 && (
              <div className="mt-2">
                <Progress 
                  value={(metrics.highSeverityFindings / metrics.totalFindings) * 100} 
                  className="h-2"
                />
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="border-t-4 border-orange-500">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm flex items-center gap-2">
              <AlertTriangle className="h-4 w-4" />
              Medium Severity (CAT II)
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-orange-600 mb-2">
              {metrics.mediumSeverityFindings}
            </div>
            <p className="text-xs text-muted-foreground">
              Significant security concerns
            </p>
            {metrics.totalFindings > 0 && (
              <div className="mt-2">
                <Progress 
                  value={(metrics.mediumSeverityFindings / metrics.totalFindings) * 100} 
                  className="h-2"
                />
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="border-t-4 border-yellow-500">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm flex items-center gap-2">
              <Clock className="h-4 w-4" />
              Low Severity (CAT III)
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-yellow-600 mb-2">
              {metrics.lowSeverityFindings}
            </div>
            <p className="text-xs text-muted-foreground">
              Minor security findings
            </p>
            {metrics.totalFindings > 0 && (
              <div className="mt-2">
                <Progress 
                  value={(metrics.lowSeverityFindings / metrics.totalFindings) * 100} 
                  className="h-2"
                />
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Finding Status Breakdown */}
      <Card>
        <CardHeader>
          <CardTitle className="text-sm">Finding Status Distribution</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center p-4 bg-red-50 rounded-lg border border-red-200">
              <div className="text-2xl font-bold text-red-600">{metrics.openFindings}</div>
              <div className="text-sm text-red-700">Open</div>
              <div className="text-xs text-muted-foreground">Require remediation</div>
            </div>
            <div className="text-center p-4 bg-green-50 rounded-lg border border-green-200">
              <div className="text-2xl font-bold text-green-600">{metrics.closedFindings}</div>
              <div className="text-sm text-green-700">Not a Finding</div>
              <div className="text-xs text-muted-foreground">Compliant</div>
            </div>
            <div className="text-center p-4 bg-gray-50 rounded-lg border border-gray-200">
              <div className="text-2xl font-bold text-gray-600">{metrics.notApplicableFindings}</div>
              <div className="text-sm text-gray-700">Not Applicable</div>
              <div className="text-xs text-muted-foreground">N/A to system</div>
            </div>
            <div className="text-center p-4 bg-yellow-50 rounded-lg border border-yellow-200">
              <div className="text-2xl font-bold text-yellow-600">{metrics.notReviewedFindings}</div>
              <div className="text-sm text-yellow-700">Not Reviewed</div>
              <div className="text-xs text-muted-foreground">Pending review</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* System-Level Breakdown */}
      {systemsData.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">System-Level STIG Status</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {systemsData.map(system => {
                const systemOpenFindings = system.findings.filter(f => f.status === 'Open').length
                const systemTotalFindings = system.findings.length
                const systemCompliance = systemTotalFindings > 0 
                  ? Math.round(((systemTotalFindings - systemOpenFindings) / systemTotalFindings) * 100)
                  : 0
                  
                return (
                  <div key={system.id} className="p-4 border rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium">{system.name}</h4>
                      <div className="flex items-center gap-2">
                        <Badge className={cn(
                          systemCompliance >= 90 ? 'bg-green-500' :
                          systemCompliance >= 75 ? 'bg-yellow-500' :
                          'bg-red-500'
                        )}>
                          {systemCompliance}% Compliant
                        </Badge>
                        <Badge variant="outline">
                          {system.scans.length} scan{system.scans.length !== 1 ? 's' : ''}
                        </Badge>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div>
                        <span className="text-muted-foreground">Total:</span>
                        <span className="ml-2 font-medium">{systemTotalFindings}</span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Open:</span>
                        <span className="ml-2 font-medium text-red-600">{systemOpenFindings}</span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">High:</span>
                        <span className="ml-2 font-medium text-red-600">
                          {system.findings.filter(f => f.severity === 'high').length}
                        </span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Last Scan:</span>
                        <span className="ml-2 font-medium">
                          {system.scans.length > 0 
                            ? new Date(system.scans[0].createdAt).toLocaleDateString()
                            : 'Never'
                          }
                        </span>
                      </div>
                    </div>
                    {systemTotalFindings > 0 && (
                      <Progress value={systemCompliance} className="mt-2" />
                    )}
                  </div>
                )
              })}
            </div>
          </CardContent>
        </Card>
      )}

      {/* No Data State */}
      {metrics.totalSystems === 0 && (
        <Card>
          <CardContent className="text-center py-12">
            <Scan className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Systems Found</h3>
            <p className="text-muted-foreground">
              Add systems to this package to see STIG compliance data.
            </p>
          </CardContent>
        </Card>
      )}

      {metrics.totalSystems > 0 && metrics.systemsWithScans === 0 && (
        <Card>
          <CardContent className="text-center py-12">
            <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No STIG Scans Found</h3>
            <p className="text-muted-foreground mb-4">
              Upload STIG checklist files (.ckl) to your systems to see compliance metrics.
            </p>
            <Badge variant="outline">
              {metrics.totalSystems} system{metrics.totalSystems !== 1 ? 's' : ''} without scans
            </Badge>
          </CardContent>
        </Card>
      )}
    </div>
  )
}