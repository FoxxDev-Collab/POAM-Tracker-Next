"use client"

import { useEffect, useState, use } from "react"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  ArrowLeft, 
  LayoutDashboard, 
  FileText, 
  Users, 
  Server, 
  Edit, 
  Plus, 
  Trash2,
  Settings,
  Shield,
  AlertCircle,
  Calendar,
  UserCircle,
  Building
} from "lucide-react"
import { StigComplianceDashboard } from "@/app/vulnerability-center/packages/components/stig-compliance-dashboard"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { toast } from "sonner"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"

interface Package {
  id: number
  name: string
  description: string | null
  createdAt: string
  updatedAt: string
  teamId?: number | null
  systemType: string | null
  confidentialityImpact: string | null
  integrityImpact: string | null
  availabilityImpact: string | null
  overallCategorization: string | null
  authorizationStatus: string | null
  authorizationDate: string | null
  authorizationExpiry: string | null
  riskAssessmentDate: string | null
  residualRiskLevel: string | null
  missionCriticality: string | null
  dataClassification: string | null
  systemOwner: string | null
  authorizingOfficial: string | null
  issoName: string | null
  securityControlBaseline: string | null
  poamStatus: string | null
  continuousMonitoringStatus: string | null
  groups?: any[]
  systems?: any[]
  stps?: any[]
  poams?: any[]
}

interface Group {
  id: number
  name: string
  description: string | null
  packageId: number
  systems?: any[]
  _count?: {
    systems: number
  }
}

// Convert API response to PackageRow format for compatibility
const convertToPackageRow = (pkg: Package): any => ({
  id: pkg.id,
  name: pkg.name,
  description: pkg.description || '',
  created_at: pkg.createdAt,
  updated_at: pkg.updatedAt,
  team_id: pkg.teamId,
  system_type: pkg.systemType,
  confidentiality_impact: pkg.confidentialityImpact,
  integrity_impact: pkg.integrityImpact,
  availability_impact: pkg.availabilityImpact,
  overall_categorization: pkg.overallCategorization,
  authorization_status: pkg.authorizationStatus,
  authorization_date: pkg.authorizationDate,
  authorization_expiry: pkg.authorizationExpiry,
  risk_assessment_date: pkg.riskAssessmentDate,
  residual_risk_level: pkg.residualRiskLevel,
  mission_criticality: pkg.missionCriticality,
  data_classification: pkg.dataClassification,
  system_owner: pkg.systemOwner,
  authorizing_official: pkg.authorizingOfficial,
  isso_name: pkg.issoName,
  security_control_baseline: pkg.securityControlBaseline,
  poam_status: pkg.poamStatus,
  continuous_monitoring_status: pkg.continuousMonitoringStatus
})

// Convert continuous monitoring status to expected format

export default function PackageDetailPage({ params }: { params: Promise<{ id: string }> }) {
  const resolvedParams = use(params)
  const router = useRouter()
  const [packageData, setPackageData] = useState<Package | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [editDialogOpen, setEditDialogOpen] = useState(false)
  const [editFormData, setEditFormData] = useState<Partial<Package>>({})
  const [saving, setSaving] = useState(false)
  const [groupDialogOpen, setGroupDialogOpen] = useState(false)
  const [newGroup, setNewGroup] = useState({ name: '', description: '' })
  const [deleteGroupId, setDeleteGroupId] = useState<number | null>(null)

  useEffect(() => {
    fetchPackageData()
  }, [resolvedParams.id])

  const fetchPackageData = async () => {
    try {
      setLoading(true)
      const response = await fetch(`/api/packages/${resolvedParams.id}`)
      
      if (!response.ok) {
        if (response.status === 404) {
          setError("Package not found")
        } else {
          setError("Failed to load package data")
        }
        return
      }

      const data = await response.json()
      setPackageData(data)
      setEditFormData(data)
    } catch (err) {
      console.error("Error fetching package:", err)
      setError("Failed to load package data")
    } finally {
      setLoading(false)
    }
  }

  const handleEditPackage = async () => {
    if (!packageData) return
    setSaving(true)

    try {
      const response = await fetch(`/api/packages/${packageData.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(editFormData)
      })

      if (!response.ok) throw new Error('Failed to update package')

      const updated = await response.json()
      setPackageData(updated.item)
      setEditDialogOpen(false)
      toast.success("Package updated successfully")
    } catch (err) {
      console.error("Error updating package:", err)
      toast.error("Failed to update package")
    } finally {
      setSaving(false)
    }
  }

  const handleCreateGroup = async () => {
    if (!packageData || !newGroup.name) return
    setSaving(true)

    try {
      const response = await fetch('/api/groups', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...newGroup,
          packageId: packageData.id
        })
      })

      if (!response.ok) throw new Error('Failed to create group')

      await fetchPackageData()
      setGroupDialogOpen(false)
      setNewGroup({ name: '', description: '' })
      toast.success("Group created successfully")
    } catch (err) {
      console.error("Error creating group:", err)
      toast.error("Failed to create group")
    } finally {
      setSaving(false)
    }
  }

  const handleDeleteGroup = async (groupId: number) => {
    try {
      const response = await fetch(`/api/groups/${groupId}`, {
        method: 'DELETE'
      })

      if (!response.ok) throw new Error('Failed to delete group')

      await fetchPackageData()
      toast.success("Group deleted successfully")
    } catch (err) {
      console.error("Error deleting group:", err)
      toast.error("Failed to delete group")
    } finally {
      setDeleteGroupId(null)
    }
  }

  if (loading) {
    return (
      <div className="p-6 space-y-6">
        <div className="rounded-md border bg-card text-card-foreground p-5">
          <Skeleton className="h-8 w-48 mb-2" />
          <Skeleton className="h-4 w-64" />
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {[...Array(4)].map((_, i) => (
            <Card key={i}>
              <CardHeader className="pb-2">
                <Skeleton className="h-4 w-32" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-8 w-16" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  if (error || !packageData) {
    return (
      <div className="max-w-4xl mx-auto space-y-4 p-6">
        <div className="text-sm text-muted-foreground">{error || "Package not found."}</div>
        <Link href="/vulnerability-center/packages">
          <Button variant="outline">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Packages
          </Button>
        </Link>
      </div>
    )
  }

  // Calculate metrics from available data
  const totalSystems = packageData.systems?.length || 0
  const totalGroups = packageData.groups?.length || 0
  const totalPoams = packageData.poams?.length || 0
  const totalStps = packageData.stps?.length || 0

  // Determine status color and text
  const getStatusBadge = (status: string | null) => {
    switch (status?.toUpperCase()) {
      case 'ATO':
      case 'AUTHORIZED':
        return <Badge className="bg-green-600 text-white">Authorized (ATO)</Badge>
      case 'IATT':
      case 'INTERIM':
        return <Badge className="bg-yellow-600 text-white">Interim (IATT)</Badge>
      case 'DENIED':
        return <Badge variant="destructive">Denied</Badge>
      case 'EXPIRED':
        return <Badge variant="secondary">Expired</Badge>
      default:
        return <Badge variant="outline">Pending</Badge>
    }
  }

  const getImpactBadge = (impact: string | null) => {
    switch (impact?.toUpperCase()) {
      case 'HIGH':
        return <Badge variant="destructive">High</Badge>
      case 'MODERATE':
      case 'MEDIUM':
        return <Badge className="bg-orange-600 text-white">Moderate</Badge>
      case 'LOW':
        return <Badge className="bg-yellow-600 text-white">Low</Badge>
      default:
        return <Badge variant="outline">Not Set</Badge>
    }
  }

  return (
    <div className="p-6 grid gap-6">
      {/* Header */}
      <div className="rounded-md border bg-card text-card-foreground p-5">
        <div className="mb-3 flex justify-between items-center">
          <Button asChild variant="outline" size="sm">
            <Link href="/vulnerability-center/packages">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Packages
            </Link>
          </Button>
          <div className="flex gap-2">
            <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>
              <DialogTrigger asChild>
                <Button size="sm" variant="outline">
                  <Edit className="h-4 w-4 mr-2" />
                  Edit Package
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>Edit Package Details</DialogTitle>
                  <DialogDescription>
                    Update the security categorization and authorization details for this package.
                  </DialogDescription>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="name">Package Name</Label>
                      <Input
                        id="name"
                        value={editFormData.name || ''}
                        onChange={(e) => setEditFormData({...editFormData, name: e.target.value})}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="systemType">System Type</Label>
                      <Select
                        value={editFormData.systemType || ''}
                        onValueChange={(value) => setEditFormData({...editFormData, systemType: value})}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="MAJOR_APPLICATION">Major Application</SelectItem>
                          <SelectItem value="GENERAL_SUPPORT_SYSTEM">General Support System</SelectItem>
                          <SelectItem value="MINOR_APPLICATION">Minor Application</SelectItem>
                          <SelectItem value="SUBSYSTEM">Subsystem</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="description">Description</Label>
                    <Textarea
                      id="description"
                      value={editFormData.description || ''}
                      onChange={(e) => setEditFormData({...editFormData, description: e.target.value})}
                      rows={3}
                    />
                  </div>

                  <div className="space-y-4">
                    <h4 className="font-medium text-sm">Security Categorization</h4>
                    <div className="grid grid-cols-3 gap-4">
                      <div className="space-y-2">
                        <Label>Confidentiality</Label>
                        <Select
                          value={editFormData.confidentialityImpact || ''}
                          onValueChange={(value) => setEditFormData({...editFormData, confidentialityImpact: value})}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select impact" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="LOW">Low</SelectItem>
                            <SelectItem value="MODERATE">Moderate</SelectItem>
                            <SelectItem value="HIGH">High</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label>Integrity</Label>
                        <Select
                          value={editFormData.integrityImpact || ''}
                          onValueChange={(value) => setEditFormData({...editFormData, integrityImpact: value})}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select impact" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="LOW">Low</SelectItem>
                            <SelectItem value="MODERATE">Moderate</SelectItem>
                            <SelectItem value="HIGH">High</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label>Availability</Label>
                        <Select
                          value={editFormData.availabilityImpact || ''}
                          onValueChange={(value) => setEditFormData({...editFormData, availabilityImpact: value})}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select impact" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="LOW">Low</SelectItem>
                            <SelectItem value="MODERATE">Moderate</SelectItem>
                            <SelectItem value="HIGH">High</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label>Overall Categorization</Label>
                      <Select
                        value={editFormData.overallCategorization || ''}
                        onValueChange={(value) => setEditFormData({...editFormData, overallCategorization: value})}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select overall impact" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="LOW">Low</SelectItem>
                          <SelectItem value="MODERATE">Moderate</SelectItem>
                          <SelectItem value="HIGH">High</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <h4 className="font-medium text-sm">Authorization Details</h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>Authorization Status</Label>
                        <Select
                          value={editFormData.authorizationStatus || ''}
                          onValueChange={(value) => setEditFormData({...editFormData, authorizationStatus: value})}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="NOT_STARTED">Not Started</SelectItem>
                            <SelectItem value="IN_PROGRESS">In Progress</SelectItem>
                            <SelectItem value="AUTHORIZED">Authorized (ATO)</SelectItem>
                            <SelectItem value="INTERIM">Interim (IATT)</SelectItem>
                            <SelectItem value="EXPIRED">Expired</SelectItem>
                            <SelectItem value="DENIED">Denied</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label>Residual Risk Level</Label>
                        <Select
                          value={editFormData.residualRiskLevel || ''}
                          onValueChange={(value) => setEditFormData({...editFormData, residualRiskLevel: value})}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select risk level" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="VERY_LOW">Very Low</SelectItem>
                            <SelectItem value="LOW">Low</SelectItem>
                            <SelectItem value="MODERATE">Moderate</SelectItem>
                            <SelectItem value="HIGH">High</SelectItem>
                            <SelectItem value="VERY_HIGH">Very High</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="authorizationDate">Authorization Date</Label>
                        <Input
                          id="authorizationDate"
                          type="date"
                          value={editFormData.authorizationDate ? new Date(editFormData.authorizationDate).toISOString().split('T')[0] : ''}
                          onChange={(e) => setEditFormData({...editFormData, authorizationDate: e.target.value})}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="authorizationExpiry">Expiry Date</Label>
                        <Input
                          id="authorizationExpiry"
                          type="date"
                          value={editFormData.authorizationExpiry ? new Date(editFormData.authorizationExpiry).toISOString().split('T')[0] : ''}
                          onChange={(e) => setEditFormData({...editFormData, authorizationExpiry: e.target.value})}
                        />
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <h4 className="font-medium text-sm">Key Personnel</h4>
                    <div className="grid grid-cols-1 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="systemOwner">System Owner</Label>
                        <Input
                          id="systemOwner"
                          value={editFormData.systemOwner || ''}
                          onChange={(e) => setEditFormData({...editFormData, systemOwner: e.target.value})}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="authorizingOfficial">Authorizing Official</Label>
                        <Input
                          id="authorizingOfficial"
                          value={editFormData.authorizingOfficial || ''}
                          onChange={(e) => setEditFormData({...editFormData, authorizingOfficial: e.target.value})}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="issoName">ISSO Name</Label>
                        <Input
                          id="issoName"
                          value={editFormData.issoName || ''}
                          onChange={(e) => setEditFormData({...editFormData, issoName: e.target.value})}
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <DialogFooter>
                  <Button variant="outline" onClick={() => setEditDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleEditPackage} disabled={saving}>
                    {saving ? "Saving..." : "Save Changes"}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </div>
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="space-y-2">
            <h2 className="text-2xl font-bold">{packageData.name}</h2>
            <p className="text-sm text-muted-foreground">{packageData.description || "No description"}</p>
            <div className="flex gap-2">
              {getStatusBadge(packageData.authorizationStatus)}
              {getImpactBadge(packageData.overallCategorization)}
            </div>
          </div>
          <div className="text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <Users className="h-4 w-4" />
              {totalGroups} {totalGroups === 1 ? 'Group' : 'Groups'}
            </div>
            <div className="flex items-center gap-2">
              <Server className="h-4 w-4" />
              {totalSystems} {totalSystems === 1 ? 'System' : 'Systems'}
            </div>
          </div>
        </div>
      </div>

      {/* Main Content with Tabs */}
      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList className="grid w-full grid-cols-2 lg:grid-cols-4">
          <TabsTrigger value="overview" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            Overview
          </TabsTrigger>
          <TabsTrigger value="dashboard" className="flex items-center gap-2">
            <LayoutDashboard className="h-4 w-4" />
            Compliance
          </TabsTrigger>
          <TabsTrigger value="groups" className="flex items-center gap-2">
            <Users className="h-4 w-4" />
            Groups
          </TabsTrigger>
          <TabsTrigger value="systems" className="flex items-center gap-2">
            <Server className="h-4 w-4" />
            Systems
          </TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          {/* Key Stats */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            <Card className="border-t-4 border-t-primary">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Total Systems</CardTitle>
              </CardHeader>
              <CardContent className="text-3xl font-semibold">{totalSystems}</CardContent>
            </Card>
            <Card className="border-t-4 border-t-primary/80">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Groups</CardTitle>
              </CardHeader>
              <CardContent className="text-3xl font-semibold">{totalGroups}</CardContent>
            </Card>
            <Card className="border-t-4 border-t-orange-500">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">POA&Ms</CardTitle>
              </CardHeader>
              <CardContent className="text-3xl font-semibold">{totalPoams}</CardContent>
            </Card>
            <Card className="border-t-4 border-t-green-600">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Test Plans</CardTitle>
              </CardHeader>
              <CardContent className="text-3xl font-semibold">{totalStps}</CardContent>
            </Card>
          </div>

          {/* Package Details */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5 text-primary" />
                  Security Categorization
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">Confidentiality Impact</span>
                  {getImpactBadge(packageData.confidentialityImpact)}
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">Integrity Impact</span>
                  {getImpactBadge(packageData.integrityImpact)}
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">Availability Impact</span>
                  {getImpactBadge(packageData.availabilityImpact)}
                </div>
                <div className="pt-3 border-t flex justify-between items-center">
                  <span className="text-sm font-medium">Overall Categorization</span>
                  {getImpactBadge(packageData.overallCategorization)}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertCircle className="h-5 w-5 text-primary" />
                  Authorization Details
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Status</span>
                  {getStatusBadge(packageData.authorizationStatus)}
                </div>
                {packageData.authorizationDate && (
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      Authorization Date
                    </span>
                    <span className="text-sm">{new Date(packageData.authorizationDate).toLocaleDateString()}</span>
                  </div>
                )}
                {packageData.authorizationExpiry && (
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      Expiry Date
                    </span>
                    <span className="text-sm">{new Date(packageData.authorizationExpiry).toLocaleDateString()}</span>
                  </div>
                )}
                {packageData.residualRiskLevel && (
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Residual Risk</span>
                    <Badge variant="outline">{packageData.residualRiskLevel}</Badge>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Key Personnel */}
          {(packageData.systemOwner || packageData.authorizingOfficial || packageData.issoName) && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <UserCircle className="h-5 w-5 text-primary" />
                  Key Personnel
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {packageData.systemOwner && (
                    <div className="space-y-1">
                      <p className="text-sm text-muted-foreground">System Owner</p>
                      <p className="font-medium flex items-center gap-2">
                        <Building className="h-4 w-4 text-primary" />
                        {packageData.systemOwner}
                      </p>
                    </div>
                  )}
                  {packageData.authorizingOfficial && (
                    <div className="space-y-1">
                      <p className="text-sm text-muted-foreground">Authorizing Official</p>
                      <p className="font-medium flex items-center gap-2">
                        <Shield className="h-4 w-4 text-primary" />
                        {packageData.authorizingOfficial}
                      </p>
                    </div>
                  )}
                  {packageData.issoName && (
                    <div className="space-y-1">
                      <p className="text-sm text-muted-foreground">ISSO</p>
                      <p className="font-medium flex items-center gap-2">
                        <UserCircle className="h-4 w-4 text-primary" />
                        {packageData.issoName}
                      </p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Compliance Dashboard Tab */}
        <TabsContent value="dashboard">
          <StigComplianceDashboard 
            packageData={convertToPackageRow(packageData)}
            groups={packageData.groups || []}
            systems={packageData.systems || []}
          />
        </TabsContent>

        {/* Groups Tab */}
        <TabsContent value="groups">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Groups in this Package</CardTitle>
                <Dialog open={groupDialogOpen} onOpenChange={setGroupDialogOpen}>
                  <DialogTrigger asChild>
                    <Button size="sm" className="bg-primary text-primary-foreground hover:bg-primary/90">
                      <Plus className="h-4 w-4 mr-2" />
                      Add Group
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create New Group</DialogTitle>
                      <DialogDescription>
                        Add a new group to organize systems within this package.
                      </DialogDescription>
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                      <div className="space-y-2">
                        <Label htmlFor="groupName">Group Name</Label>
                        <Input
                          id="groupName"
                          value={newGroup.name}
                          onChange={(e) => setNewGroup({...newGroup, name: e.target.value})}
                          placeholder="e.g., Production Servers"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="groupDescription">Description</Label>
                        <Textarea
                          id="groupDescription"
                          value={newGroup.description}
                          onChange={(e) => setNewGroup({...newGroup, description: e.target.value})}
                          placeholder="Describe the purpose of this group..."
                          rows={3}
                        />
                      </div>
                    </div>
                    <DialogFooter>
                      <Button variant="outline" onClick={() => setGroupDialogOpen(false)}>
                        Cancel
                      </Button>
                      <Button onClick={handleCreateGroup} disabled={saving || !newGroup.name}>
                        {saving ? "Creating..." : "Create Group"}
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </div>
            </CardHeader>
            <CardContent>
              {packageData.groups && packageData.groups.length > 0 ? (
                <div className="space-y-2">
                  {packageData.groups.map((group: Group) => (
                    <div key={group.id} className="p-4 border rounded-lg hover:bg-muted/50 transition-colors">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="font-medium">{group.name}</div>
                          {group.description && (
                            <div className="text-sm text-muted-foreground mt-1">{group.description}</div>
                          )}
                          <div className="flex items-center gap-4 mt-2 text-sm text-muted-foreground">
                            <span className="flex items-center gap-1">
                              <Server className="h-3 w-3" />
                              {group._count?.systems || 0} systems
                            </span>
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => router.push(`/vulnerability-center/groups/${group.id}`)}
                          >
                            <Settings className="h-4 w-4 mr-1" />
                            Manage
                          </Button>
                          <AlertDialog open={deleteGroupId === group.id} onOpenChange={(open) => !open && setDeleteGroupId(null)}>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="text-destructive hover:bg-destructive/10"
                              onClick={() => setDeleteGroupId(group.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                            <AlertDialogContent>
                              <AlertDialogHeader>
                                <AlertDialogTitle>Delete Group?</AlertDialogTitle>
                                <AlertDialogDescription>
                                  Are you sure you want to delete "{group.name}"? This action cannot be undone.
                                </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel>Cancel</AlertDialogCancel>
                                <AlertDialogAction
                                  className="bg-destructive text-destructive-foreground"
                                  onClick={() => handleDeleteGroup(group.id)}
                                >
                                  Delete
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Users className="h-12 w-12 mx-auto text-muted-foreground/50 mb-3" />
                  <p className="text-muted-foreground mb-4">No groups created yet.</p>
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => setGroupDialogOpen(true)}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Create First Group
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Systems Tab */}
        <TabsContent value="systems">
          <Card>
            <CardHeader>
              <CardTitle>Systems in this Package</CardTitle>
            </CardHeader>
            <CardContent>
              {packageData.systems && packageData.systems.length > 0 ? (
                <div className="space-y-2">
                  {packageData.systems.map((system: any) => (
                    <div key={system.id} className="p-4 border rounded-lg hover:bg-muted/50 transition-colors">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="font-medium">{system.name}</div>
                          {system.description && (
                            <div className="text-sm text-muted-foreground mt-1">{system.description}</div>
                          )}
                          <div className="flex gap-2 mt-2">
                            {system.ipAddress && (
                              <Badge variant="outline">{system.ipAddress}</Badge>
                            )}
                            {system.operatingSystem && (
                              <Badge variant="outline">{system.operatingSystem}</Badge>
                            )}
                          </div>
                        </div>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => router.push(`/vulnerability-center/systems/${system.id}`)}
                        >
                          View Details
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Server className="h-12 w-12 mx-auto text-muted-foreground/50 mb-3" />
                  <p className="text-muted-foreground mb-4">No systems assigned to this package.</p>
                  <p className="text-sm text-muted-foreground">Create groups first, then add systems to them.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}