"use client"

import { useCallback, useEffect, useState } from "react"
import { z } from "zod"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import Link from "next/link"
import { Badge } from "@/components/ui/badge"

export type GroupItem = {
  id: number
  package_id: number
  name: string
  description: string
  total?: number
  high?: number
  medium?: number
  low?: number
}

const schema = z.object({
  name: z.string().min(1, "Required").max(100),
  description: z.string().max(1000).default(""),
  location: z.string().max(200).optional(),
  group_type: z.enum(["Production", "Development", "Testing", "DMZ", "Internal", "External", "Cloud", "On-Premises"]).optional(),
  security_level: z.enum(["Low", "Moderate", "High"]).optional()
})

type FormInput = z.input<typeof schema>
type FormOutput = z.output<typeof schema>

export default function GroupsManager({ pkgId, initial }: { pkgId: number; initial: GroupItem[] }) {
  const [items, setItems] = useState<GroupItem[]>(initial)
  const [loading, setLoading] = useState(false)

  const form = useForm<FormInput, unknown, FormOutput>({ 
    resolver: zodResolver(schema), 
    defaultValues: { 
      name: "", 
      description: "", 
      location: "",
      group_type: undefined,
      security_level: undefined
    } 
  })

  const reload = useCallback(async () => {
    setLoading(true)
    try {
      const res = await fetch(`/api/packages/${pkgId}/groups`, { cache: "no-store" })
      const json = await res.json()
      setItems(json.items ?? [])
    } finally {
      setLoading(false)
    }
  }, [pkgId])

  const onCreate = async (values: FormOutput) => {
    const res = await fetch(`/api/packages/${pkgId}/groups`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(values) })
    if (!res.ok) {
      const j = await res.json().catch(() => ({}))
      alert(j.error ?? "Failed to create group")
      return
    }
    form.reset({ name: "", description: "", location: "", group_type: undefined, security_level: undefined })
    reload()
  }

  async function onUpdate(id: number, values: z.infer<typeof schema>) {
    const res = await fetch(`/api/groups/${id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(values) })
    if (!res.ok) {
      const j = await res.json().catch(() => ({}))
      alert(j.error ?? "Failed to update group")
      return false
    }
    reload()
    return true
  }

  async function onDelete(id: number) {
    if (!confirm("Delete this group? Systems within will be unassigned or moved as per rules.")) return
    const res = await fetch(`/api/groups/${id}`, { method: "DELETE" })
    if (!res.ok) {
      const j = await res.json().catch(() => ({}))
      alert(j.error ?? "Failed to delete group")
      return
    }
    setItems((xs) => xs.filter((x) => x.id !== id))
  }

  useEffect(() => {
    // Load enriched stats once on mount
    reload()
  }, [reload])

  return (
    <div className="grid gap-6">
      <Card>
        <CardHeader>
          <CardTitle>Add Group to Package</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form className="space-y-4" onSubmit={form.handleSubmit(onCreate)}>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Group Name</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Production Web Servers" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="group_type"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Group Type</FormLabel>
                      <FormControl>
                        <select 
                          {...field}
                          className="w-full h-10 px-3 rounded-md border border-input bg-background"
                        >
                          <option value="">Select type...</option>
                          <option value="Production">Production</option>
                          <option value="Development">Development</option>
                          <option value="Testing">Testing</option>
                          <option value="DMZ">DMZ</option>
                          <option value="Internal">Internal</option>
                          <option value="External">External</option>
                          <option value="Cloud">Cloud</option>
                          <option value="On-Premises">On-Premises</option>
                        </select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="location"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Physical/Logical Location</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Building A, Room 101 / AWS us-east-1" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="security_level"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Security Level</FormLabel>
                      <FormControl>
                        <select 
                          {...field}
                          className="w-full h-10 px-3 rounded-md border border-input bg-background"
                        >
                          <option value="">Select level...</option>
                          <option value="Low">Low</option>
                          <option value="Moderate">Moderate</option>
                          <option value="High">High</option>
                        </select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Input placeholder="Describe the purpose and systems in this group" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="flex justify-end">
                <Button type="submit">Add Group</Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Groups in this Package</CardTitle>
        </CardHeader>
        <CardContent>
          {loading && <div className="text-sm text-muted-foreground">Loadingâ€¦</div>}
          {!loading && items.length === 0 && (
            <div className="text-sm text-muted-foreground">No groups yet. Add one above.</div>
          )}
          {!loading && items.length > 0 && (
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="text-left border-b">
                    <th className="py-2 pr-3 w-[25%]">Group</th>
                    <th className="py-2 pr-3 w-[15%]">Type/Location</th>
                    <th className="py-2 pr-3 w-[70px]">Total</th>
                    <th className="py-2 pr-3 w-[70px]">High</th>
                    <th className="py-2 pr-3 w-[70px]">Med</th>
                    <th className="py-2 pr-3 w-[70px]">Low</th>
                    <th className="py-2 pr-2 w-[240px]">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {items.map((g) => (
                    <tr key={g.id} className="border-b align-top">
                      <td className="py-2 pr-3">
                        <div className="font-medium">{g.name}</div>
                        <div className="text-xs text-muted-foreground">{g.description}</div>
                      </td>
                      <td className="py-2 pr-3">
                        <div className="text-xs">
                          {/* Placeholder for type/location - would need to be added to GroupItem type */}
                          <div className="text-muted-foreground">Production</div>
                          <div className="text-muted-foreground">Data Center A</div>
                        </div>
                      </td>
                      <td className="py-2 pr-3 whitespace-nowrap"><Badge variant="default">{g.total ?? 0}</Badge></td>
                      <td className="py-2 pr-3 whitespace-nowrap"><Badge variant="red">{g.high ?? 0}</Badge></td>
                      <td className="py-2 pr-3 whitespace-nowrap"><Badge variant="orange">{g.medium ?? 0}</Badge></td>
                      <td className="py-2 pr-3 whitespace-nowrap"><Badge variant="yellow">{g.low ?? 0}</Badge></td>
                      <td className="py-2 pr-2">
                        <div className="flex flex-wrap gap-2">
                          <Link href={`/vulnerability-center/${pkgId}/groups/${g.id}`} className="inline-flex">
                            <Button variant="outline" size="sm">Open</Button>
                          </Link>
                          <EditGroupDialog item={g} onSave={onUpdate} />
                          <Button variant="destructive" size="sm" onClick={() => onDelete(g.id)}>Delete</Button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

function EditGroupDialog({ item, onSave }: { item: GroupItem; onSave: (id: number, v: z.infer<typeof schema>) => Promise<boolean> }) {
  const form = useForm<FormInput, unknown, FormOutput>({ 
    resolver: zodResolver(schema), 
    defaultValues: { 
      name: item.name, 
      description: item.description,
      location: "",
      group_type: undefined,
      security_level: undefined
    } 
  })
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="secondary" size="sm">Edit</Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Edit Group: {item.name}</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form
            className="grid gap-4"
            onSubmit={form.handleSubmit(async (v) => {
              const ok = await onSave(item.id, v)
              if (ok) (document.activeElement as HTMLElement | null)?.blur()
            })}
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Group Name</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="group_type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Group Type</FormLabel>
                    <FormControl>
                      <select 
                        {...field}
                        className="w-full h-10 px-3 rounded-md border border-input bg-background"
                      >
                        <option value="">Select type...</option>
                        <option value="Production">Production</option>
                        <option value="Development">Development</option>
                        <option value="Testing">Testing</option>
                        <option value="DMZ">DMZ</option>
                        <option value="Internal">Internal</option>
                        <option value="External">External</option>
                        <option value="Cloud">Cloud</option>
                        <option value="On-Premises">On-Premises</option>
                      </select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="location"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Physical/Logical Location</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., Building A, Room 101 / AWS us-east-1" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="security_level"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Security Level</FormLabel>
                    <FormControl>
                      <select 
                        {...field}
                        className="w-full h-10 px-3 rounded-md border border-input bg-background"
                      >
                        <option value="">Select level...</option>
                        <option value="Low">Low</option>
                        <option value="Moderate">Moderate</option>
                        <option value="High">High</option>
                      </select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              <Button type="submit">Save Changes</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
}
