'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { z } from 'zod';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';

const poamSchema = z.object({
  package_id: z.number().min(1, 'Package is required'),
  group_id: z.number().optional(),
  title: z.string().min(1, 'Title is required'),
  weakness_description: z.string().optional(),
  nist_control_id: z.string().optional(),
  severity: z.enum(['Critical', 'High', 'Medium', 'Low']),
  priority: z.enum(['Critical', 'High', 'Medium', 'Low']),
  residual_risk_level: z.enum(['Very_High', 'High', 'Medium', 'Low', 'Very_Low']).optional(),
  target_completion_date: z.string().optional(),
  estimated_cost: z.number().optional(),
  poc_name: z.string().optional(),
  poc_email: z.string().email().optional().or(z.literal('')),
  poc_phone: z.string().optional(),
  assigned_team_id: z.number().optional(),
  stpIds: z.array(z.number()).optional(),
  initialMilestones: z.array(z.object({
    title: z.string().min(1, 'Milestone title is required'),
    description: z.string().optional(),
    targetDate: z.string().optional(),
    milestoneType: z.enum(['Planning', 'Design', 'Implementation', 'Testing', 'Documentation', 'Review', 'Deployment']).optional(),
    assignedUserId: z.number().optional()
  })).optional()
});

type PoamFormData = z.infer<typeof poamSchema>;

interface POAMWizardProps {
  onClose: () => void;
  onSuccess?: () => void;
  packageId?: number;
  groupId?: number;
  fromStp?: { id: number; title: string };
}

export default function POAMWizard({ onClose, onSuccess, packageId, groupId, fromStp }: POAMWizardProps) {
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [packages, setPackages] = useState<Array<{id: number; name: string; description: string}>>([]);
  const [groups, setGroups] = useState<Array<{id: number; name: string; description: string; group_name?: string}>>([]);
  const [teams, setTeams] = useState<Array<{id: number; name: string; description: string}>>([]);
  const [users, setUsers] = useState<Array<{id: number; name: string; email: string}>>([]);
  const [stps, setStps] = useState<Array<{id: number; title: string; description: string; testPlanName?: string; controlIdentifier?: string; status?: string}>>([]);
  const [errors, setErrors] = useState<Record<string, string>>({});
  
  const [formData, setFormData] = useState<PoamFormData>({
    package_id: packageId || 0,
    group_id: groupId || undefined,
    title: '',
    weakness_description: '',
    nist_control_id: '',
    severity: 'Medium',
    priority: 'Medium',
    residual_risk_level: undefined,
    target_completion_date: '',
    estimated_cost: undefined,
    poc_name: '',
    poc_email: '',
    poc_phone: '',
    assigned_team_id: undefined,
    stpIds: fromStp ? [fromStp.id] : [],
    initialMilestones: []
  });

  useEffect(() => {
    fetchPackages();
    fetchTeams();
    fetchUsers();
  }, []);

  useEffect(() => {
    if (formData.package_id) {
      fetchGroups(formData.package_id);
      fetchStps(formData.package_id);
    }
  }, [formData.package_id]);

  const fetchPackages = async () => {
    try {
      const res = await fetch('/api/packages');
      if (res.ok) {
        const data = await res.json();
        setPackages(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch packages:', error);
    }
  };

  const fetchGroups = async (pkgId: number) => {
    try {
      const res = await fetch(`/api/groups?packageId=${pkgId}`);
      if (res.ok) {
        const data = await res.json();
        setGroups(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch groups:', error);
    }
  };

  const fetchTeams = async () => {
    try {
      const res = await fetch('/api/teams');
      if (res.ok) {
        const data = await res.json();
        setTeams(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch teams:', error);
    }
  };

  const fetchUsers = async () => {
    try {
      const res = await fetch('/api/users');
      if (res.ok) {
        const data = await res.json();
        setUsers(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch users:', error);
    }
  };

  const fetchStps = async (pkgId: number) => {
    try {
      const res = await fetch(`/api/stps?packageId=${pkgId}`);
      if (res.ok) {
        const data = await res.json();
        setStps(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch STPs:', error);
    }
  };

  const handleNext = () => {
    const stepErrors = validateStep(currentStep);
    if (Object.keys(stepErrors).length === 0) {
      setCurrentStep(prev => Math.min(prev + 1, 4));
      setErrors({});
    } else {
      setErrors(stepErrors);
    }
  };

  const handlePrevious = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
    setErrors({});
  };

  const validateStep = (step: number): Record<string, string> => {
    const stepErrors: Record<string, string> = {};
    
    if (step === 1) {
      if (!formData.package_id) stepErrors.package_id = 'Package is required';
      if (!formData.title) stepErrors.title = 'Title is required';
      if (!formData.severity) stepErrors.severity = 'Severity is required';
      if (!formData.priority) stepErrors.priority = 'Priority is required';
    }
    
    if (step === 2) {
      if (formData.poc_email && !z.string().email().safeParse(formData.poc_email).success) {
        stepErrors.poc_email = 'Invalid email format';
      }
    }
    
    return stepErrors;
  };

  const addMilestone = () => {
    setFormData(prev => ({
      ...prev,
      initialMilestones: [
        ...(prev.initialMilestones || []),
        {
          title: '',
          description: '',
          targetDate: '',
          milestoneType: 'Implementation',
          assignedUserId: undefined
        }
      ]
    }));
  };

  const updateMilestone = (index: number, field: string, value: string | number | undefined) => {
    setFormData(prev => ({
      ...prev,
      initialMilestones: prev.initialMilestones?.map((m, i) => 
        i === index ? { ...m, [field]: value } : m
      )
    }));
  };

  const removeMilestone = (index: number): void => {
    setFormData(prev => ({
      ...prev,
      initialMilestones: prev.initialMilestones?.filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = async (e: React.FormEvent): Promise<void> => {
    try {
      setIsSubmitting(true);
      const validation = poamSchema.safeParse(formData);
      
      if (!validation.success) {
        const fieldErrors: Record<string, string> = {};
        validation.error.issues.forEach((err) => {
          const path = err.path.join('.');
          fieldErrors[path] = err.message;
        });
        setErrors(fieldErrors);
        return;
      }

      const res = await fetch('/api/poams', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (res.ok) {
        const data = await res.json();
        onSuccess?.();
        router.push(`/vulnerability-center/poams/${data.id}`);
      } else {
        const error = await res.json();
        alert(error.error || 'Failed to create POAM');
      }
    } catch (error) {
      console.error('Failed to create POAM:', error);
      alert('An error occurred while creating the POAM');
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderStep1 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Basic Information</h3>
      
      <div>
        <Label>Package *</Label>
        <Select value={formData.package_id.toString()} onValueChange={(value) => setFormData(prev => ({ ...prev, package_id: parseInt(value) }))}>
          <SelectTrigger>
            <SelectValue placeholder="Select a package" />
          </SelectTrigger>
          <SelectContent>
            {packages.map(pkg => (
              <SelectItem key={pkg.id} value={pkg.id.toString()}>{pkg.name}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        {errors.package_id && <p className="text-red-500 text-sm mt-1">{errors.package_id}</p>}
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">Group</label>
        <select
          value={formData.group_id || ''}
          onChange={(e) => setFormData(prev => ({ ...prev, group_id: e.target.value ? parseInt(e.target.value) : undefined }))}
          className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          disabled={!formData.package_id}
        >
          <option value="">No specific group</option>
          {groups.map(group => (
            <option key={group.id} value={group.id}>{group.group_name}</option>
          ))}
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">Title *</label>
        <input
          type="text"
          value={formData.title}
          onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
          className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Enter POAM title"
        />
        {errors.title && <p className="text-red-500 text-sm mt-1">{errors.title}</p>}
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">Weakness Description</label>
        <textarea
          value={formData.weakness_description}
          onChange={(e) => setFormData(prev => ({ ...prev, weakness_description: e.target.value }))}
          className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          rows={3}
          placeholder="Describe the weakness or vulnerability"
        />
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">NIST Control ID</label>
        <input
          type="text"
          value={formData.nist_control_id}
          onChange={(e) => setFormData(prev => ({ ...prev, nist_control_id: e.target.value }))}
          className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="e.g., AC-2, SI-3"
        />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium mb-1">Severity *</label>
          <select
            value={formData.severity}
            onChange={(e) => setFormData(prev => ({ ...prev, severity: e.target.value as any }))}
            className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="Critical">Critical</option>
            <option value="High">High</option>
            <option value="Medium">Medium</option>
            <option value="Low">Low</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Priority *</label>
          <select
            value={formData.priority}
            onChange={(e) => setFormData(prev => ({ ...prev, priority: e.target.value as any }))}
            className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="Critical">Critical</option>
            <option value="High">High</option>
            <option value="Medium">Medium</option>
            <option value="Low">Low</option>
          </select>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">Residual Risk Level</label>
        <select
          value={formData.residual_risk_level || ''}
          onChange={(e) => setFormData(prev => ({ ...prev, residual_risk_level: e.target.value as any || undefined }))}
          className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="">Not assessed</option>
          <option value="Very_High">Very High</option>
          <option value="High">High</option>
          <option value="Medium">Medium</option>
          <option value="Low">Low</option>
          <option value="Very_Low">Very Low</option>
        </select>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Assignment & Timeline</h3>
      
      <div>
        <label className="block text-sm font-medium mb-1">Assigned Team</label>
        <select
          value={formData.assigned_team_id || ''}
          onChange={(e) => setFormData(prev => ({ ...prev, assigned_team_id: e.target.value ? parseInt(e.target.value) : undefined }))}
          className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="">No team assigned</option>
          {teams.map(team => (
            <option key={team.id} value={team.id}>{team.name}</option>
          ))}
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">Target Completion Date</label>
        <input
          type="date"
          value={formData.target_completion_date || ''}
          onChange={(e) => setFormData(prev => ({ ...prev, target_completion_date: e.target.value }))}
          className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">Estimated Cost ($)</label>
        <input
          type="number"
          value={formData.estimated_cost || ''}
          onChange={(e) => setFormData(prev => ({ ...prev, estimated_cost: e.target.value ? parseFloat(e.target.value) : undefined }))}
          className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="0.00"
          step="0.01"
        />
      </div>

      <div className="space-y-2">
        <h4 className="font-medium">Point of Contact</h4>
        
        <div>
          <label className="block text-sm font-medium mb-1">Name</label>
          <input
            type="text"
            value={formData.poc_name || ''}
            onChange={(e) => setFormData(prev => ({ ...prev, poc_name: e.target.value }))}
            className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="POC Name"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Email</label>
          <input
            type="email"
            value={formData.poc_email || ''}
            onChange={(e) => setFormData(prev => ({ ...prev, poc_email: e.target.value }))}
            className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="poc@example.com"
          />
          {errors.poc_email && <p className="text-red-500 text-sm mt-1">{errors.poc_email}</p>}
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Phone</label>
          <input
            type="tel"
            value={formData.poc_phone || ''}
            onChange={(e) => setFormData(prev => ({ ...prev, poc_phone: e.target.value }))}
            className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="(555) 123-4567"
          />
        </div>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Related STPs</h3>
      
      <div>
        <label className="block text-sm font-medium mb-2">Select Related STPs</label>
        <div className="max-h-60 overflow-y-auto border rounded-md p-2">
          {stps.length === 0 ? (
            <p className="text-gray-500 text-sm">No STPs available for this package</p>
          ) : (
            stps.map(stp => (
              <label key={stp.id} className="flex items-center space-x-2 p-2 hover:bg-gray-50">
                <input
                  type="checkbox"
                  checked={formData.stpIds?.includes(stp.id) || false}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setFormData(prev => ({
                        ...prev,
                        stpIds: [...(prev.stpIds || []), stp.id]
                      }));
                    } else {
                      setFormData(prev => ({
                        ...prev,
                        stpIds: prev.stpIds?.filter(id => id !== stp.id)
                      }));
                    }
                  }}
                  className="rounded"
                />
                <div className="flex-1">
                  <p className="font-medium">{stp.testPlanName}</p>
                  <p className="text-sm text-gray-600">
                    Control: {stp.controlIdentifier} | Status: {stp.status}
                  </p>
                </div>
              </label>
            ))
          )}
        </div>
      </div>

      {fromStp && (
        <div className="bg-blue-50 border border-blue-200 rounded-md p-3">
          <p className="text-sm text-blue-800">
            This POAM is being created from STP: <strong>{fromStp.title}</strong>
          </p>
        </div>
      )}
    </div>
  );

  const renderStep4 = () => (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">Initial Milestones</h3>
        <button
          type="button"
          onClick={addMilestone}
          className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
        >
          Add Milestone
        </button>
      </div>
      
      {formData.initialMilestones?.length === 0 ? (
        <p className="text-gray-500 text-center py-8">No milestones added. Click &quot;Add Milestone&quot; to create one.</p>
      ) : (
        <div className="space-y-4">
          {formData.initialMilestones?.map((milestone, index) => (
            <div key={index} className="border rounded-md p-4 space-y-3">
              <div className="flex justify-between items-start">
                <h4 className="font-medium">Milestone {index + 1}</h4>
                <button
                  type="button"
                  onClick={() => removeMilestone(index)}
                  className="text-red-600 hover:text-red-800"
                >
                  Remove
                </button>
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Title *</label>
                <input
                  type="text"
                  value={milestone.title}
                  onChange={(e) => updateMilestone(index, 'title', e.target.value)}
                  className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Milestone title"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Description</label>
                <textarea
                  value={milestone.description}
                  onChange={(e) => updateMilestone(index, 'description', e.target.value)}
                  className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows={2}
                  placeholder="Enter weakness &amp; deficiency description"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Type</label>
                  <select
                    value={milestone.milestoneType}
                    onChange={(e) => updateMilestone(index, 'milestoneType', e.target.value)}
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="Planning">Planning</option>
                    <option value="Design">Design</option>
                    <option value="Implementation">Implementation</option>
                    <option value="Testing">Testing</option>
                    <option value="Documentation">Documentation</option>
                    <option value="Review">Review</option>
                    <option value="Deployment">Deployment</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-1">Target Date</label>
                  <input
                    type="date"
                    value={milestone.targetDate}
                    onChange={(e) => updateMilestone(index, 'targetDate', e.target.value)}
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Assigned To</label>
                <select
                  value={milestone.assignedUserId || ''}
                  onChange={(e) => updateMilestone(index, 'assignedUserId', e.target.value ? parseInt(e.target.value) : undefined)}
                  className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Unassigned</option>
                  {users.map(user => (
                    <option key={user.id} value={user.id}>{user.name}</option>
                  ))}
                </select>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  const steps = [
    { number: 1, title: 'Basic Info' },
    { number: 2, title: 'Assignment' },
    { number: 3, title: 'Related STPs' },
    { number: 4, title: 'Milestones' }
  ];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg w-full max-w-3xl max-h-[90vh] overflow-hidden flex flex-col">
        <div className="p-4 border-b">
          <h2 className="text-xl font-bold">Create New POAM</h2>
          
          <div className="flex items-center justify-between mt-4">
            {steps.map((step, index) => (
              <div key={step.number} className="flex items-center">
                <div className={`flex items-center justify-center w-8 h-8 rounded-full ${
                  currentStep >= step.number ? 'bg-blue-600 text-white' : 'bg-gray-300 text-gray-600'
                }`}>
                  {step.number}
                </div>
                <span className={`ml-2 text-sm ${
                  currentStep >= step.number ? 'text-blue-600 font-medium' : 'text-gray-500'
                }`}>
                  {step.title}
                </span>
                {index < steps.length - 1 && (
                  <div className={`ml-4 w-16 h-0.5 ${
                    currentStep > step.number ? 'bg-blue-600' : 'bg-gray-300'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="flex-1 overflow-y-auto p-6">
          {currentStep === 1 && renderStep1()}
          {currentStep === 2 && renderStep2()}
          {currentStep === 3 && renderStep3()}
          {currentStep === 4 && renderStep4()}
        </div>

        <div className="p-4 border-t flex justify-between">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            Cancel
          </button>
          
          <div className="flex gap-2">
            {currentStep > 1 && (
              <button
                onClick={handlePrevious}
                className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
              >
                Previous
              </button>
            )}
            
            {currentStep < 4 ? (
              <button
                onClick={handleNext}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                Next
              </button>
            ) : (
              <button
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50"
              >
                {isSubmitting ? 'Creating...' : 'Create POAM'}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}