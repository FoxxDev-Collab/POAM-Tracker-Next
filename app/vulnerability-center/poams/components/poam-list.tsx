'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import POAMWizard from './poam-wizard';

interface POAM {
  id: number;
  poam_number: string;
  title: string;
  weakness_description: string;
  severity: string;
  status: string;
  priority: string;
  residual_risk_level: string;
  target_completion_date: string;
  actual_completion_date: string;
  poc_name: string;
  poc_email: string;
  assigned_team_id: number;
  package_id: number;
  group_id: number;
  created_at: string;
  updated_at: string;
}

interface POAMListProps {
  packageId?: number;
  groupId?: number;
}

export default function POAMList({ packageId, groupId }: POAMListProps) {
  const router = useRouter();
  const [poams, setPoams] = useState<POAM[]>([]);
  const [loading, setLoading] = useState(true);
  const [showWizard, setShowWizard] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('');
  const [filterSeverity, setFilterSeverity] = useState<string>('');
  const [filterPriority, setFilterPriority] = useState<string>('');
  const [sortBy, setSortBy] = useState<'date' | 'severity' | 'priority' | 'status'>('date');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');

  const fetchPOAMs = useCallback(async (): Promise<void> => {
    try {
      setLoading(true);
      let url = '/api/poams';
      const params = new URLSearchParams();
      if (packageId) params.append('package_id', packageId.toString());
      if (groupId) params.append('group_id', groupId.toString());
      if (params.toString()) url += `?${params.toString()}`;

      const res = await fetch(url);
      if (res.ok) {
        const data = await res.json();
        setPoams(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch POAMs:', error);
    } finally {
      setLoading(false);
    }
  }, [packageId, groupId]);

  useEffect(() => {
    fetchPOAMs();
  }, [fetchPOAMs]);

  const handleDelete = async (id: number) => {
    if (!confirm('Are you sure you want to delete this POAM?')) return;

    try {
      const res = await fetch(`/api/poams/${id}`, {
        method: 'DELETE',
      });

      if (res.ok) {
        setPoams(prev => prev.filter(p => p.id !== id));
      } else {
        alert('Failed to delete POAM');
      }
    } catch (error) {
      console.error('Failed to delete POAM:', error);
      alert('An error occurred while deleting the POAM');
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'High': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'Medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'Low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Draft': return 'bg-gray-100 text-gray-800';
      case 'Open': return 'bg-blue-100 text-blue-800';
      case 'In_Progress': return 'bg-yellow-100 text-yellow-800';
      case 'Completed': return 'bg-green-100 text-green-800';
      case 'Closed': return 'bg-gray-100 text-gray-800';
      case 'Cancelled': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'Critical': return 'ðŸ”´';
      case 'High': return 'ðŸŸ ';
      case 'Medium': return 'ðŸŸ¡';
      case 'Low': return 'ðŸŸ¢';
      default: return 'âšª';
    }
  };

  const filteredPoams = poams
    .filter(poam => {
      const matchesSearch = searchTerm === '' || 
        poam.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        poam.poam_number.toLowerCase().includes(searchTerm.toLowerCase()) ||
        poam.weakness_description?.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesStatus = filterStatus === '' || poam.status === filterStatus;
      const matchesSeverity = filterSeverity === '' || poam.severity === filterSeverity;
      const matchesPriority = filterPriority === '' || poam.priority === filterPriority;
      
      return matchesSearch && matchesStatus && matchesSeverity && matchesPriority;
    })
    .sort((a, b) => {
      let compareValue = 0;
      
      switch (sortBy) {
        case 'date':
          compareValue = new Date(a.created_at).getTime() - new Date(b.created_at).getTime();
          break;
        case 'severity':
          const severityOrder = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1 };
          compareValue = (severityOrder[a.severity as keyof typeof severityOrder] || 0) - 
                        (severityOrder[b.severity as keyof typeof severityOrder] || 0);
          break;
        case 'priority':
          const priorityOrder = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1 };
          compareValue = (priorityOrder[a.priority as keyof typeof priorityOrder] || 0) - 
                        (priorityOrder[b.priority as keyof typeof priorityOrder] || 0);
          break;
        case 'status':
          compareValue = a.status.localeCompare(b.status);
          break;
      }
      
      return sortOrder === 'asc' ? compareValue : -compareValue;
    });

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">POAMs</h2>
        <button
          onClick={() => setShowWizard(true)}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
        >
          Create New POAM
        </button>
      </div>

      <div className="bg-white rounded-lg shadow p-4 space-y-4">
        <div className="flex flex-wrap gap-4">
          <input
            type="text"
            placeholder="Search POAMs..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="flex-1 min-w-[200px] px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">All Status</option>
            <option value="Draft">Draft</option>
            <option value="Open">Open</option>
            <option value="In_Progress">In Progress</option>
            <option value="Completed">Completed</option>
            <option value="Closed">Closed</option>
            <option value="Cancelled">Cancelled</option>
          </select>

          <select
            value={filterSeverity}
            onChange={(e) => setFilterSeverity(e.target.value)}
            className="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">All Severity</option>
            <option value="Critical">Critical</option>
            <option value="High">High</option>
            <option value="Medium">Medium</option>
            <option value="Low">Low</option>
          </select>

          <select
            value={filterPriority}
            onChange={(e) => setFilterPriority(e.target.value)}
            className="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">All Priority</option>
            <option value="Critical">Critical</option>
            <option value="High">High</option>
            <option value="Medium">Medium</option>
            <option value="Low">Low</option>
          </select>

          <select
            value={`${sortBy}-${sortOrder}`}
            onChange={(e) => {
              const [newSortBy, newSortOrder] = e.target.value.split('-') as [typeof sortBy, typeof sortOrder];
              setSortBy(newSortBy);
              setSortOrder(newSortOrder);
            }}
            className="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="date-desc">Newest First</option>
            <option value="date-asc">Oldest First</option>
            <option value="severity-desc">Severity (High to Low)</option>
            <option value="severity-asc">Severity (Low to High)</option>
            <option value="priority-desc">Priority (High to Low)</option>
            <option value="priority-asc">Priority (Low to High)</option>
            <option value="status-asc">Status (A to Z)</option>
          </select>
        </div>

        <div className="text-sm text-gray-600">
          Showing {filteredPoams.length} of {poams.length} POAMs
        </div>
      </div>

      {filteredPoams.length === 0 ? (
        <div className="bg-white rounded-lg shadow p-8 text-center">
          <p className="text-gray-500">No POAMs found matching your criteria.</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {filteredPoams.map(poam => (
            <div
              key={poam.id}
              className="bg-white rounded-lg shadow hover:shadow-md transition-shadow p-4"
            >
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <span className="font-mono text-sm text-gray-600">{poam.poam_number}</span>
                    <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(poam.status)}`}>
                      {poam.status.replace('_', ' ')}
                    </span>
                    <span className={`px-2 py-1 text-xs rounded-full border ${getSeverityColor(poam.severity)}`}>
                      {poam.severity}
                    </span>
                    <span className="text-lg" title={`Priority: ${poam.priority}`}>
                      {getPriorityIcon(poam.priority)}
                    </span>
                  </div>
                  
                  <h3 
                    className="text-lg font-semibold mb-1 cursor-pointer hover:text-blue-600"
                    onClick={() => router.push(`/vulnerability-center/poams/${poam.id}`)}
                  >
                    {poam.title}
                  </h3>
                  
                  {poam.weakness_description && (
                    <p className="text-gray-600 text-sm mb-2 line-clamp-2">
                      {poam.weakness_description}
                    </p>
                  )}
                  
                  <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                    <span>Package ID: <strong>{poam.package_id}</strong></span>
                    {poam.group_id && <span>Group ID: <strong>{poam.group_id}</strong></span>}
                    {poam.assigned_team_id && <span>Team ID: <strong>{poam.assigned_team_id}</strong></span>}
                    {poam.poc_name && <span>POC: <strong>{poam.poc_name}</strong></span>}
                    {poam.target_completion_date && (
                      <span>Target: <strong>{new Date(poam.target_completion_date).toLocaleDateString()}</strong></span>
                    )}
                  </div>
                </div>
                
                <div className="flex gap-2 ml-4">
                  <button
                    onClick={() => router.push(`/vulnerability-center/poams/${poam.id}`)}
                    className="p-2 text-blue-600 hover:bg-blue-50 rounded"
                    title="View Details"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  </button>
                  <button
                    onClick={() => router.push(`/vulnerability-center/poams/${poam.id}/edit`)}
                    className="p-2 text-gray-600 hover:bg-gray-50 rounded"
                    title="Edit"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                  <button
                    onClick={() => handleDelete(poam.id)}
                    className="p-2 text-red-600 hover:bg-red-50 rounded"
                    title="Delete"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {showWizard && (
        <POAMWizard
          onClose={() => setShowWizard(false)}
          onSuccess={() => {
            setShowWizard(false);
            fetchPOAMs();
          }}
          packageId={packageId}
          groupId={groupId}
        />
      )}
    </div>
  );
}