'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { BarChart3, TrendingUp, TrendingDown, AlertCircle, CheckCircle, Clock, Target, DollarSign } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface POAM {
  id: number;
  status: string;
  severity: string;
  priority: string;
  target_completion_date?: string;
  actual_completion_date?: string;
  created_at: string;
  estimated_cost?: number;
  actual_cost?: number;
}

interface Milestone {
  id: number;
  status: string;
  target_date?: string;
  created_at: string;
}

interface MetricsData {
  poams: POAM[];
  milestones: Milestone[];
}

interface MetricsTabProps {
  packageId?: number;
  groupId?: number;
}

export default function MetricsTab({ packageId, groupId }: MetricsTabProps) {
  const [data, setData] = useState<MetricsData>({ poams: [], milestones: [] });
  const [loading, setLoading] = useState(true);
  const [timeRange, setTimeRange] = useState<'30d' | '90d' | '6m' | '1y'>('90d');

  const fetchData = useCallback(async (): Promise<void> => {
    try {
      setLoading(true);
      
      // Fetch POAMs
      let poamUrl = '/api/poams';
      const poamParams = new URLSearchParams();
      if (packageId) poamParams.append('package_id', packageId.toString());
      if (groupId) poamParams.append('group_id', groupId.toString());
      if (poamParams.toString()) poamUrl += `?${poamParams.toString()}`;

      const poamRes = await fetch(poamUrl);
      const poamData = poamRes.ok ? await poamRes.json() : { items: [] };

      // Fetch Milestones
      let milestoneUrl = '/api/milestones';
      const milestoneParams = new URLSearchParams();
      if (packageId) milestoneParams.append('package_id', packageId.toString());
      if (groupId) milestoneParams.append('group_id', groupId.toString());
      if (milestoneParams.toString()) milestoneUrl += `?${milestoneParams.toString()}`;

      const milestoneRes = await fetch(milestoneUrl);
      const milestoneData = milestoneRes.ok ? await milestoneRes.json() : { items: [] };

      setData({
        poams: poamData.items || [],
        milestones: milestoneData.items || []
      });
    } catch (error) {
      console.error('Failed to fetch metrics data:', error);
    } finally {
      setLoading(false);
    }
  }, [packageId, groupId]);

  useEffect(() => {
    fetchData();
  }, [fetchData, timeRange]);

  const calculateMetrics = () => {
    const { poams, milestones } = data;

    // POAM Metrics
    const totalPoams = poams.length;
    const completedPoams = poams.filter(p => p.status === 'Completed').length;
    const openPoams = poams.filter(p => ['Open', 'In_Progress'].includes(p.status)).length;
    const cancelledPoams = poams.filter(p => p.status === 'Cancelled').length;
    const overduePoams = poams.filter(p => 
      p.target_completion_date && 
      new Date(p.target_completion_date) < new Date() && 
      !['Completed', 'Closed', 'Cancelled'].includes(p.status)
    ).length;

    const completionRate = totalPoams > 0 ? (completedPoams / totalPoams) * 100 : 0;

    // Severity Distribution
    const severityStats = {
      Critical: poams.filter(p => p.severity === 'Critical').length,
      High: poams.filter(p => p.severity === 'High').length,
      Medium: poams.filter(p => p.severity === 'Medium').length,
      Low: poams.filter(p => p.severity === 'Low').length,
    };

    // Priority Distribution
    const priorityStats = {
      Critical: poams.filter(p => p.priority === 'Critical').length,
      High: poams.filter(p => p.priority === 'High').length,
      Medium: poams.filter(p => p.priority === 'Medium').length,
      Low: poams.filter(p => p.priority === 'Low').length,
    };

    // Milestone Metrics
    const totalMilestones = milestones.length;
    const completedMilestones = milestones.filter(m => m.status === 'Completed').length;
    const inProgressMilestones = milestones.filter(m => m.status === 'In_Progress').length;
    const delayedMilestones = milestones.filter(m => m.status === 'Delayed').length;
    const overdueMilestones = milestones.filter(m => 
      m.target_date && 
      new Date(m.target_date) < new Date() && 
      !['Completed', 'Cancelled'].includes(m.status)
    ).length;

    const milestoneCompletionRate = totalMilestones > 0 ? (completedMilestones / totalMilestones) * 100 : 0;

    // Cost Analysis
    const totalEstimatedCost = poams.reduce((sum, p) => sum + (p.estimated_cost || 0), 0);
    const totalActualCost = poams.reduce((sum, p) => sum + (p.actual_cost || 0), 0);
    const costVariance = totalEstimatedCost > 0 ? 
      ((totalActualCost - totalEstimatedCost) / totalEstimatedCost) * 100 : 0;

    // Time-based Analysis
    const now = new Date();
    const cutoffDate = new Date();
    switch (timeRange) {
      case '30d': cutoffDate.setDate(now.getDate() - 30); break;
      case '90d': cutoffDate.setDate(now.getDate() - 90); break;
      case '6m': cutoffDate.setMonth(now.getMonth() - 6); break;
      case '1y': cutoffDate.setFullYear(now.getFullYear() - 1); break;
    }

    const recentPoams = poams.filter(p => new Date(p.created_at) >= cutoffDate);
    const recentCompletions = poams.filter(p => 
      p.actual_completion_date && new Date(p.actual_completion_date) >= cutoffDate
    );

    // Average completion time (for completed POAMs)
    const completedPoamsWithDates = poams.filter(p => 
      p.status === 'Completed' && p.actual_completion_date && p.created_at
    );
    const avgCompletionDays = completedPoamsWithDates.length > 0 ? 
      completedPoamsWithDates.reduce((sum, p) => {
        const start = new Date(p.created_at);
        const end = new Date(p.actual_completion_date!);
        return sum + Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      }, 0) / completedPoamsWithDates.length : 0;

    return {
      totalPoams,
      completedPoams,
      openPoams,
      cancelledPoams,
      overduePoams,
      completionRate,
      severityStats,
      priorityStats,
      totalMilestones,
      completedMilestones,
      inProgressMilestones,
      delayedMilestones,
      overdueMilestones,
      milestoneCompletionRate,
      totalEstimatedCost,
      totalActualCost,
      costVariance,
      recentPoams: recentPoams.length,
      recentCompletions: recentCompletions.length,
      avgCompletionDays: Math.round(avgCompletionDays)
    };
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  const metrics = calculateMetrics();

  return (
    <div className="space-y-6">
      {/* Controls */}
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold flex items-center gap-2">
          <BarChart3 className="h-6 w-6" />
          POAM Analytics & Metrics
        </h2>
        
        <Select value={timeRange} onValueChange={(value: typeof timeRange) => setTimeRange(value)}>
          <SelectTrigger className="w-40">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="30d">Last 30 Days</SelectItem>
            <SelectItem value="90d">Last 90 Days</SelectItem>
            <SelectItem value="6m">Last 6 Months</SelectItem>
            <SelectItem value="1y">Last Year</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Key Performance Indicators */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center gap-2">
              <CheckCircle className="h-4 w-4 text-green-600" />
              Completion Rate
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="text-2xl font-bold text-green-600">
                {metrics.completionRate.toFixed(1)}%
              </div>
              <Progress value={metrics.completionRate} className="h-2" />
              <p className="text-xs text-muted-foreground">
                {metrics.completedPoams} of {metrics.totalPoams} POAMs completed
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center gap-2">
              <AlertCircle className="h-4 w-4 text-red-600" />
              Overdue Items
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="text-2xl font-bold text-red-600">{metrics.overduePoams}</div>
              <div className="text-xs text-muted-foreground">
                POAMs past target date
              </div>
              <div className="text-xs text-orange-600">
                +{metrics.overdueMilestones} overdue milestones
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center gap-2">
              <Clock className="h-4 w-4 text-blue-600" />
              Avg. Completion Time
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="text-2xl font-bold text-blue-600">
                {metrics.avgCompletionDays}
              </div>
              <p className="text-xs text-muted-foreground">days average</p>
              <div className="text-xs text-green-600">
                {metrics.recentCompletions} completed in {timeRange}
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center gap-2">
              <TrendingUp className="h-4 w-4 text-purple-600" />
              Activity Trend
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="text-2xl font-bold text-purple-600">
                {metrics.recentPoams}
              </div>
              <p className="text-xs text-muted-foreground">POAMs created in {timeRange}</p>
              <div className="text-xs">
                {metrics.recentPoams > metrics.recentCompletions ? (
                  <span className="text-orange-600 flex items-center gap-1">
                    <TrendingUp className="h-3 w-3" />
                    Workload increasing
                  </span>
                ) : (
                  <span className="text-green-600 flex items-center gap-1">
                    <TrendingDown className="h-3 w-3" />
                    Workload decreasing
                  </span>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Detailed Analytics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* POAM Status Breakdown */}
        <Card>
          <CardHeader>
            <CardTitle>POAM Status Distribution</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm">Completed</span>
                <div className="flex items-center gap-2">
                  <div className="w-32 bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-green-600 h-2 rounded-full" 
                      style={{ width: `${metrics.totalPoams > 0 ? (metrics.completedPoams / metrics.totalPoams) * 100 : 0}%` }}
                    />
                  </div>
                  <span className="text-sm font-medium w-8">{metrics.completedPoams}</span>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <span className="text-sm">Open/In Progress</span>
                <div className="flex items-center gap-2">
                  <div className="w-32 bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full" 
                      style={{ width: `${metrics.totalPoams > 0 ? (metrics.openPoams / metrics.totalPoams) * 100 : 0}%` }}
                    />
                  </div>
                  <span className="text-sm font-medium w-8">{metrics.openPoams}</span>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <span className="text-sm">Cancelled</span>
                <div className="flex items-center gap-2">
                  <div className="w-32 bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-red-600 h-2 rounded-full" 
                      style={{ width: `${metrics.totalPoams > 0 ? (metrics.cancelledPoams / metrics.totalPoams) * 100 : 0}%` }}
                    />
                  </div>
                  <span className="text-sm font-medium w-8">{metrics.cancelledPoams}</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Severity Analysis */}
        <Card>
          <CardHeader>
            <CardTitle>Severity Distribution</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm text-red-600">Critical</span>
                <div className="flex items-center gap-2">
                  <div className="w-32 bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-red-600 h-2 rounded-full" 
                      style={{ width: `${metrics.totalPoams > 0 ? (metrics.severityStats.Critical / metrics.totalPoams) * 100 : 0}%` }}
                    />
                  </div>
                  <span className="text-sm font-medium w-8">{metrics.severityStats.Critical}</span>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <span className="text-sm text-orange-600">High</span>
                <div className="flex items-center gap-2">
                  <div className="w-32 bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-orange-600 h-2 rounded-full" 
                      style={{ width: `${metrics.totalPoams > 0 ? (metrics.severityStats.High / metrics.totalPoams) * 100 : 0}%` }}
                    />
                  </div>
                  <span className="text-sm font-medium w-8">{metrics.severityStats.High}</span>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <span className="text-sm text-yellow-600">Medium</span>
                <div className="flex items-center gap-2">
                  <div className="w-32 bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-yellow-600 h-2 rounded-full" 
                      style={{ width: `${metrics.totalPoams > 0 ? (metrics.severityStats.Medium / metrics.totalPoams) * 100 : 0}%` }}
                    />
                  </div>
                  <span className="text-sm font-medium w-8">{metrics.severityStats.Medium}</span>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <span className="text-sm text-green-600">Low</span>
                <div className="flex items-center gap-2">
                  <div className="w-32 bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-green-600 h-2 rounded-full" 
                      style={{ width: `${metrics.totalPoams > 0 ? (metrics.severityStats.Low / metrics.totalPoams) * 100 : 0}%` }}
                    />
                  </div>
                  <span className="text-sm font-medium w-8">{metrics.severityStats.Low}</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Milestone Performance */}
        <Card>
          <CardHeader>
            <CardTitle>Milestone Performance</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4 text-center">
              <div>
                <div className="text-2xl font-bold text-green-600">{metrics.completedMilestones}</div>
                <p className="text-xs text-muted-foreground">Completed</p>
              </div>
              <div>
                <div className="text-2xl font-bold text-blue-600">{metrics.inProgressMilestones}</div>
                <p className="text-xs text-muted-foreground">In Progress</p>
              </div>
              <div>
                <div className="text-2xl font-bold text-red-600">{metrics.delayedMilestones}</div>
                <p className="text-xs text-muted-foreground">Delayed</p>
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-600">{metrics.totalMilestones - metrics.completedMilestones - metrics.inProgressMilestones - metrics.delayedMilestones}</div>
                <p className="text-xs text-muted-foreground">Pending</p>
              </div>
            </div>
            
            <div className="pt-2">
              <div className="flex justify-between text-sm mb-1">
                <span>Overall Progress</span>
                <span>{metrics.milestoneCompletionRate.toFixed(1)}%</span>
              </div>
              <Progress value={metrics.milestoneCompletionRate} className="h-2" />
            </div>
          </CardContent>
        </Card>

        {/* Cost Analysis */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <DollarSign className="h-4 w-4" />
              Cost Analysis
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm">Estimated Cost</span>
                <span className="text-sm font-medium">
                  ${metrics.totalEstimatedCost.toLocaleString()}
                </span>
              </div>
              
              <div className="flex justify-between items-center">
                <span className="text-sm">Actual Cost</span>
                <span className="text-sm font-medium">
                  ${metrics.totalActualCost.toLocaleString()}
                </span>
              </div>
              
              <div className="flex justify-between items-center pt-2 border-t">
                <span className="text-sm">Cost Variance</span>
                <span className={`text-sm font-medium ${metrics.costVariance > 0 ? 'text-red-600' : 'text-green-600'}`}>
                  {metrics.costVariance > 0 ? '+' : ''}{metrics.costVariance.toFixed(1)}%
                </span>
              </div>
              
              {metrics.totalEstimatedCost > 0 && (
                <div className="pt-2">
                  <div className="text-xs text-muted-foreground mb-1">Budget Utilization</div>
                  <Progress 
                    value={Math.min(100, (metrics.totalActualCost / metrics.totalEstimatedCost) * 100)} 
                    className="h-2" 
                  />
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Summary Insights */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-4 w-4" />
            Key Insights & Recommendations
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {metrics.completionRate < 50 && (
              <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <AlertCircle className="h-4 w-4 text-red-600" />
                  <span className="text-sm font-medium text-red-800">Low Completion Rate</span>
                </div>
                <p className="text-xs text-red-700">
                  Only {metrics.completionRate.toFixed(1)}% of POAMs are completed. Consider reviewing resource allocation.
                </p>
              </div>
            )}
            
            {metrics.overduePoams > 0 && (
              <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <Clock className="h-4 w-4 text-orange-600" />
                  <span className="text-sm font-medium text-orange-800">Overdue Items</span>
                </div>
                <p className="text-xs text-orange-700">
                  {metrics.overduePoams} POAMs are overdue. Prioritize these items or adjust target dates.
                </p>
              </div>
            )}
            
            {metrics.severityStats.Critical > 0 && (
              <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <AlertCircle className="h-4 w-4 text-red-600" />
                  <span className="text-sm font-medium text-red-800">Critical Items</span>
                </div>
                <p className="text-xs text-red-700">
                  {metrics.severityStats.Critical} critical severity POAMs require immediate attention.
                </p>
              </div>
            )}
            
            {metrics.costVariance > 10 && (
              <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <DollarSign className="h-4 w-4 text-yellow-600" />
                  <span className="text-sm font-medium text-yellow-800">Budget Variance</span>
                </div>
                <p className="text-xs text-yellow-700">
                  Actual costs are {metrics.costVariance.toFixed(1)}% over budget. Review cost management.
                </p>
              </div>
            )}
            
            {metrics.completionRate > 80 && metrics.overduePoams === 0 && (
              <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  <span className="text-sm font-medium text-green-800">Excellent Performance</span>
                </div>
                <p className="text-xs text-green-700">
                  High completion rate with no overdue items. Great job maintaining quality and timelines!
                </p>
              </div>
            )}
            
            {metrics.recentPoams === 0 && (
              <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-center gap-2 mb-1">
                  <TrendingDown className="h-4 w-4 text-blue-600" />
                  <span className="text-sm font-medium text-blue-800">Low Activity</span>
                </div>
                <p className="text-xs text-blue-700">
                  No new POAMs created in the selected time period. Monitor for emerging issues.
                </p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}