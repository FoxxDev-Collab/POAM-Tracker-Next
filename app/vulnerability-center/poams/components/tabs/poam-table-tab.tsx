'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { Plus, Search, Filter, Eye, Edit, Trash2, AlertTriangle } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';

interface POAM {
  id: number;
  poam_number: string;
  title: string;
  weakness_description: string;
  severity: string;
  status: string;
  priority: string;
  residual_risk_level: string;
  target_completion_date: string;
  actual_completion_date: string;
  poc_name: string;
  poc_email: string;
  assigned_team_id: number;
  package_id: number;
  group_id: number;
  created_at: string;
  updated_at: string;
}

interface POAMTableTabProps {
  packageId?: number;
  groupId?: number;
}

export default function POAMTableTab({ packageId, groupId }: POAMTableTabProps) {
  const router = useRouter();
  const [poams, setPoams] = useState<POAM[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterPriority, setFilterPriority] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'date' | 'severity' | 'priority' | 'status'>('date');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');

  const fetchPOAMs = useCallback(async (): Promise<void> => {
    try {
      setLoading(true);
      let url = '/api/poams';
      const params = new URLSearchParams();
      if (packageId) params.append('package_id', packageId.toString());
      if (groupId) params.append('group_id', groupId.toString());
      if (params.toString()) url += `?${params.toString()}`;

      const res = await fetch(url);
      if (res.ok) {
        const data = await res.json();
        setPoams(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch POAMs:', error);
    } finally {
      setLoading(false);
    }
  }, [packageId, groupId]);

  useEffect(() => {
    fetchPOAMs();
  }, [fetchPOAMs]);

  const handleDelete = async (id: number) => {
    if (!confirm('Are you sure you want to delete this POAM?')) return;

    try {
      const res = await fetch(`/api/poams/${id}`, {
        method: 'DELETE',
      });

      if (res.ok) {
        setPoams(prev => prev.filter(p => p.id !== id));
      } else {
        alert('Failed to delete POAM');
      }
    } catch (error) {
      console.error('Failed to delete POAM:', error);
      alert('An error occurred while deleting the POAM');
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'High': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'Medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'Low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Draft': return 'default';
      case 'Open': return 'destructive';
      case 'In_Progress': return 'secondary';
      case 'Completed': return 'outline';
      case 'Closed': return 'default';
      case 'Cancelled': return 'destructive';
      default: return 'default';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'Critical': return 'ðŸ”´';
      case 'High': return 'ðŸŸ ';
      case 'Medium': return 'ðŸŸ¡';
      case 'Low': return 'ðŸŸ¢';
      default: return 'âšª';
    }
  };

  const isOverdue = (targetDate: string) => {
    if (!targetDate) return false;
    return new Date(targetDate) < new Date();
  };

  const filteredPoams = poams
    .filter(poam => {
      const matchesSearch = searchTerm === '' || 
        poam.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        poam.poam_number.toLowerCase().includes(searchTerm.toLowerCase()) ||
        poam.weakness_description?.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesStatus = filterStatus === 'all' || poam.status === filterStatus;
      const matchesSeverity = filterSeverity === 'all' || poam.severity === filterSeverity;
      const matchesPriority = filterPriority === 'all' || poam.priority === filterPriority;
      
      return matchesSearch && matchesStatus && matchesSeverity && matchesPriority;
    })
    .sort((a, b) => {
      let compareValue = 0;
      
      switch (sortBy) {
        case 'date':
          compareValue = new Date(a.created_at).getTime() - new Date(b.created_at).getTime();
          break;
        case 'severity':
          const severityOrder = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1 };
          compareValue = (severityOrder[a.severity as keyof typeof severityOrder] || 0) - 
                        (severityOrder[b.severity as keyof typeof severityOrder] || 0);
          break;
        case 'priority':
          const priorityOrder = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1 };
          compareValue = (priorityOrder[a.priority as keyof typeof priorityOrder] || 0) - 
                        (priorityOrder[b.priority as keyof typeof priorityOrder] || 0);
          break;
        case 'status':
          compareValue = a.status.localeCompare(b.status);
          break;
      }
      
      return sortOrder === 'asc' ? compareValue : -compareValue;
    });

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Action Bar */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
        <div className="flex items-center gap-2">
          <Search className="h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search POAMs..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-64"
          />
        </div>
        <Button onClick={() => router.push('/vulnerability-center/poams/create')}>
          <Plus className="h-4 w-4 mr-2" />
          Create New POAM
        </Button>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-4 w-4" />
            Filters & Sorting
          </CardTitle>
        </CardHeader>
        <CardContent className="flex flex-wrap gap-4">
          <Select value={filterStatus} onValueChange={setFilterStatus}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="All Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="Draft">Draft</SelectItem>
              <SelectItem value="Open">Open</SelectItem>
              <SelectItem value="In_Progress">In Progress</SelectItem>
              <SelectItem value="Completed">Completed</SelectItem>
              <SelectItem value="Closed">Closed</SelectItem>
              <SelectItem value="Cancelled">Cancelled</SelectItem>
            </SelectContent>
          </Select>

          <Select value={filterSeverity} onValueChange={setFilterSeverity}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="All Severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Severity</SelectItem>
              <SelectItem value="Critical">Critical</SelectItem>
              <SelectItem value="High">High</SelectItem>
              <SelectItem value="Medium">Medium</SelectItem>
              <SelectItem value="Low">Low</SelectItem>
            </SelectContent>
          </Select>

          <Select value={filterPriority} onValueChange={setFilterPriority}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="All Priority" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Priority</SelectItem>
              <SelectItem value="Critical">Critical</SelectItem>
              <SelectItem value="High">High</SelectItem>
              <SelectItem value="Medium">Medium</SelectItem>
              <SelectItem value="Low">Low</SelectItem>
            </SelectContent>
          </Select>

          <Select value={`${sortBy}-${sortOrder}`} onValueChange={(value) => {
            const [newSortBy, newSortOrder] = value.split('-') as [typeof sortBy, typeof sortOrder];
            setSortBy(newSortBy);
            setSortOrder(newSortOrder);
          }}>
            <SelectTrigger className="w-44">
              <SelectValue placeholder="Sort by" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="date-desc">Newest First</SelectItem>
              <SelectItem value="date-asc">Oldest First</SelectItem>
              <SelectItem value="severity-desc">Severity (High to Low)</SelectItem>
              <SelectItem value="severity-asc">Severity (Low to High)</SelectItem>
              <SelectItem value="priority-desc">Priority (High to Low)</SelectItem>
              <SelectItem value="priority-asc">Priority (Low to High)</SelectItem>
              <SelectItem value="status-asc">Status (A to Z)</SelectItem>
            </SelectContent>
          </Select>

          <div className="text-sm text-gray-600 flex items-center">
            Showing {filteredPoams.length} of {poams.length} POAMs
          </div>
        </CardContent>
      </Card>

      {/* POAM Table */}
      <Card>
        <CardContent className="p-0">
          {filteredPoams.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500">No POAMs found matching your criteria.</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="border-b bg-gray-50">
                  <tr>
                    <th className="text-left p-4 font-semibold">POAM #</th>
                    <th className="text-left p-4 font-semibold">Title</th>
                    <th className="text-left p-4 font-semibold">Status</th>
                    <th className="text-left p-4 font-semibold">Severity</th>
                    <th className="text-left p-4 font-semibold">Priority</th>
                    <th className="text-left p-4 font-semibold">Target Date</th>
                    <th className="text-left p-4 font-semibold">POC</th>
                    <th className="text-left p-4 font-semibold">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredPoams.map(poam => {
                    const overdue = isOverdue(poam.target_completion_date);
                    return (
                      <tr key={poam.id} className="border-b hover:bg-gray-50">
                        <td className="p-4">
                          <div className="font-mono text-sm">{poam.poam_number}</div>
                        </td>
                        <td className="p-4">
                          <div>
                            <div className="font-medium">{poam.title}</div>
                            {poam.weakness_description && (
                              <div className="text-sm text-gray-600 truncate max-w-xs">
                                {poam.weakness_description}
                              </div>
                            )}
                          </div>
                        </td>
                        <td className="p-4">
                          <Badge variant={getStatusColor(poam.status)}>
                            {poam.status.replace('_', ' ')}
                          </Badge>
                        </td>
                        <td className="p-4">
                          <Badge className={getSeverityColor(poam.severity)}>
                            {poam.severity}
                          </Badge>
                        </td>
                        <td className="p-4">
                          <div className="flex items-center gap-2">
                            <span className="text-lg">{getPriorityIcon(poam.priority)}</span>
                            <span className="text-sm">{poam.priority}</span>
                          </div>
                        </td>
                        <td className="p-4">
                          <div className={`text-sm ${overdue ? 'text-red-600 font-medium' : 'text-gray-600'}`}>
                            {poam.target_completion_date ? (
                              <div className="flex items-center gap-1">
                                {overdue && <AlertTriangle className="h-3 w-3" />}
                                {new Date(poam.target_completion_date).toLocaleDateString()}
                              </div>
                            ) : (
                              'No date set'
                            )}
                          </div>
                        </td>
                        <td className="p-4">
                          <div className="text-sm text-gray-600">
                            {poam.poc_name || 'Not assigned'}
                          </div>
                        </td>
                        <td className="p-4">
                          <div className="flex gap-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => router.push(`/vulnerability-center/poams/${poam.id}`)}
                              title="View Details"
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => router.push(`/vulnerability-center/poams/${poam.id}/edit`)}
                              title="Edit"
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleDelete(poam.id)}
                              title="Delete"
                              className="text-red-600 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>

    </div>
  );
}