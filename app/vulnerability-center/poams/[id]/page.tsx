"use client"

import { useState, useEffect } from "react"
import { useParams } from "next/navigation"
import { ClipboardList, Calendar, Shield, Package, Target, AlertCircle, Clock, DollarSign, Plus, Trash2, CheckCircle2, Circle, FileText, MessageCircle, User } from "lucide-react"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { Progress } from "@/components/ui/progress"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"

type POAM = {
  id: number;
  poam_number: string;
  title: string;
  weakness_description: string | null;
  nist_control_id: string | null;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  status: 'Draft' | 'Open' | 'In_Progress' | 'Completed' | 'Closed' | 'Cancelled';
  priority: 'Low' | 'Medium' | 'High' | 'Critical';
  package_id: number;
  group_id: number | null;
  target_completion_date: string | null;
  actual_completion_date: string | null;
  estimated_cost: number | null;
  actual_cost: number | null;
  poc_name: string | null;
  poc_email: string | null;
  poc_phone: string | null;
  assigned_team_id: number | null;
  created_at: string;
  updated_at: string;
};

type Milestone = {
  id: number;
  poam_id: number;
  title: string;
  description: string;
  target_date: string | null;
  actual_date: string | null;
  status: 'Pending' | 'In_Progress' | 'Completed' | 'Delayed' | 'Cancelled';
  milestone_type: 'Planning' | 'Design' | 'Implementation' | 'Testing' | 'Documentation' | 'Review' | 'Deployment';
  deliverables: string;
  success_criteria: string;
  assigned_user_id: number | null;
  completion_percentage: number;
  created_at: string;
  updated_at: string;
};

type POAMStp = {
  id: number;
  poam_id: number;
  stp_id: number;
  contribution_percentage: number;
  created_at: string;
  stp_title: string;
  stp_status: string;
};

type POAMComment = {
  id: number;
  poam_id: number;
  milestone_id: number | null;
  comment: string;
  comment_type: 'General' | 'Status_Update' | 'Risk_Assessment' | 'Technical_Note' | 'Management_Decision';
  created_by: number;
  created_at: string;
  updated_at: string;
  author_name: string;
  author_email: string;
};

export default function POAMDetailPage() {
  const params = useParams()
  const [poam, setPOAM] = useState<POAM | null>(null)
  const [loading, setLoading] = useState(true)
  const [milestones, setMilestones] = useState<Milestone[]>([])
  const [stps, setSTPs] = useState<POAMStp[]>([])
  const [comments, setComments] = useState<POAMComment[]>([])
  
  // Dialog states
  const [showMilestoneDialog, setShowMilestoneDialog] = useState(false)
  const [showCommentDialog, setShowCommentDialog] = useState(false)
  
  // Form states
  const [milestoneForm, setMilestoneForm] = useState({
    title: '',
    description: '',
    target_date: '',
    milestone_type: 'Implementation' as 'Planning' | 'Design' | 'Implementation' | 'Testing' | 'Documentation' | 'Review' | 'Deployment',
    deliverables: '',
    success_criteria: ''
  })
  const [commentForm, setCommentForm] = useState({
    comment: '',
    comment_type: 'General' as 'General' | 'Status_Update' | 'Risk_Assessment' | 'Technical_Note' | 'Management_Decision'
  })

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [poamRes, milestonesRes, stpsRes, commentsRes] = await Promise.all([
          fetch(`/api/poams/${params.id}`),
          fetch(`/api/poams/${params.id}/milestones`),
          fetch(`/api/poams/${params.id}/stps`),
          fetch(`/api/poams/${params.id}/comments`)
        ])
        
        if (poamRes.ok) {
          const poamData = await poamRes.json()
          setPOAM(poamData.item)
        }
        
        if (milestonesRes.ok) {
          const milestonesData = await milestonesRes.json()
          setMilestones(milestonesData.items)
        }
        
        if (stpsRes.ok) {
          const stpsData = await stpsRes.json()
          setSTPs(stpsData.items)
        }
        
        if (commentsRes.ok) {
          const commentsData = await commentsRes.json()
          setComments(commentsData.items)
        }
      } catch (error) {
        console.error('Failed to fetch POAM data:', error)
      } finally {
        setLoading(false)
      }
    }
    
    if (params.id) {
      fetchData()
    }
  }, [params.id])

  const getStatusVariant = (status: string) => {
    switch (status) {
      case 'Draft': return 'secondary'
      case 'Open': return 'destructive'
      case 'In_Progress': return 'default'
      case 'Completed': return 'default'
      case 'Closed': return 'outline'
      case 'Cancelled': return 'destructive'
      default: return 'secondary'
    }
  }

  const getSeverityVariant = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'destructive'
      case 'High': return 'destructive'
      case 'Medium': return 'outline'
      case 'Low': return 'secondary'
      default: return 'secondary'
    }
  }

  const isOverdue = (targetDate: string | null) => {
    if (!targetDate) return false
    return new Date(targetDate) < new Date()
  }

  const getMilestoneStatusVariant = (status: string) => {
    switch (status) {
      case 'Pending': return 'secondary'
      case 'In_Progress': return 'default'
      case 'Completed': return 'default'
      case 'Delayed': return 'destructive'
      case 'Cancelled': return 'destructive'
      default: return 'secondary'
    }
  }

  const getMilestoneStatusColor = (status: string) => {
    switch (status) {
      case 'Pending': return 'text-gray-600'
      case 'In_Progress': return 'text-blue-600'
      case 'Completed': return 'text-green-600'
      case 'Delayed': return 'text-red-600'
      case 'Cancelled': return 'text-red-600'
      default: return 'text-gray-600'
    }
  }

  const handleCreateMilestone = async () => {
    if (!params.id) return
    
    try {
      const response = await fetch(`/api/poams/${params.id}/milestones`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(milestoneForm)
      })
      
      if (response.ok) {
        const data = await response.json()
        setMilestones([...milestones, data.item])
        setShowMilestoneDialog(false)
        setMilestoneForm({
          title: '',
          description: '',
          target_date: '',
          milestone_type: 'Implementation',
          deliverables: '',
          success_criteria: ''
        })
      }
    } catch (error) {
      console.error('Failed to create milestone:', error)
    }
  }

  const handleUpdateMilestone = async (milestone: Milestone, updates: Partial<Milestone>) => {
    try {
      const response = await fetch(`/api/milestones/${milestone.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      })
      
      if (response.ok) {
        const data = await response.json()
        setMilestones(milestones.map(m => m.id === milestone.id ? data.item : m))
      }
    } catch (error) {
      console.error('Failed to update milestone:', error)
    }
  }

  const handleDeleteMilestone = async (milestone: Milestone) => {
    if (!confirm('Are you sure you want to delete this milestone?')) return
    
    try {
      const response = await fetch(`/api/milestones/${milestone.id}`, {
        method: 'DELETE'
      })
      
      if (response.ok) {
        setMilestones(milestones.filter(m => m.id !== milestone.id))
      }
    } catch (error) {
      console.error('Failed to delete milestone:', error)
    }
  }

  const handleCreateComment = async () => {
    if (!params.id) return
    
    try {
      const response = await fetch(`/api/poams/${params.id}/comments`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...commentForm,
          created_by: 1 // TODO: Get from auth
        })
      })
      
      if (response.ok) {
        const data = await response.json()
        setComments([data.item, ...comments])
        setShowCommentDialog(false)
        setCommentForm({
          comment: '',
          comment_type: 'General'
        })
      }
    } catch (error) {
      console.error('Failed to create comment:', error)
    }
  }

  const calculateOverallProgress = () => {
    if (milestones.length === 0) return 0
    const totalProgress = milestones.reduce((sum, m) => sum + m.completion_percentage, 0)
    return Math.round(totalProgress / milestones.length)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-muted-foreground">Loading POAM...</div>
      </div>
    )
  }

  if (!poam) {
    return (
      <div className="text-center py-8">
        <h2 className="text-2xl font-bold">POAM Not Found</h2>
        <p className="text-muted-foreground mt-2">The requested POAM could not be found.</p>
        <Link href="/vulnerability-center/poams" className="text-primary hover:underline mt-4 inline-block">
          ← Back to POAMs
        </Link>
      </div>
    )
  }

  const poamOverdue = isOverdue(poam.target_completion_date)

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="space-y-2">
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <Link href="/vulnerability-center/poams" className="hover:text-primary">POAMs</Link>
          <span>→</span>
          <span>{poam.poam_number}</span>
        </div>
        <div className="flex items-center gap-3">
          <div className="p-3 bg-blue-500/10 rounded-lg">
            <ClipboardList className="h-8 w-8 text-blue-600" />
          </div>
          <div className="flex-1">
            <h1 className="text-3xl font-bold tracking-tight">{poam.poam_number}: {poam.title}</h1>
            <div className="flex items-center gap-3 mt-2">
              <Badge variant={getStatusVariant(poam.status)}>
                {poam.status.replace('_', ' ')}
              </Badge>
              <Badge variant={getSeverityVariant(poam.severity)}>
                {poam.severity} Severity
              </Badge>
              <Badge variant="outline">
                {poam.priority} Priority
              </Badge>
              {poamOverdue && (
                <Badge variant="destructive" className="animate-pulse">
                  <AlertCircle className="h-3 w-3 mr-1" />
                  Overdue
                </Badge>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center gap-2">
              <Package className="h-4 w-4" />
              Package
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-lg font-semibold">Package {poam.package_id}</div>
            {poam.group_id && (
              <p className="text-sm text-muted-foreground">Group {poam.group_id}</p>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center gap-2">
              <Shield className="h-4 w-4" />
              NIST Control
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-lg font-semibold">
              {poam.nist_control_id || 'Not Assigned'}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center gap-2">
              <Target className="h-4 w-4" />
              Target Date
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-lg font-semibold">
              {poam.target_completion_date 
                ? new Date(poam.target_completion_date).toLocaleDateString()
                : 'Not Set'
              }
            </div>
            {poamOverdue && (
              <p className="text-sm text-red-600">Overdue</p>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center gap-2">
              <DollarSign className="h-4 w-4" />
              Cost
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-lg font-semibold">
              {poam.estimated_cost 
                ? `$${poam.estimated_cost.toLocaleString()}`
                : 'Not Estimated'
              }
            </div>
            {poam.actual_cost && (
              <p className="text-sm text-muted-foreground">
                Actual: ${poam.actual_cost.toLocaleString()}
              </p>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Details Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Weakness Description</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground whitespace-pre-wrap">
              {poam.weakness_description || 'No description provided.'}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Point of Contact</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {poam.poc_name && (
                <p className="text-sm"><strong>Name:</strong> {poam.poc_name}</p>
              )}
              {poam.poc_email && (
                <p className="text-sm"><strong>Email:</strong> {poam.poc_email}</p>
              )}
              {poam.poc_phone && (
                <p className="text-sm"><strong>Phone:</strong> {poam.poc_phone}</p>
              )}
              {!poam.poc_name && !poam.poc_email && !poam.poc_phone && (
                <p className="text-sm text-muted-foreground">No contact information provided.</p>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Progress Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5" />
            Overall Progress
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Completion</span>
              <span className="text-sm font-bold">{calculateOverallProgress()}%</span>
            </div>
            <Progress value={calculateOverallProgress()} className="w-full" />
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div className="text-center">
                <div className="text-lg font-bold text-green-600">
                  {milestones.filter(m => m.status === 'Completed').length}
                </div>
                <div className="text-muted-foreground">Completed</div>
              </div>
              <div className="text-center">
                <div className="text-lg font-bold text-blue-600">
                  {milestones.filter(m => m.status === 'In_Progress').length}
                </div>
                <div className="text-muted-foreground">In Progress</div>
              </div>
              <div className="text-center">
                <div className="text-lg font-bold text-gray-600">
                  {milestones.filter(m => m.status === 'Pending').length}
                </div>
                <div className="text-muted-foreground">Pending</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Interactive Sections */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Associated STPs */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Associated STPs ({stps.length})
            </CardTitle>
            <CardDescription>Security Test Plans linked to this POAM</CardDescription>
          </CardHeader>
          <CardContent>
            {stps.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <p>No STPs associated with this POAM.</p>
              </div>
            ) : (
              <div className="space-y-3">
                {stps.map((stp) => (
                  <div key={stp.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex-1">
                      <div className="font-medium">{stp.stp_title}</div>
                      <div className="text-sm text-muted-foreground">
                        Contribution: {stp.contribution_percentage}%
                      </div>
                    </div>
                    <Badge variant="outline">{stp.stp_status}</Badge>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Recent Comments */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <MessageCircle className="h-5 w-5" />
                Comments ({comments.length})
              </div>
              <Dialog open={showCommentDialog} onOpenChange={setShowCommentDialog}>
                <DialogTrigger asChild>
                  <Button size="sm">
                    <Plus className="h-4 w-4 mr-1" />
                    Add Comment
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Add Comment</DialogTitle>
                    <DialogDescription>
                      Add a comment or status update to this POAM
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="comment_type">Comment Type</Label>
                      <Select 
                        value={commentForm.comment_type} 
                        onValueChange={(value) => setCommentForm({...commentForm, comment_type: value as typeof commentForm.comment_type})}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="General">General</SelectItem>
                          <SelectItem value="Status_Update">Status Update</SelectItem>
                          <SelectItem value="Risk_Assessment">Risk Assessment</SelectItem>
                          <SelectItem value="Technical_Note">Technical Note</SelectItem>
                          <SelectItem value="Management_Decision">Management Decision</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="comment">Comment</Label>
                      <Textarea
                        id="comment"
                        value={commentForm.comment}
                        onChange={(e) => setCommentForm({...commentForm, comment: e.target.value})}
                        placeholder="Enter your comment..."
                        rows={4}
                      />
                    </div>
                  </div>
                  <DialogFooter>
                    <Button variant="outline" onClick={() => setShowCommentDialog(false)}>
                      Cancel
                    </Button>
                    <Button onClick={handleCreateComment} disabled={!commentForm.comment.trim()}>
                      Add Comment
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {comments.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <p>No comments yet.</p>
              </div>
            ) : (
              <div className="space-y-4 max-h-64 overflow-y-auto">
                {comments.slice(0, 5).map((comment) => (
                  <div key={comment.id} className="border-l-2 border-blue-200 pl-4">
                    <div className="flex items-center gap-2 mb-1">
                      <User className="h-4 w-4" />
                      <span className="font-medium text-sm">{comment.author_name}</span>
                      <Badge variant="outline" className="text-xs">
                        {comment.comment_type.replace('_', ' ')}
                      </Badge>
                      <span className="text-xs text-muted-foreground">
                        {new Date(comment.created_at).toLocaleString()}
                      </span>
                    </div>
                    <p className="text-sm">{comment.comment}</p>
                  </div>
                ))}
                {comments.length > 5 && (
                  <div className="text-center text-sm text-muted-foreground">
                    And {comments.length - 5} more comments...
                  </div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Milestones */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Milestones ({milestones.length})
            </div>
            <Dialog open={showMilestoneDialog} onOpenChange={setShowMilestoneDialog}>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Milestone
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Add Milestone</DialogTitle>
                  <DialogDescription>
                    Create a new milestone to track progress toward POAM completion
                  </DialogDescription>
                </DialogHeader>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="milestone_title">Title</Label>
                    <Input
                      id="milestone_title"
                      value={milestoneForm.title}
                      onChange={(e) => setMilestoneForm({...milestoneForm, title: e.target.value})}
                      placeholder="Milestone title..."
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="milestone_type">Type</Label>
                    <Select 
                      value={milestoneForm.milestone_type} 
                      onValueChange={(value) => setMilestoneForm({...milestoneForm, milestone_type: value as typeof milestoneForm.milestone_type})}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Planning">Planning</SelectItem>
                        <SelectItem value="Design">Design</SelectItem>
                        <SelectItem value="Implementation">Implementation</SelectItem>
                        <SelectItem value="Testing">Testing</SelectItem>
                        <SelectItem value="Documentation">Documentation</SelectItem>
                        <SelectItem value="Review">Review</SelectItem>
                        <SelectItem value="Deployment">Deployment</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="target_date">Target Date</Label>
                    <Input
                      id="target_date"
                      type="date"
                      value={milestoneForm.target_date}
                      onChange={(e) => setMilestoneForm({...milestoneForm, target_date: e.target.value})}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="milestone_description">Description</Label>
                    <Textarea
                      id="milestone_description"
                      value={milestoneForm.description}
                      onChange={(e) => setMilestoneForm({...milestoneForm, description: e.target.value})}
                      placeholder="Describe this milestone..."
                      rows={3}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="deliverables">Deliverables</Label>
                    <Textarea
                      id="deliverables"
                      value={milestoneForm.deliverables}
                      onChange={(e) => setMilestoneForm({...milestoneForm, deliverables: e.target.value})}
                      placeholder="What will be delivered..."
                      rows={3}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="success_criteria">Success Criteria</Label>
                    <Textarea
                      id="success_criteria"
                      value={milestoneForm.success_criteria}
                      onChange={(e) => setMilestoneForm({...milestoneForm, success_criteria: e.target.value})}
                      placeholder="How success will be measured..."
                      rows={3}
                    />
                  </div>
                </div>
                <DialogFooter>
                  <Button variant="outline" onClick={() => setShowMilestoneDialog(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleCreateMilestone} disabled={!milestoneForm.title.trim()}>
                    Create Milestone
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </CardTitle>
          <CardDescription>Track progress toward POAM completion</CardDescription>
        </CardHeader>
        <CardContent>
          {milestones.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              <p>No milestones defined.</p>
              <p className="text-sm">Create milestones to track progress toward completion.</p>
            </div>
          ) : (
            <div className="space-y-4">
              {milestones.map((milestone) => (
                <Card key={milestone.id} className="border">
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between gap-4">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <div className="flex items-center gap-2">
                            {milestone.status === 'Completed' ? (
                              <CheckCircle2 className="h-5 w-5 text-green-600" />
                            ) : (
                              <Circle className="h-5 w-5 text-gray-400" />
                            )}
                            <h4 className="font-medium">{milestone.title}</h4>
                          </div>
                          <Badge variant={getMilestoneStatusVariant(milestone.status)} className={getMilestoneStatusColor(milestone.status)}>
                            {milestone.status.replace('_', ' ')}
                          </Badge>
                          <Badge variant="outline">{milestone.milestone_type}</Badge>
                        </div>
                        
                        {milestone.description && (
                          <p className="text-sm text-muted-foreground mb-2">{milestone.description}</p>
                        )}
                        
                        <div className="flex items-center gap-4 text-sm text-muted-foreground">
                          {milestone.target_date && (
                            <div className="flex items-center gap-1">
                              <Calendar className="h-4 w-4" />
                              <span>Target: {new Date(milestone.target_date).toLocaleDateString()}</span>
                              {isOverdue(milestone.target_date) && milestone.status !== 'Completed' && (
                                <Badge variant="destructive" className="ml-2 text-xs">Overdue</Badge>
                              )}
                            </div>
                          )}
                          {milestone.actual_date && (
                            <div className="flex items-center gap-1">
                              <CheckCircle2 className="h-4 w-4" />
                              <span>Completed: {new Date(milestone.actual_date).toLocaleDateString()}</span>
                            </div>
                          )}
                        </div>

                        <div className="mt-3 space-y-2">
                          <div className="flex items-center justify-between text-sm">
                            <span>Progress</span>
                            <span>{milestone.completion_percentage}%</span>
                          </div>
                          <Progress value={milestone.completion_percentage} className="w-full" />
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <Select
                          value={milestone.status}
                          onValueChange={(value) => handleUpdateMilestone(milestone, { status: value as Milestone['status'] })}
                        >
                          <SelectTrigger className="w-32">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Pending">Pending</SelectItem>
                            <SelectItem value="In_Progress">In Progress</SelectItem>
                            <SelectItem value="Completed">Completed</SelectItem>
                            <SelectItem value="Delayed">Delayed</SelectItem>
                            <SelectItem value="Cancelled">Cancelled</SelectItem>
                          </SelectContent>
                        </Select>
                        <Input
                          type="number"
                          min="0"
                          max="100"
                          value={milestone.completion_percentage}
                          onChange={(e) => handleUpdateMilestone(milestone, { completion_percentage: parseInt(e.target.value) })}
                          className="w-20"
                          onBlur={(e) => {
                            const value = parseInt(e.target.value)
                            if (value === 100 && milestone.status !== 'Completed') {
                              handleUpdateMilestone(milestone, { 
                                completion_percentage: 100,
                                status: 'Completed',
                                actual_date: new Date().toISOString()
                              })
                            }
                          }}
                        />
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDeleteMilestone(milestone)}
                          className="text-red-600 hover:text-red-800"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Timestamps */}
      <Card>
        <CardHeader>
          <CardTitle>Audit Information</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div className="flex items-center gap-2 text-muted-foreground">
              <Clock className="h-4 w-4" />
              <span>Created: {new Date(poam.created_at).toLocaleString()}</span>
            </div>
            <div className="flex items-center gap-2 text-muted-foreground">
              <Clock className="h-4 w-4" />
              <span>Last Updated: {new Date(poam.updated_at).toLocaleString()}</span>
            </div>
            {poam.actual_completion_date && (
              <div className="flex items-center gap-2 text-green-600">
                <Target className="h-4 w-4" />
                <span>Completed: {new Date(poam.actual_completion_date).toLocaleString()}</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}