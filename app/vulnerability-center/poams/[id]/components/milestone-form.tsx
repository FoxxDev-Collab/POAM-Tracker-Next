'use client';

import React, { useState, useEffect } from 'react';
import { z } from 'zod';

const milestoneSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  description: z.string().optional(),
  targetDate: z.string().optional(),
  milestoneType: z.enum(['Planning', 'Design', 'Implementation', 'Testing', 'Documentation', 'Review', 'Deployment']),
  deliverables: z.string().optional(),
  successCriteria: z.string().optional(),
  assignedUserId: z.number().optional(),
  completionPercentage: z.number().min(0).max(100).optional()
});

type MilestoneFormData = z.infer<typeof milestoneSchema>;

interface MilestoneFormProps {
  poamId: number;
  milestone?: {
    id?: number;
    title?: string;
    description?: string;
    targetDate?: string;
    milestoneType?: 'Planning' | 'Design' | 'Implementation' | 'Testing' | 'Documentation' | 'Review' | 'Deployment';
    deliverables?: string;
    successCriteria?: string;
    assignedUserId?: number;
    completionPercentage?: number;
  };
  onClose: () => void;
  onSuccess: () => void;
}

export default function MilestoneForm({ poamId, milestone, onClose, onSuccess }: MilestoneFormProps) {
  const [loading, setLoading] = useState(false);
  const [users, setUsers] = useState<Array<{id: number; name: string; email: string}>>([]);
  const [errors, setErrors] = useState<Record<string, string>>({});
  
  const [formData, setFormData] = useState<MilestoneFormData>({
    title: milestone?.title || '',
    description: milestone?.description || '',
    targetDate: milestone?.targetDate || '',
    milestoneType: milestone?.milestoneType || 'Implementation',
    deliverables: milestone?.deliverables || '',
    successCriteria: milestone?.successCriteria || '',
    assignedUserId: milestone?.assignedUserId || undefined,
    completionPercentage: milestone?.completionPercentage || 0
  });

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const res = await fetch('/api/users');
      if (res.ok) {
        const data = await res.json();
        setUsers(data.items || []);
      }
    } catch (error) {
      console.error('Failed to fetch users:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      const validation = milestoneSchema.safeParse(formData);
      
      if (!validation.success) {
        const fieldErrors: Record<string, string> = {};
        validation.error.issues.forEach((err) => {
          const path = err.path.join('.');
          fieldErrors[path] = err.message;
        });
        setErrors(fieldErrors);
        return;
      }

      const url = milestone 
        ? `/api/poams/${poamId}/milestones/${milestone.id}`
        : `/api/poams/${poamId}/milestones`;
      
      const method = milestone ? 'PUT' : 'POST';

      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: formData.title,
          description: formData.description,
          target_date: formData.targetDate,
          milestone_type: formData.milestoneType,
          deliverables: formData.deliverables,
          success_criteria: formData.successCriteria,
          assigned_user_id: formData.assignedUserId,
          completion_percentage: formData.completionPercentage
        })
      });

      if (res.ok) {
        onSuccess();
      } else {
        const error = await res.json();
        alert(error.error || `Failed to ${milestone ? 'update' : 'create'} milestone`);
      }
    } catch (error) {
      console.error(`Failed to ${milestone ? 'update' : 'create'} milestone:`, error);
      alert(`An error occurred while ${milestone ? 'updating' : 'creating'} the milestone`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-hidden flex flex-col">
        <div className="p-4 border-b">
          <h2 className="text-xl font-bold">
            {milestone ? 'Edit Milestone' : 'Add New Milestone'}
          </h2>
        </div>

        <form onSubmit={handleSubmit} className="flex-1 overflow-y-auto p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Title *</label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter milestone title"
            />
            {errors.title && <p className="text-red-500 text-sm mt-1">{errors.title}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Description</label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
              placeholder="Describe the milestone"
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Milestone Type</label>
              <select
                value={formData.milestoneType}
                onChange={(e) => setFormData(prev => ({ ...prev, milestoneType: e.target.value as any }))}
                className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="Planning">Planning</option>
                <option value="Design">Design</option>
                <option value="Implementation">Implementation</option>
                <option value="Testing">Testing</option>
                <option value="Documentation">Documentation</option>
                <option value="Review">Review</option>
                <option value="Deployment">Deployment</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Target Date</label>
              <input
                type="date"
                value={formData.targetDate}
                onChange={(e) => setFormData(prev => ({ ...prev, targetDate: e.target.value }))}
                className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Assigned To</label>
            <select
              value={formData.assignedUserId || ''}
              onChange={(e) => setFormData(prev => ({ 
                ...prev, 
                assignedUserId: e.target.value ? parseInt(e.target.value) : undefined 
              }))}
              className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Unassigned</option>
              {users.map(user => (
                <option key={user.id} value={user.id}>{user.name}</option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">
              Completion Percentage ({formData.completionPercentage || 0}%)
            </label>
            <input
              type="range"
              min="0"
              max="100"
              step="5"
              value={formData.completionPercentage || 0}
              onChange={(e) => setFormData(prev => ({ 
                ...prev, 
                completionPercentage: parseInt(e.target.value) 
              }))}
              className="w-full"
            />
            <div className="flex justify-between text-xs text-gray-500 mt-1">
              <span>0%</span>
              <span>25%</span>
              <span>50%</span>
              <span>75%</span>
              <span>100%</span>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Deliverables</label>
            <textarea
              value={formData.deliverables}
              onChange={(e) => setFormData(prev => ({ ...prev, deliverables: e.target.value }))}
              className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
              placeholder="List the expected deliverables for this milestone"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Success Criteria</label>
            <textarea
              value={formData.successCriteria}
              onChange={(e) => setFormData(prev => ({ ...prev, successCriteria: e.target.value }))}
              className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
              placeholder="Define the criteria for considering this milestone complete"
            />
          </div>
        </form>

        <div className="p-4 border-t flex justify-between">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            Cancel
          </button>
          
          <button
            type="submit"
            onClick={handleSubmit}
            disabled={loading}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? (milestone ? 'Updating...' : 'Creating...') : (milestone ? 'Update Milestone' : 'Create Milestone')}
          </button>
        </div>
      </div>
    </div>
  );
}