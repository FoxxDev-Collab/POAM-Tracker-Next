"use client"

import { useState, useEffect, use } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { FileSearch, ShieldAlert, ShieldCheck, ScanLine, ArrowRight, ArrowLeft, RefreshCw, XCircle, Server } from "lucide-react"
import { toast } from "sonner"
import { cn } from "@/lib/utils"

interface System {
  id: number
  name: string
  description: string
  ipAddress: string | null
  operatingSystem: string | null
  packageId: number
  groupId: number | null
  package: { name: string }
  group: { name: string } | null
}

interface StigFinding {
  id: number
  ruleId: string
  ruleTitle: string
  severity: 'high' | 'medium' | 'low'
  status: 'Open' | 'NotAFinding' | 'Not_Applicable' | 'Not_Reviewed'
}

interface StigScan {
  id: number
  title: string
  checklistId: string | null
  createdAt: string
}

export default function SystemDetailPage({ params }: { params: Promise<{ id: string }> }) {
  const resolvedParams = use(params)
  const router = useRouter()
  const [system, setSystem] = useState<System | null>(null)
  const [findings, setFindings] = useState<StigFinding[]>([])
  const [scans, setScans] = useState<StigScan[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const fetchData = async () => {
    setLoading(true)
    setError(null)
    try {
      // Fetch system details
      const systemResponse = await fetch(`/api/systems/${resolvedParams.id}`)
      if (!systemResponse.ok) {
        throw new Error('System not found')
      }
      const systemData = await systemResponse.json()
      setSystem(systemData)

      // Fetch STIG findings
      const findingsResponse = await fetch(`/api/systems/${resolvedParams.id}/stig/findings`)
      if (findingsResponse.ok) {
        const findingsData = await findingsResponse.json()
        setFindings(findingsData.items || [])
      }

      // Fetch STIG scans
      const scansResponse = await fetch(`/api/systems/${resolvedParams.id}/stig/scans`)
      if (scansResponse.ok) {
        const scansData = await scansResponse.json()
        setScans(scansData.items || [])
      }

    } catch (err) {
      console.error("Error fetching system data:", err)
      setError(err instanceof Error ? err.message : "Failed to load system data")
      toast.error("Failed to load system data")
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchData()
  }, [resolvedParams.id])

  function getCountBySeverity(severity: string) {
    return findings.filter(f => f.severity?.toLowerCase() === severity.toLowerCase()).length
  }

  function getCountByStatus(status: string) {
    return findings.filter(f => f.status === status).length
  }

  function statusAccent(status: string) {
    switch (status) {
      case 'Open': return 'border-red-600/70'
      case 'Not_Reviewed': return 'border-blue-600/70'
      case 'Not_Applicable': return 'border-gray-500/60'
      case 'NotAFinding': return 'border-green-600/70'
      default: return 'border-muted-foreground/40'
    }
  }

  if (loading) {
    return (
      <div className="p-6 flex items-center justify-center h-64">
        <RefreshCw className="h-8 w-8 animate-spin" />
      </div>
    )
  }

  if (error || !system) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="text-center py-12">
            <XCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">System Not Found</h3>
            <p className="text-muted-foreground mb-4">{error || "System not found"}</p>
            <Button onClick={() => router.push('/vulnerability-center/packages')} variant="outline">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Packages
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  const latestScan = scans[0]
  const totalFindings = findings.length

  const statusBreakdown = [
    { key: 'Open', count: getCountByStatus('Open') },
    { key: 'NotAFinding', count: getCountByStatus('NotAFinding') },
    { key: 'Not_Applicable', count: getCountByStatus('Not_Applicable') },
    { key: 'Not_Reviewed', count: getCountByStatus('Not_Reviewed') }
  ].filter(item => item.count > 0)

  return (
    <div className="p-6 grid gap-6">
        {/* Header */}
        <div className="rounded-md border bg-card text-card-foreground p-5">
          <div className="mb-3">
            <Button variant="outline" size="sm" onClick={() => router.back()}>
              <ArrowLeft className="h-4 w-4" />
              {system.groupId ? 'Back to Group' : 'Back to Package'}
            </Button>
          </div>
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div className="space-y-1">
              <h1 className="text-2xl font-semibold flex items-center gap-2">
                <Server className="h-6 w-6" />
                {system.name}
              </h1>
              <p className="text-sm text-muted-foreground">{system.description}</p>
              <div className="flex flex-wrap gap-4 text-sm text-muted-foreground">
                <span>Package: {system.package?.name}</span>
                {system.group && <span>Group: {system.group.name}</span>}
                {system.ipAddress && <span>IP: {system.ipAddress}</span>}
                {system.operatingSystem && <span>OS: {system.operatingSystem}</span>}
              </div>
            </div>
            <div className="flex flex-wrap gap-2">
              <Button onClick={() => router.push(`/vulnerability-center/systems/${system.id}/stig`)}>
                <ShieldAlert className="h-4 w-4" />
                STIG Findings
                <ArrowRight className="h-4 w-4" />
              </Button>
              <Button onClick={fetchData} variant="outline" size="sm" disabled={loading}>
                <RefreshCw className={cn("h-4 w-4 mr-2", loading && "animate-spin")} />
                Refresh
              </Button>
            </div>
          </div>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card className="border-t-4 border-blue-600 bg-blue-50/60 dark:bg-blue-950/20">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Findings</CardTitle>
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{totalFindings}</CardContent>
          </Card>
          <Card className="border-t-4 border-red-600 bg-red-50/60 dark:bg-red-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">High (CAT I)</CardTitle>
              <ShieldAlert className="h-4 w-4 text-red-600" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{getCountBySeverity('high')}</CardContent>
          </Card>
          <Card className="border-t-4 border-orange-500 bg-orange-50/60 dark:bg-orange-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">Medium (CAT II)</CardTitle>
              <ShieldAlert className="h-4 w-4 text-orange-500" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{getCountBySeverity('medium')}</CardContent>
          </Card>
          <Card className="border-t-4 border-yellow-500 bg-yellow-50/60 dark:bg-yellow-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">Low (CAT III)</CardTitle>
              <ShieldCheck className="h-4 w-4 text-yellow-500" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{getCountBySeverity('low')}</CardContent>
          </Card>
        </div>

        {/* Breakdown Panels */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>Status Breakdown</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 text-sm">
                {statusBreakdown.map((item) => (
                  <div key={item.key} className={`flex items-center justify-between rounded-md border px-3 py-2 bg-background/50 border-l-4 ${statusAccent(item.key)}`}>
                    <span className="truncate capitalize">{item.key === 'NotAFinding' ? 'Not a Finding' : item.key.replace(/_/g, ' ')}</span>
                    <span className="font-semibold">{item.count}</span>
                  </div>
                ))}
                {statusBreakdown.length === 0 && <div className="text-sm text-muted-foreground">No STIG data yet.</div>}
              </div>
            </CardContent>
          </Card>
          <Card className="border-t-4 border-emerald-600 bg-emerald-50/60 dark:bg-emerald-950/20">
            <CardHeader>
              <CardTitle>Latest STIG Scan</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-sm">
              {latestScan ? (
                <>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Title</span>
                    <span className="truncate max-w-[60%] text-right">{latestScan.title || '—'}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Checklist ID</span>
                    <span>{latestScan.checklistId || '—'}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Imported</span>
                    <span>{new Date(latestScan.createdAt).toLocaleString()}</span>
                  </div>
                  <Separator />
                  <div className="flex justify-end">
                    <Button variant="outline" size="sm" onClick={() => router.push(`/vulnerability-center/systems/${system.id}/stig`)}>
                      <ScanLine className="h-4 w-4" />
                      View Findings
                    </Button>
                  </div>
                </>
              ) : (
                <div className="text-muted-foreground">No scans yet. Upload a STIG checklist file (.ckl) on the STIG page.</div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
  )
}
