import Link from "next/link"
// import { MainLayout } from "@/components/layout/main-layout"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Systems, STIG, getDb } from "@/lib/db"
import { FileSearch, ShieldAlert, ShieldCheck, ScanLine, ArrowRight, ArrowLeft } from "lucide-react"

export default async function SystemDetailPage({ params }: { params: Promise<{ id: string }> }) {
  const { id: pid } = await params
  const id = Number(pid)
  const system = Systems.get(id)
  if (!system) {
    return (
      <div className="p-6">
        <div className="text-sm text-muted-foreground">System not found.</div>
        <div className="mt-4">
          <Link href="/packages">Back to Packages</Link>
        </div>
      </div>
    )
  }

  // Server-side STIG stats
  const scans = STIG.listScansBySystem(id)
  const latestScan = scans[0]

  const totalRow = getDb().prepare("SELECT COUNT(*) as c FROM stig_findings WHERE system_id = ?").get(id) as { c: number } | undefined
  const totalFindings = totalRow?.c ?? 0

  const bySeverity = getDb().prepare("SELECT COALESCE(severity, 'unknown') as k, COUNT(*) as c FROM stig_findings WHERE system_id = ? GROUP BY k").all(id) as { k: string, c: number }[]
  const byStatus = getDb().prepare("SELECT COALESCE(status, 'unknown') as k, COUNT(*) as c FROM stig_findings WHERE system_id = ? GROUP BY k").all(id) as { k: string, c: number }[]

  function getCount(arr: { k: string, c: number }[], key: string) {
    return arr.find(x => (x.k || '').toLowerCase() === key.toLowerCase())?.c ?? 0
  }

  function statusAccent(k: string) {
    const v = (k || '').toLowerCase()
    if (v === 'open') return 'border-red-600/70'
    if (v === 'not_reviewed') return 'border-blue-600/70'
    if (v === 'not_applicable') return 'border-gray-500/60'
    if (v === 'not_a_finding') return 'border-green-600/70'
    if (v === 'mitigated') return 'border-amber-600/70'
    return 'border-muted-foreground/40'
  }

  return (
    <div className="p-6 grid gap-6">
        {/* Header */}
        <div className="rounded-md border bg-card text-card-foreground p-5">
          <div className="mb-3">
            <Button asChild variant="outline" size="sm">
              <Link href={system.group_id ? `/vulnerability-center/${system.package_id}/groups/${system.group_id}` : `/vulnerability-center/${system.package_id}`}>
                <ArrowLeft className="h-4 w-4" />
                {system.group_id ? 'Back to Group' : 'Back to Package'}
              </Link>
            </Button>
          </div>
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div className="space-y-1">
              <h1 className="text-2xl font-semibold">{system.name}</h1>
              <p className="text-sm text-muted-foreground">{system.description}</p>
            </div>
            <div className="flex flex-wrap gap-2">
              <Button asChild>
                <Link href={`/vulnerability-center/systems/${id}/stig`}>
                  <ShieldAlert className="h-4 w-4" />
                  STIG Findings
                  <ArrowRight className="h-4 w-4" />
                </Link>
              </Button>
              <Button asChild variant="outline">
                <Link href={`/vulnerability-center/systems/${id}/nessus`}>
                  <FileSearch className="h-4 w-4" />
                  Nessus Findings
                  <ArrowRight className="h-4 w-4" />
                </Link>
              </Button>
            </div>
          </div>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card className="border-t-4 border-blue-600 bg-blue-50/60 dark:bg-blue-950/20">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Findings</CardTitle>
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{totalFindings}</CardContent>
          </Card>
          <Card className="border-t-4 border-red-600 bg-red-50/60 dark:bg-red-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">High (CAT I)</CardTitle>
              <ShieldAlert className="h-4 w-4 text-red-600" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{getCount(bySeverity, 'high') + getCount(bySeverity, 'cat i') + getCount(bySeverity, 'cat1')}</CardContent>
          </Card>
          <Card className="border-t-4 border-orange-500 bg-orange-50/60 dark:bg-orange-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">Medium (CAT II)</CardTitle>
              <ShieldAlert className="h-4 w-4 text-orange-500" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{getCount(bySeverity, 'medium') + getCount(bySeverity, 'cat ii') + getCount(bySeverity, 'cat2')}</CardContent>
          </Card>
          <Card className="border-t-4 border-yellow-500 bg-yellow-50/60 dark:bg-yellow-950/20">
            <CardHeader className="pb-2 flex flex-row items-center justify-between">
              <CardTitle className="text-sm font-medium">Low (CAT III)</CardTitle>
              <ShieldCheck className="h-4 w-4 text-yellow-500" />
            </CardHeader>
            <CardContent className="text-3xl font-semibold">{getCount(bySeverity, 'low') + getCount(bySeverity, 'cat iii') + getCount(bySeverity, 'cat3')}</CardContent>
          </Card>
        </div>

        {/* Breakdown Panels */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>Status Breakdown</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 text-sm">
                {byStatus.map((s) => (
                  <div key={s.k} className={`flex items-center justify-between rounded-md border px-3 py-2 bg-background/50 border-l-4 ${statusAccent(s.k)}`}>
                    <span className="truncate capitalize">{(s.k || 'unknown').replace(/_/g, ' ')}</span>
                    <span className="font-semibold">{s.c}</span>
                  </div>
                ))}
                {byStatus.length === 0 && <div className="text-sm text-muted-foreground">No data yet.</div>}
              </div>
            </CardContent>
          </Card>
          <Card className="border-t-4 border-emerald-600 bg-emerald-50/60 dark:bg-emerald-950/20">
            <CardHeader>
              <CardTitle>Latest STIG Scan</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-sm">
              {latestScan ? (
                <>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Title</span>
                    <span className="truncate max-w-[60%] text-right">{latestScan.title ?? '—'}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Checklist ID</span>
                    <span>{latestScan.checklist_id ?? '—'}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Imported</span>
                    <span>{new Date(latestScan.created_at).toLocaleString()}</span>
                  </div>
                  <Separator />
                  <div className="flex justify-end">
                    <Button asChild variant="outline" size="sm">
                      <Link href={`/vulnerability-center/systems/${id}/stig`}>
                        <ScanLine className="h-4 w-4" />
                        View Findings
                      </Link>
                    </Button>
                  </div>
                </>
              ) : (
                <div className="text-muted-foreground">No scans yet. Upload a CKLB JSON on the STIG page.</div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
  )
}
