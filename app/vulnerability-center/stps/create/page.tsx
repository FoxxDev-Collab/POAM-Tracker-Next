"use client"

import { useState, useEffect } from "react"
import { ArrowLeft, ArrowRight, Package, Users, Shield, FileCheck, CheckCircle2 } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Progress } from "@/components/ui/progress"
import Link from "next/link"
import { useRouter } from "next/navigation"

type Package = {
  id: number;
  name: string;
  description: string;
}

type Group = {
  id: number;
  name: string;
  description: string;
  systems_count: number;
}

type System = {
  id: number;
  name: string;
  description: string;
  last_scan_date: string | null;
}

type Vulnerability = {
  vuln_id: string;  // Group ID (V-xxxxx)
  rule_id: string;  // Rule ID (SV-xxxxx)
  rule_title: string;
  severity: string;
  status: string;
  affected_systems: string[];
  system_ids: number[];
  finding_details: string;
  check_content: string;
  fix_text: string;
}

const WIZARD_STEPS = [
  { id: 1, title: "Select Package", description: "Choose ATO Package" },
  { id: 2, title: "Select Group", description: "Choose Group within Package" },
  { id: 3, title: "Select Systems", description: "Choose systems to test" },
  { id: 4, title: "Select Vulnerabilities", description: "Review open findings" },
  { id: 5, title: "Configure STP", description: "Set up test plan details" },
  { id: 6, title: "Review & Create", description: "Review and create STP" },
]

export default function CreateSTPPage() {
  const router = useRouter()
  const [currentStep, setCurrentStep] = useState(1)
  const [loading, setLoading] = useState(false)
  
  // Form data
  const [selectedPackage, setSelectedPackage] = useState<Package | null>(null)
  const [selectedGroup, setSelectedGroup] = useState<Group | null>(null)
  const [selectedSystems, setSelectedSystems] = useState<System[]>([])
  const [selectedVulnerabilities, setSelectedVulnerabilities] = useState<Vulnerability[]>([])
  const [stpConfig, setStpConfig] = useState({
    title: '',
    description: '',
    priority: 'Medium' as 'Low' | 'Medium' | 'High' | 'Critical',
    due_date: ''
  })

  // Data
  const [packages, setPackages] = useState<Package[]>([])
  const [groups, setGroups] = useState<Group[]>([])
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [systems, setSystems] = useState<System[]>([])

  // Load packages on mount
  useEffect(() => {
    const fetchPackages = async () => {
      try {
        const response = await fetch('/api/packages')
        if (response.ok) {
          const data = await response.json()
          setPackages(data.items)
        }
      } catch (error) {
        console.error('Failed to fetch packages:', error)
      }
    }
    fetchPackages()
  }, [])

  // Load groups when package is selected
  useEffect(() => {
    if (selectedPackage) {
      const fetchGroups = async () => {
        setLoading(true)
        try {
          const response = await fetch(`/api/packages/${selectedPackage.id}/groups`)
          if (response.ok) {
            const data = await response.json()
            setGroups(data.items)
          }
        } catch (error) {
          console.error('Failed to fetch groups:', error)
        } finally {
          setLoading(false)
        }
      }
      fetchGroups()
    }
  }, [selectedPackage])

  // Load systems when group is selected
  useEffect(() => {
    if (selectedGroup) {
      const fetchSystems = async () => {
        setLoading(true)
        try {
          const systemsResponse = await fetch(`/api/groups/${selectedGroup.id}/systems`)
          if (systemsResponse.ok) {
            const systemsData = await systemsResponse.json()
            setSystems(systemsData.items)
          }
        } catch (error) {
          console.error('Failed to fetch systems:', error)
        } finally {
          setLoading(false)
        }
      }
      fetchSystems()
    }
  }, [selectedGroup])

  // Load vulnerabilities when systems are selected
  useEffect(() => {
    if (selectedSystems.length > 0) {
      const fetchVulnerabilities = async () => {
        setLoading(true)
        try {
          // Get OPEN vulnerabilities for selected systems
          const systemIds = selectedSystems.map(s => s.id).join(',')
          const vulnResponse = await fetch(`/api/vulnerabilities/systems?ids=${systemIds}&status=open`)
          if (vulnResponse.ok) {
            const vulnData = await vulnResponse.json()
            
            // Filter for only OPEN findings
            const openVulns = vulnData.vulnerabilities.filter((v: Vulnerability) => 
              v.status.toLowerCase() === 'open' || v.status.toLowerCase() === 'not_reviewed'
            )
            
            // Auto-select CAT I open findings
            const catIOpenVulns = openVulns.filter((v: Vulnerability) => 
              v.severity.toLowerCase().includes('cat i') || v.severity.toLowerCase().includes('high')
            )
            
            setVulnerabilities(openVulns)
            setSelectedVulnerabilities(catIOpenVulns)
          }
        } catch (error) {
          console.error('Failed to fetch vulnerabilities:', error)
        } finally {
          setLoading(false)
        }
      }
      fetchVulnerabilities()
    }
  }, [selectedSystems])

  const handleNext = () => {
    if (currentStep < WIZARD_STEPS.length) {
      setCurrentStep(currentStep + 1)
    }
  }

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleCreateSTP = async () => {
    if (!selectedPackage || !selectedGroup || selectedSystems.length === 0 || selectedVulnerabilities.length === 0) {
      return
    }

    setLoading(true)
    try {
      // Create the STP
      const stpResponse = await fetch('/api/stps', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: stpConfig.title,
          description: stpConfig.description,
          package_id: selectedPackage.id,
          system_id: selectedSystems[0]?.id || 1, // Use first selected system as primary
          priority: stpConfig.priority,
          due_date: stpConfig.due_date || null,
          created_by: 1 // TODO: Get from auth
        })
      })

      if (stpResponse.ok) {
        const stpData = await stpResponse.json()
        
        // Create test cases for selected vulnerabilities
        for (const vuln of selectedVulnerabilities) {
          await fetch('/api/stps/test-cases', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              stp_id: stpData.item.id,
              title: `Test ${vuln.vuln_id}: ${vuln.rule_title}`,
              description: `Validate vulnerability findings for ${vuln.vuln_id} (${vuln.rule_id}) across selected systems: ${selectedSystems.map(s => s.name).join(', ')}`,
              test_procedure: vuln.check_content,
              expected_result: vuln.fix_text,
            })
          })
        }

        router.push(`/vulnerability-center/stps/${stpData.item.id}`)
      }
    } catch (error) {
      console.error('Failed to create STP:', error)
    } finally {
      setLoading(false)
    }
  }

  const canProceed = () => {
    switch (currentStep) {
      case 1: return selectedPackage !== null
      case 2: return selectedGroup !== null
      case 3: return selectedSystems.length > 0
      case 4: return selectedVulnerabilities.length > 0
      case 5: return stpConfig.title.trim().length > 0
      case 6: return true
      default: return false
    }
  }

  const getSeverityColor = (severity: string) => {
    const sev = severity.toLowerCase()
    if (sev.includes('cat i') || sev.includes('high')) return 'text-red-600'
    if (sev.includes('cat ii') || sev.includes('medium')) return 'text-yellow-600'
    return 'text-green-600'
  }

  const renderStepContent = () => {
    switch (currentStep) {
      case 1: // Select Package
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Select ATO Package</h3>
              <p className="text-muted-foreground mb-4">
                Choose the ATO package that contains the systems you want to test.
              </p>
            </div>
            
            <div className="grid grid-cols-1 gap-4">
              {packages.map((pkg) => (
                <Card 
                  key={pkg.id} 
                  className={`cursor-pointer transition-all ${
                    selectedPackage?.id === pkg.id 
                      ? 'ring-2 ring-primary border-primary' 
                      : 'hover:shadow-md'
                  }`}
                  onClick={() => setSelectedPackage(pkg)}
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <Package className="h-5 w-5 text-primary" />
                        <CardTitle className="text-base">{pkg.name}</CardTitle>
                      </div>
                      {selectedPackage?.id === pkg.id && (
                        <CheckCircle2 className="h-5 w-5 text-primary" />
                      )}
                    </div>
                    <CardDescription>{pkg.description}</CardDescription>
                  </CardHeader>
                </Card>
              ))}
            </div>
          </div>
        )

      case 2: // Select Group
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Select Group</h3>
              <p className="text-muted-foreground mb-4">
                Choose the group within <strong>{selectedPackage?.name}</strong> that contains the systems to test.
              </p>
            </div>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Loading groups...</div>
              </div>
            ) : (
              <div className="grid grid-cols-1 gap-4">
                {groups.map((group) => (
                  <Card 
                    key={group.id} 
                    className={`cursor-pointer transition-all ${
                      selectedGroup?.id === group.id 
                        ? 'ring-2 ring-primary border-primary' 
                        : 'hover:shadow-md'
                    }`}
                    onClick={() => setSelectedGroup(group)}
                  >
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Users className="h-5 w-5 text-primary" />
                          <div>
                            <CardTitle className="text-base">{group.name}</CardTitle>
                            <CardDescription>{group.description}</CardDescription>
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <Badge variant="outline">
                            {group.systems_count} systems
                          </Badge>
                          {selectedGroup?.id === group.id && (
                            <CheckCircle2 className="h-5 w-5 text-primary" />
                          )}
                        </div>
                      </div>
                    </CardHeader>
                  </Card>
                ))}
              </div>
            )}
          </div>
        )

      case 3: // Select Systems
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Select Systems to Test</h3>
              <p className="text-muted-foreground mb-4">
                Choose one or more systems from <strong>{selectedGroup?.name}</strong> to include in this test plan.
              </p>
              <Badge className="bg-blue-500">
                {selectedSystems.length} system{selectedSystems.length !== 1 ? 's' : ''} selected
              </Badge>
            </div>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Loading systems...</div>
              </div>
            ) : (
              <div className="grid grid-cols-1 gap-4">
                {systems.map((system) => {
                  const isSelected = selectedSystems.some(s => s.id === system.id)
                  
                  return (
                    <Card 
                      key={system.id} 
                      className={`cursor-pointer transition-all ${
                        isSelected 
                          ? 'ring-2 ring-primary border-primary' 
                          : 'hover:shadow-md'
                      }`}
                      onClick={() => {
                        if (isSelected) {
                          setSelectedSystems(prev => prev.filter(s => s.id !== system.id))
                        } else {
                          setSelectedSystems(prev => [...prev, system])
                        }
                      }}
                    >
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <Shield className="h-5 w-5 text-primary" />
                            <div>
                              <CardTitle className="text-base">{system.name}</CardTitle>
                              <CardDescription>{system.description || 'No description'}</CardDescription>
                            </div>
                          </div>
                          <div className="flex items-center gap-3">
                            {system.last_scan_date && (
                              <Badge variant="outline" className="text-xs">
                                Last scan: {new Date(system.last_scan_date).toLocaleDateString()}
                              </Badge>
                            )}
                            {isSelected && (
                              <CheckCircle2 className="h-5 w-5 text-primary" />
                            )}
                          </div>
                        </div>
                      </CardHeader>
                    </Card>
                  )
                })}
              </div>
            )}
          </div>
        )

      case 4: // Select Vulnerabilities
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Select Open Vulnerabilities</h3>
              <p className="text-muted-foreground mb-4">
                Only <strong>OPEN findings</strong> are shown. CAT I findings are auto-selected. 
                Findings are grouped by whether they affect all selected systems or specific ones.
              </p>
              <div className="flex gap-2">
                <Badge className="bg-blue-500">
                  {selectedVulnerabilities.length} vulnerabilities selected
                </Badge>
                <Badge variant="outline">
                  {selectedSystems.length} system{selectedSystems.length !== 1 ? 's' : ''} selected
                </Badge>
              </div>
            </div>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Loading vulnerabilities...</div>
              </div>
            ) : (
              <div className="space-y-4 max-h-96 overflow-y-auto">
                {/* Group vulnerabilities by shared vs unique */}
                {(() => {
                  const selectedSystemNames = selectedSystems.map(s => s.name)
                  const sharedVulns = vulnerabilities.filter(v => 
                    selectedSystemNames.every(sysName => v.affected_systems.includes(sysName))
                  )
                  const uniqueVulns = vulnerabilities.filter(v => 
                    !selectedSystemNames.every(sysName => v.affected_systems.includes(sysName))
                  )

                  return (
                    <>
                      {/* Shared Vulnerabilities */}
                      {sharedVulns.length > 0 && (
                        <div className="space-y-3">
                          <div className="flex items-center gap-2">
                            <h4 className="font-medium text-green-600">
                              Shared Across All Selected Systems ({sharedVulns.length})
                            </h4>
                          </div>
                          {sharedVulns.map((vuln) => {
                            const isSelected = selectedVulnerabilities.some(v => v.vuln_id === vuln.vuln_id)
                            const isCatI = vuln.severity.toLowerCase().includes('cat i') || vuln.severity.toLowerCase().includes('high')
                            
                            return (
                              <Card key={`shared-${vuln.vuln_id}`} className="p-4 bg-green-50/50">
                                <div className="flex items-start gap-3">
                                  <Checkbox
                                    checked={isSelected}
                                    onCheckedChange={(checked) => {
                                      if (checked) {
                                        setSelectedVulnerabilities(prev => [...prev, vuln])
                                      } else {
                                        setSelectedVulnerabilities(prev => 
                                          prev.filter(v => v.vuln_id !== vuln.vuln_id)
                                        )
                                      }
                                    }}
                                  />
                                  <div className="flex-1">
                                    <div className="flex items-center gap-2 mb-2">
                                      <span className="font-medium">{vuln.vuln_id}</span>
                                      <Badge 
                                        variant="outline"
                                        className={getSeverityColor(vuln.severity)}
                                      >
                                        {vuln.severity}
                                      </Badge>
                                      {isCatI && (
                                        <Badge className="bg-red-500">AUTO-SELECTED</Badge>
                                      )}
                                      <Badge className="bg-green-500 text-white">SHARED</Badge>
                                    </div>
                                    <p className="text-sm text-muted-foreground mb-2">
                                      {vuln.rule_title}
                                    </p>
                                    <div className="flex items-center gap-2">
                                      <Shield className="h-4 w-4 text-muted-foreground" />
                                      <span className="text-xs text-muted-foreground">
                                        All selected systems: {selectedSystemNames.join(', ')}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              </Card>
                            )
                          })}
                        </div>
                      )}

                      {/* System-Specific Vulnerabilities */}
                      {uniqueVulns.length > 0 && (
                        <div className="space-y-3">
                          <div className="flex items-center gap-2">
                            <h4 className="font-medium text-blue-600">
                              System-Specific Findings ({uniqueVulns.length})
                            </h4>
                          </div>
                          {uniqueVulns.map((vuln) => {
                            const isSelected = selectedVulnerabilities.some(v => v.vuln_id === vuln.vuln_id)
                            const isCatI = vuln.severity.toLowerCase().includes('cat i') || vuln.severity.toLowerCase().includes('high')
                            
                            return (
                              <Card key={`unique-${vuln.vuln_id}`} className="p-4 bg-blue-50/50">
                                <div className="flex items-start gap-3">
                                  <Checkbox
                                    checked={isSelected}
                                    onCheckedChange={(checked) => {
                                      if (checked) {
                                        setSelectedVulnerabilities(prev => [...prev, vuln])
                                      } else {
                                        setSelectedVulnerabilities(prev => 
                                          prev.filter(v => v.vuln_id !== vuln.vuln_id)
                                        )
                                      }
                                    }}
                                  />
                                  <div className="flex-1">
                                    <div className="flex items-center gap-2 mb-2">
                                      <span className="font-medium">{vuln.vuln_id}</span>
                                      <Badge 
                                        variant="outline"
                                        className={getSeverityColor(vuln.severity)}
                                      >
                                        {vuln.severity}
                                      </Badge>
                                      {isCatI && (
                                        <Badge className="bg-red-500">AUTO-SELECTED</Badge>
                                      )}
                                      <Badge className="bg-blue-500 text-white">SPECIFIC</Badge>
                                    </div>
                                    <p className="text-sm text-muted-foreground mb-2">
                                      {vuln.rule_title}
                                    </p>
                                    <div className="flex items-center gap-2">
                                      <Shield className="h-4 w-4 text-muted-foreground" />
                                      <span className="text-xs text-muted-foreground">
                                        Affects: {vuln.affected_systems.join(', ')}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              </Card>
                            )
                          })}
                        </div>
                      )}

                      {sharedVulns.length === 0 && uniqueVulns.length === 0 && (
                        <div className="text-center py-8 text-muted-foreground">
                          No open vulnerabilities found for the selected systems.
                        </div>
                      )}
                    </>
                  )
                })()}
              </div>
            )}
          </div>
        )

      case 5: // Configure STP
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Configure Test Plan</h3>
              <p className="text-muted-foreground mb-4">
                Set up the details for your Security Test Plan.
              </p>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium">Test Plan Title *</label>
                <Input
                  placeholder="Enter a descriptive title for this STP"
                  value={stpConfig.title}
                  onChange={(e) => setStpConfig(prev => ({ ...prev, title: e.target.value }))}
                />
              </div>
              
              <div>
                <label className="text-sm font-medium">Description</label>
                <Textarea
                  placeholder="Describe the scope and objectives of this test plan"
                  value={stpConfig.description}
                  onChange={(e) => setStpConfig(prev => ({ ...prev, description: e.target.value }))}
                  rows={3}
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium">Priority</label>
                  <Select 
                    value={stpConfig.priority} 
                    onValueChange={(value: 'Low' | 'Medium' | 'High' | 'Critical') => 
                      setStpConfig(prev => ({ ...prev, priority: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Low">Low</SelectItem>
                      <SelectItem value="Medium">Medium</SelectItem>
                      <SelectItem value="High">High</SelectItem>
                      <SelectItem value="Critical">Critical</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <label className="text-sm font-medium">Due Date</label>
                  <Input
                    type="date"
                    value={stpConfig.due_date}
                    onChange={(e) => setStpConfig(prev => ({ ...prev, due_date: e.target.value }))}
                  />
                </div>
              </div>
            </div>
          </div>
        )

      case 6: // Review & Create
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-2">Review & Create</h3>
              <p className="text-muted-foreground mb-4">
                Review your selections and create the Security Test Plan.
              </p>
            </div>
            
            <div className="space-y-4">
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-base">Test Plan Summary</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-muted-foreground">Package:</span>
                      <div className="font-medium">{selectedPackage?.name}</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Group:</span>
                      <div className="font-medium">{selectedGroup?.name}</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Title:</span>
                      <div className="font-medium">{stpConfig.title}</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Priority:</span>
                      <Badge variant="outline">{stpConfig.priority}</Badge>
                    </div>
                  </div>
                  
                  <div className="pt-3 border-t">
                    <span className="text-sm text-muted-foreground">
                      {selectedVulnerabilities.length} test cases will be created for the selected vulnerabilities.
                    </span>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <div className="flex items-center gap-3">
            <Link href="/vulnerability-center/stps">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4" />
                Back to STPs
              </Button>
            </Link>
          </div>
          <h1 className="text-3xl font-bold">Create Security Test Plan</h1>
          <p className="text-muted-foreground">
            Follow the wizard to create an STP with automated test cases
          </p>
        </div>
      </div>

      {/* Progress Indicator */}
      <div className="space-y-4">
        <Progress value={(currentStep / WIZARD_STEPS.length) * 100} className="h-2" />
        <div className="flex justify-between">
          {WIZARD_STEPS.map((step) => (
            <div key={step.id} className="flex flex-col items-center gap-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                currentStep >= step.id 
                  ? 'bg-primary text-primary-foreground' 
                  : 'bg-muted text-muted-foreground'
              }`}>
                {currentStep > step.id ? <CheckCircle2 className="h-4 w-4" /> : step.id}
              </div>
              <div className="text-center">
                <div className="text-xs font-medium">{step.title}</div>
                <div className="text-xs text-muted-foreground">{step.description}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Step Content */}
      <Card className="min-h-96">
        <CardContent className="p-6">
          {renderStepContent()}
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-between">
        <Button 
          variant="outline" 
          onClick={handleBack} 
          disabled={currentStep === 1}
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back
        </Button>
        
        <div className="flex gap-2">
          {currentStep < WIZARD_STEPS.length ? (
            <Button 
              onClick={handleNext} 
              disabled={!canProceed() || loading}
            >
              Next
              <ArrowRight className="h-4 w-4 ml-2" />
            </Button>
          ) : (
            <Button 
              onClick={handleCreateSTP} 
              disabled={!canProceed() || loading}
              className="bg-green-600 hover:bg-green-700"
            >
              {loading ? (
                <>
                  <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2" />
                  Creating...
                </>
              ) : (
                <>
                  <FileCheck className="h-4 w-4 mr-2" />
                  Create STP
                </>
              )}
            </Button>
          )}
        </div>
      </div>
    </div>
  )
}