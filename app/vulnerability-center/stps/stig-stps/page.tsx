"use client"

import { useState, useEffect } from "react"
import { FileCheck, Plus, Calendar, Shield, ChevronRight, Package } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"

type STP = {
  id: number;
  title: string;
  description: string;
  status: 'Draft' | 'In_Progress' | 'Under_Review' | 'Approved' | 'Rejected';
  priority: 'Low' | 'Medium' | 'High' | 'Critical';
  package_id: number;
  package_name: string;
  system_id: number;
  system_name: string;
  created_at: string;
  due_date: string | null;
  test_cases_count: number;
  completed_test_cases: number;
};

export default function STPsPage() {
  const [stps, setStps] = useState<STP[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchStps = async () => {
      try {
        const response = await fetch('/api/stps')
        if (response.ok) {
          const data = await response.json()
          // Map the API response to our expected format
          const mappedStps = data.items.map((item: {
            id: number;
            title: string;
            description?: string;
            status: string;
            priority: string;
            package_id: number;
            system_id: number;
            created_at: string;
            due_date?: string;
          }) => ({
            id: item.id,
            title: item.title,
            description: item.description || '',
            status: item.status,
            priority: item.priority,
            package_id: item.package_id,
            package_name: 'Package ' + item.package_id, // TODO: Get real package name
            system_id: item.system_id,
            system_name: 'System ' + item.system_id, // TODO: Get real system name
            created_at: item.created_at,
            due_date: item.due_date,
            test_cases_count: 0, // TODO: Get real count
            completed_test_cases: 0, // TODO: Get real count
          }))
          setStps(mappedStps)
        }
      } catch (error) {
        console.error('Failed to fetch STPs:', error)
      } finally {
        setLoading(false)
      }
    }
    fetchStps()
  }, [])

  const getStatusVariant = (status: string) => {
    switch (status) {
      case 'Draft': return 'secondary'
      case 'In_Progress': return 'default'
      case 'Under_Review': return 'outline'
      case 'Approved': return 'default'
      case 'Rejected': return 'destructive'
      default: return 'secondary'
    }
  }

  const getPriorityVariant = (priority: string) => {
    switch (priority) {
      case 'Critical': return 'destructive'
      case 'High': return 'destructive'
      case 'Medium': return 'outline'
      case 'Low': return 'secondary'
      default: return 'secondary'
    }
  }

  const getProgressColor = (completed: number, total: number) => {
    if (total === 0) return 'bg-gray-500'
    const percentage = (completed / total) * 100
    if (percentage === 100) return 'bg-green-500'
    if (percentage >= 75) return 'bg-blue-500'
    if (percentage >= 50) return 'bg-yellow-500'
    return 'bg-orange-500'
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-muted-foreground">Loading STPs...</div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div className="space-y-2">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-orange-500/10 rounded-lg">
              <FileCheck className="h-8 w-8 text-orange-600" />
            </div>
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Security Test Plans</h1>
              <p className="text-muted-foreground">
                Create and manage security test plans for vulnerability validation
              </p>
            </div>
          </div>
        </div>
        <Link href="/vulnerability-center/stps/stig-stps/create">
          <Button size="lg">
            <Plus className="h-4 w-4 mr-2" />
            Create STP
          </Button>
        </Link>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Total STPs</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">{stps.length}</div>
            <p className="text-xs text-muted-foreground">Security test plans</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">In Progress</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">
              {stps.filter(s => s.status === 'In_Progress').length}
            </div>
            <p className="text-xs text-muted-foreground">Active test plans</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Under Review</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-600">
              {stps.filter(s => s.status === 'Under_Review').length}
            </div>
            <p className="text-xs text-muted-foreground">Awaiting review</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Approved</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {stps.filter(s => s.status === 'Approved').length}
            </div>
            <p className="text-xs text-muted-foreground">Ready for execution</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Critical Priority</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {stps.filter(s => s.priority === 'Critical').length}
            </div>
            <p className="text-xs text-muted-foreground">High priority STPs</p>
          </CardContent>
        </Card>
      </div>

      {/* STPs List */}
      <div className="space-y-4">
        {stps.length === 0 ? (
          <Card>
            <CardContent className="text-center py-8">
              <div className="space-y-4">
                <div className="mx-auto w-12 h-12 bg-orange-500/10 rounded-lg flex items-center justify-center">
                  <FileCheck className="h-6 w-6 text-orange-600" />
                </div>
                <div>
                  <h3 className="text-lg font-medium">No Security Test Plans</h3>
                  <p className="text-muted-foreground">Get started by creating your first STP to validate system vulnerabilities.</p>
                </div>
                <Link href="/vulnerability-center/stps/stig-stps/create">
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    Create Your First STP
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        ) : (
          stps.map((stp) => {
            const completionPercentage = stp.test_cases_count > 0 
              ? Math.round((stp.completed_test_cases / stp.test_cases_count) * 100)
              : 0

            return (
              <Link key={stp.id} href={`/vulnerability-center/stps/stig-stps/${stp.id}`}>
                <Card className="hover:shadow-md transition-all cursor-pointer hover:border-primary/50">
                  <CardHeader className="pb-3">
                    <div className="flex items-start justify-between gap-4">
                      <div className="space-y-2 flex-1">
                        <div className="flex items-center gap-3">
                          <CardTitle className="text-lg hover:text-primary transition-colors">
                            {stp.title}
                          </CardTitle>
                          <div className="flex items-center gap-2">
                            <Badge variant={getStatusVariant(stp.status)}>
                              {stp.status.replace('_', ' ')}
                            </Badge>
                            <Badge variant={getPriorityVariant(stp.priority)}>
                              {stp.priority}
                            </Badge>
                          </div>
                        </div>
                        <CardDescription className="text-sm">
                          {stp.description}
                        </CardDescription>
                      </div>
                      <ChevronRight className="h-5 w-5 text-muted-foreground" />
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {/* Progress Bar */}
                      <div className="space-y-1">
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-muted-foreground">Test Cases Progress</span>
                          <span className="font-medium">
                            {stp.completed_test_cases}/{stp.test_cases_count} ({completionPercentage}%)
                          </span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className={`h-2 rounded-full transition-all ${getProgressColor(stp.completed_test_cases, stp.test_cases_count)}`}
                            style={{ width: `${completionPercentage}%` }}
                          />
                        </div>
                      </div>

                      {/* Details Grid */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                        <div className="flex items-center gap-2 text-muted-foreground">
                          <Package className="h-4 w-4" />
                          <span>{stp.package_name}</span>
                        </div>
                        <div className="flex items-center gap-2 text-muted-foreground">
                          <Shield className="h-4 w-4" />
                          <span>{stp.system_name}</span>
                        </div>
                        <div className="flex items-center gap-2 text-muted-foreground">
                          <Calendar className="h-4 w-4" />
                          <span>
                            {stp.due_date 
                              ? `Due: ${new Date(stp.due_date).toLocaleDateString()}` 
                              : 'No due date'
                            }
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </Link>
            )
          })
        )}
      </div>
    </div>
  )
}