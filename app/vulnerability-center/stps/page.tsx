"use client"

import { useState } from "react"
import { FileCheck, Plus, Calendar, User, Shield, ChevronRight } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"

type STP = {
  id: number;
  name: string;
  description: string;
  status: 'Draft' | 'In_Progress' | 'Under_Review' | 'Approved' | 'Executed';
  system_name: string;
  created_by: string;
  created_at: string;
  due_date?: string;
  compliance_framework: string;
};

const mockSTPs: STP[] = [
  {
    id: 1,
    name: "Enterprise Web Application Security Test",
    description: "Comprehensive security testing for the main enterprise web application including OWASP Top 10 validation",
    status: "In_Progress",
    system_name: "Enterprise Web Portal",
    created_by: "John Smith",
    created_at: "2024-01-15",
    due_date: "2024-02-15",
    compliance_framework: "NIST SP 800-53"
  },
  {
    id: 2,
    name: "Database Security Assessment",
    description: "Security assessment of production database systems focusing on access controls and encryption",
    status: "Under_Review",
    system_name: "Production Database Cluster",
    created_by: "Sarah Johnson",
    created_at: "2024-01-10",
    due_date: "2024-02-01",
    compliance_framework: "NIST SP 800-171"
  },
  {
    id: 3,
    name: "Network Infrastructure Penetration Test",
    description: "External and internal network penetration testing to identify vulnerabilities",
    status: "Approved",
    system_name: "Corporate Network",
    created_by: "Mike Davis",
    created_at: "2024-01-05",
    due_date: "2024-01-30",
    compliance_framework: "NIST CSF"
  }
];

export default function STPsPage() {
  const [showWizard, setShowWizard] = useState(false)
  const [stps] = useState<STP[]>(mockSTPs)
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    system: '',
    framework: '',
    dueDate: ''
  })

  const getStatusVariant = (status: string) => {
    switch (status) {
      case 'Draft': return 'secondary'
      case 'In_Progress': return 'default'
      case 'Under_Review': return 'outline'
      case 'Approved': return 'default'
      case 'Executed': return 'default'
      default: return 'secondary'
    }
  }

  const handleCreateSTP = () => {
    console.log('Creating STP:', formData)
    setShowWizard(false)
    setFormData({
      name: '',
      description: '',
      system: '',
      framework: '',
      dueDate: ''
    })
  }

  if (showWizard) {
    return (
      <div className="space-y-8">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="space-y-2">
            <div className="flex items-center gap-3">
              <div className="p-3 bg-orange-500/10 rounded-lg">
                <FileCheck className="h-8 w-8 text-orange-600" />
              </div>
              <div>
                <h1 className="text-3xl font-bold tracking-tight">Create Security Test Plan</h1>
                <p className="text-muted-foreground">
                  Set up a new security test plan for system validation
                </p>
              </div>
            </div>
          </div>
          <Button variant="outline" onClick={() => setShowWizard(false)}>
            Cancel
          </Button>
        </div>

        {/* STP Creation Form */}
        <Card className="max-w-2xl">
          <CardHeader>
            <CardTitle>Security Test Plan Details</CardTitle>
            <CardDescription>
              Provide the basic information for your new security test plan
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <label className="text-sm font-medium">Test Plan Name</label>
              <Input 
                placeholder="Enter test plan name"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
              />
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Description</label>
              <Textarea 
                placeholder="Describe the scope and objectives of this test plan"
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                rows={3}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Target System</label>
                <Select value={formData.system} onValueChange={(value) => setFormData({...formData, system: value})}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select system" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="web-portal">Enterprise Web Portal</SelectItem>
                    <SelectItem value="database">Production Database Cluster</SelectItem>
                    <SelectItem value="network">Corporate Network</SelectItem>
                    <SelectItem value="mobile-app">Mobile Application</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Compliance Framework</label>
                <Select value={formData.framework} onValueChange={(value) => setFormData({...formData, framework: value})}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select framework" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="nist-800-53">NIST SP 800-53</SelectItem>
                    <SelectItem value="nist-800-171">NIST SP 800-171</SelectItem>
                    <SelectItem value="nist-csf">NIST CSF</SelectItem>
                    <SelectItem value="iso-27001">ISO 27001</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Due Date</label>
              <Input 
                type="date"
                value={formData.dueDate}
                onChange={(e) => setFormData({...formData, dueDate: e.target.value})}
              />
            </div>

            <div className="flex gap-3 pt-4">
              <Button onClick={handleCreateSTP} className="flex-1">
                Create Test Plan
              </Button>
              <Button variant="outline" onClick={() => setShowWizard(false)}>
                Cancel
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div className="space-y-2">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-orange-500/10 rounded-lg">
              <FileCheck className="h-8 w-8 text-orange-600" />
            </div>
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Security Test Plans</h1>
              <p className="text-muted-foreground">
                Manage security testing procedures and validation protocols
              </p>
            </div>
          </div>
        </div>
        <Button size="lg" onClick={() => setShowWizard(true)}>
          <Plus className="h-4 w-4 mr-2" />
          Create Test Plan
        </Button>
      </div>

      {/* STPs List */}
      <div className="space-y-4">
        {stps.map((stp) => (
          <Card key={stp.id} className="hover:shadow-md transition-shadow cursor-pointer">
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between gap-4">
                <div className="space-y-2 flex-1">
                  <div className="flex items-center gap-3">
                    <CardTitle className="text-lg hover:text-primary transition-colors">
                      {stp.name}
                    </CardTitle>
                    <Badge variant={getStatusVariant(stp.status)}>
                      {stp.status.replace('_', ' ')}
                    </Badge>
                  </div>
                  <CardDescription className="text-sm">
                    {stp.description}
                  </CardDescription>
                </div>
                <ChevronRight className="h-5 w-5 text-muted-foreground" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Shield className="h-4 w-4" />
                  <span>{stp.system_name}</span>
                </div>
                <div className="flex items-center gap-2 text-muted-foreground">
                  <FileCheck className="h-4 w-4" />
                  <span>{stp.compliance_framework}</span>
                </div>
                <div className="flex items-center gap-2 text-muted-foreground">
                  <User className="h-4 w-4" />
                  <span>{stp.created_by}</span>
                </div>
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Calendar className="h-4 w-4" />
                  <span>Due: {stp.due_date ? new Date(stp.due_date).toLocaleDateString() : 'No due date'}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Total STPs</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">{stps.length}</div>
            <p className="text-xs text-muted-foreground">Security test plans</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">In Progress</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">
              {stps.filter(s => s.status === 'In_Progress').length}
            </div>
            <p className="text-xs text-muted-foreground">Active test plans</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Under Review</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-600">
              {stps.filter(s => s.status === 'Under_Review').length}
            </div>
            <p className="text-xs text-muted-foreground">Awaiting review</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Approved</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {stps.filter(s => s.status === 'Approved').length}
            </div>
            <p className="text-xs text-muted-foreground">Ready for execution</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Executed</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-purple-600">
              {stps.filter(s => s.status === 'Executed').length}
            </div>
            <p className="text-xs text-muted-foreground">Completed tests</p>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
