"use client"

import { useState, useEffect } from "react"
import { ArrowLeft, FileCheck, CheckCircle2, XCircle, Clock, Play, Pause, Edit3, Trash2 } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import Link from "next/link"
import { useParams, useRouter } from "next/navigation"

type STP = {
  id: number;
  title: string;
  description: string;
  status: 'Draft' | 'In_Progress' | 'Under_Review' | 'Approved' | 'Rejected';
  priority: 'Low' | 'Medium' | 'High' | 'Critical';
  package_id: number;
  package_name?: string;
  system_id: number;
  system_name?: string;
  created_at: string;
  updated_at: string;
  due_date: string | null;
  created_by: number;
}

type TestCase = {
  id: number;
  stp_id: number;
  title: string;
  description: string;
  test_procedure: string;
  expected_result: string;
  actual_result: string;
  status: 'Not_Started' | 'In_Progress' | 'Passed' | 'Failed' | 'Blocked';
  assigned_user_id: number | null;
  created_at: string;
  updated_at: string;
}

export default function STPDetailPage() {
  const params = useParams()
  const router = useRouter()
  const stpId = params?.id as string
  
  const [stp, setStp] = useState<STP | null>(null)
  const [testCases, setTestCases] = useState<TestCase[]>([])
  const [loading, setLoading] = useState(true)
  const [activeTestCase, setActiveTestCase] = useState<TestCase | null>(null)
  const [testResult, setTestResult] = useState('')
  const [deleteLoading, setDeleteLoading] = useState(false)
  const [editMode, setEditMode] = useState(false)
  const [editData, setEditData] = useState({
    title: '',
    description: '',
    priority: 'Medium' as STP['priority'],
    due_date: ''
  })

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch STP details
        const stpResponse = await fetch(`/api/stps/${stpId}`)
        if (stpResponse.ok) {
          const stpData = await stpResponse.json()
          setStp(stpData.item)
        }

        // Fetch test cases
        const testCasesResponse = await fetch(`/api/stps/${stpId}/test-cases`)
        if (testCasesResponse.ok) {
          const testCasesData = await testCasesResponse.json()
          setTestCases(testCasesData.items || [])
        }
      } catch (error) {
        console.error('Failed to fetch STP data:', error)
      } finally {
        setLoading(false)
      }
    }
    fetchData()
  }, [stpId])

  const updateTestCaseStatus = async (testCaseId: number, newStatus: TestCase['status'], actualResult?: string) => {
    try {
      const response = await fetch(`/api/stps/test-cases/${testCaseId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          status: newStatus,
          actualResult: actualResult 
        })
      })
      
      if (response.ok) {
        // Update local state
        setTestCases(prev => prev.map(tc => 
          tc.id === testCaseId 
            ? { ...tc, status: newStatus, actual_result: actualResult || tc.actual_result }
            : tc
        ))
        setActiveTestCase(null)
        setTestResult('')
      }
    } catch (error) {
      console.error('Failed to update test case:', error)
    }
  }

  const handleDeleteSTP = async () => {
    if (!stp || !confirm('Are you sure you want to delete this STP? This action cannot be undone.')) {
      return
    }

    setDeleteLoading(true)
    try {
      const response = await fetch(`/api/stps/${stpId}`, {
        method: 'DELETE',
      })

      if (response.ok) {
        router.push('/vulnerability-center/stps')
      } else {
        console.error('Failed to delete STP')
      }
    } catch (error) {
      console.error('Error deleting STP:', error)
    } finally {
      setDeleteLoading(false)
    }
  }

  const handleEditSTP = () => {
    if (!stp) return
    
    setEditData({
      title: stp.title,
      description: stp.description,
      priority: stp.priority,
      due_date: stp.due_date || ''
    })
    setEditMode(true)
  }

  const handleSaveEdit = async () => {
    if (!stp) return

    try {
      const response = await fetch(`/api/stps/${stpId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: editData.title,
          description: editData.description,
          priority: editData.priority,
          due_date: editData.due_date || null
        })
      })

      if (response.ok) {
        const updatedData = await response.json()
        setStp(updatedData.item)
        setEditMode(false)
      }
    } catch (error) {
      console.error('Failed to update STP:', error)
    }
  }

  const handleCancelEdit = () => {
    setEditMode(false)
    setEditData({
      title: '',
      description: '',
      priority: 'Medium',
      due_date: ''
    })
  }

  const getStatusVariant = (status: string) => {
    switch (status) {
      case 'Draft': return 'secondary'
      case 'In_Progress': return 'default'
      case 'Under_Review': return 'outline'
      case 'Approved': return 'default'
      case 'Rejected': return 'destructive'
      default: return 'secondary'
    }
  }

  const getPriorityVariant = (priority: string) => {
    switch (priority) {
      case 'Critical': return 'destructive'
      case 'High': return 'destructive'
      case 'Medium': return 'outline'
      case 'Low': return 'secondary'
      default: return 'secondary'
    }
  }

  const getTestStatusIcon = (status: TestCase['status']) => {
    switch (status) {
      case 'Not_Started': return <Clock className="h-4 w-4 text-gray-500" />
      case 'In_Progress': return <Play className="h-4 w-4 text-blue-500" />
      case 'Passed': return <CheckCircle2 className="h-4 w-4 text-green-500" />
      case 'Failed': return <XCircle className="h-4 w-4 text-red-500" />
      case 'Blocked': return <Pause className="h-4 w-4 text-yellow-500" />
      default: return null
    }
  }

  const getTestStatusColor = (status: TestCase['status']) => {
    switch (status) {
      case 'Not_Started': return 'bg-muted/50 text-muted-foreground border border-border'
      case 'In_Progress': return 'bg-blue-500/10 dark:bg-blue-500/20 text-blue-700 dark:text-blue-400 border border-blue-200 dark:border-blue-800'
      case 'Passed': return 'bg-green-500/10 dark:bg-green-500/20 text-green-700 dark:text-green-400 border border-green-200 dark:border-green-800'
      case 'Failed': return 'bg-red-500/10 dark:bg-red-500/20 text-red-700 dark:text-red-400 border border-red-200 dark:border-red-800'
      case 'Blocked': return 'bg-yellow-500/10 dark:bg-yellow-500/20 text-yellow-700 dark:text-yellow-400 border border-yellow-200 dark:border-yellow-800'
      default: return 'bg-muted/50 text-muted-foreground border border-border'
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-muted-foreground">Loading STP details...</div>
      </div>
    )
  }

  if (!stp) {
    return (
      <div className="space-y-4">
        <div className="text-muted-foreground">STP not found.</div>
        <Link href="/vulnerability-center/stps">
          <Button variant="outline">Back to STPs</Button>
        </Link>
      </div>
    )
  }

  const completedTestCases = testCases.filter(tc => tc.status === 'Passed').length
  const failedTestCases = testCases.filter(tc => tc.status === 'Failed').length
  const blockedTestCases = testCases.filter(tc => tc.status === 'Blocked').length
  const inProgressTestCases = testCases.filter(tc => tc.status === 'In_Progress').length
  const completionPercentage = testCases.length > 0 
    ? Math.round((completedTestCases / testCases.length) * 100)
    : 0

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <div className="flex items-center gap-3">
            <Link href="/vulnerability-center/stps">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4" />
                Back to STPs
              </Button>
            </Link>
          </div>
          {editMode ? (
            <div className="space-y-2">
              <Input
                value={editData.title}
                onChange={(e) => setEditData(prev => ({ ...prev, title: e.target.value }))}
                className="text-3xl font-bold bg-transparent border-0 p-0 h-auto focus:ring-0"
                placeholder="STP Title"
              />
              <Textarea
                value={editData.description}
                onChange={(e) => setEditData(prev => ({ ...prev, description: e.target.value }))}
                className="text-muted-foreground bg-transparent border-0 p-0 resize-none focus:ring-0"
                placeholder="STP Description"
                rows={2}
              />
            </div>
          ) : (
            <>
              <h1 className="text-3xl font-bold">{stp.title}</h1>
              <p className="text-muted-foreground">{stp.description}</p>
            </>
          )}
        </div>
        <div className="flex items-center gap-2">
          <Badge variant={getStatusVariant(stp.status)}>
            {stp.status.replace('_', ' ')}
          </Badge>
          <Badge variant={getPriorityVariant(stp.priority)}>
            {stp.priority} Priority
          </Badge>
        </div>
      </div>

      {/* STP Information and Actions */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-base">STP Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3 text-sm">
            <div className="flex items-center justify-between">
              <span className="text-muted-foreground">Status</span>
              <Badge variant={getStatusVariant(stp.status)}>
                {stp.status.replace('_', ' ')}
              </Badge>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-muted-foreground">Priority</span>
              {editMode ? (
                <Select
                  value={editData.priority}
                  onValueChange={(value: STP['priority']) => 
                    setEditData(prev => ({ ...prev, priority: value }))
                  }
                >
                  <SelectTrigger className="w-24 h-6 text-xs">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Low">Low</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Critical">Critical</SelectItem>
                  </SelectContent>
                </Select>
              ) : (
                <Badge variant={getPriorityVariant(stp.priority)}>
                  {stp.priority}
                </Badge>
              )}
            </div>
            <div className="flex items-center justify-between">
              <span className="text-muted-foreground">Created</span>
              <span>{new Date(stp.created_at).toLocaleDateString()}</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-muted-foreground">Due Date</span>
              {editMode ? (
                <Input
                  type="date"
                  value={editData.due_date}
                  onChange={(e) => setEditData(prev => ({ ...prev, due_date: e.target.value }))}
                  className="w-32 h-6 text-xs"
                />
              ) : (
                <span>{stp.due_date ? new Date(stp.due_date).toLocaleDateString() : 'Not set'}</span>
              )}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-base">Actions</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <Select
              value={stp.status}
              disabled={editMode}
              onValueChange={async (value: STP['status']) => {
                try {
                  const response = await fetch(`/api/stps/${stpId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: value })
                  })
                  if (response.ok) {
                    setStp(prev => prev ? { ...prev, status: value } : null)
                  }
                } catch (error) {
                  console.error('Failed to update status:', error)
                }
              }}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Draft">Draft</SelectItem>
                <SelectItem value="In_Progress">In Progress</SelectItem>
                <SelectItem value="Under_Review">Under Review</SelectItem>
                <SelectItem value="Approved">Approved</SelectItem>
                <SelectItem value="Rejected">Rejected</SelectItem>
              </SelectContent>
            </Select>
            
            <Button className="w-full" variant="outline">
              <FileCheck className="h-4 w-4 mr-2" />
              Export Report
            </Button>

            {editMode ? (
              <div className="flex gap-2 pt-2">
                <Button 
                  className="flex-1" 
                  onClick={handleSaveEdit}
                  disabled={!editData.title.trim()}
                >
                  <CheckCircle2 className="h-4 w-4 mr-2" />
                  Save
                </Button>
                <Button 
                  variant="outline" 
                  className="flex-1"
                  onClick={handleCancelEdit}
                >
                  Cancel
                </Button>
              </div>
            ) : (
              <div className="flex gap-2 pt-2">
                <Button className="flex-1" variant="outline" onClick={handleEditSTP}>
                  <Edit3 className="h-4 w-4 mr-2" />
                  Edit STP
                </Button>
                <Button 
                  variant="destructive" 
                  className="flex-1"
                  onClick={handleDeleteSTP}
                  disabled={deleteLoading}
                >
                  {deleteLoading ? (
                    <>
                      <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2" />
                      Deleting...
                    </>
                  ) : (
                    <>
                      <Trash2 className="h-4 w-4 mr-2" />
                      Delete
                    </>
                  )}
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Progress Overview */}
      <Card>
        <CardHeader>
          <CardTitle>Test Progress Overview</CardTitle>
          <CardDescription>
            Overall completion status for all test cases in this STP
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span>Overall Progress</span>
                <span className="font-medium">{completionPercentage}% Complete</span>
              </div>
              <Progress value={completionPercentage} className="h-3" />
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
              <div className="text-center p-3 bg-muted/50 rounded-lg border">
                <div className="text-2xl font-bold">{testCases.length}</div>
                <div className="text-xs text-muted-foreground">Total Tests</div>
              </div>
              <div className="text-center p-3 bg-green-500/10 dark:bg-green-500/20 rounded-lg border border-green-200 dark:border-green-800">
                <div className="text-2xl font-bold text-green-600 dark:text-green-400">{completedTestCases}</div>
                <div className="text-xs text-muted-foreground">Passed</div>
              </div>
              <div className="text-center p-3 bg-red-500/10 dark:bg-red-500/20 rounded-lg border border-red-200 dark:border-red-800">
                <div className="text-2xl font-bold text-red-600 dark:text-red-400">{failedTestCases}</div>
                <div className="text-xs text-muted-foreground">Failed</div>
              </div>
              <div className="text-center p-3 bg-yellow-500/10 dark:bg-yellow-500/20 rounded-lg border border-yellow-200 dark:border-yellow-800">
                <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">{blockedTestCases}</div>
                <div className="text-xs text-muted-foreground">Blocked</div>
              </div>
              <div className="text-center p-3 bg-blue-500/10 dark:bg-blue-500/20 rounded-lg border border-blue-200 dark:border-blue-800">
                <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">{inProgressTestCases}</div>
                <div className="text-xs text-muted-foreground">In Progress</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Test Cases */}
      <Card>
        <CardHeader>
          <CardTitle>Test Cases</CardTitle>
          <CardDescription>
            Individual test cases for vulnerability validation
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {testCases.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                No test cases found for this STP.
              </div>
            ) : (
              testCases.map((testCase) => (
                <Card key={testCase.id} className="p-4">
                  <div className="space-y-3">
                    <div className="flex items-start justify-between">
                      <div className="space-y-1 flex-1">
                        <div className="flex items-center gap-2">
                          {getTestStatusIcon(testCase.status)}
                          <h4 className="font-medium">{testCase.title}</h4>
                        </div>
                        <p className="text-sm text-muted-foreground">{testCase.description}</p>
                      </div>
                      <Badge className={getTestStatusColor(testCase.status)}>
                        {testCase.status.replace('_', ' ')}
                      </Badge>
                    </div>

                    {activeTestCase?.id === testCase.id ? (
                      <div className="space-y-3 p-3 bg-muted/50 rounded-lg">
                        <div className="space-y-2">
                          <label className="text-sm font-medium">Test Procedure</label>
                          <div className="text-sm bg-background p-2 rounded">
                            {testCase.test_procedure || 'No procedure defined'}
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          <label className="text-sm font-medium">Expected Result</label>
                          <div className="text-sm bg-background p-2 rounded">
                            {testCase.expected_result || 'No expected result defined'}
                          </div>
                        </div>

                        <div className="space-y-2">
                          <label className="text-sm font-medium">Actual Result</label>
                          <Textarea
                            placeholder="Enter the actual test result..."
                            value={testResult}
                            onChange={(e) => setTestResult(e.target.value)}
                            rows={3}
                          />
                        </div>

                        <div className="flex gap-2">
                          <Button 
                            size="sm" 
                            className="bg-green-600 hover:bg-green-700"
                            onClick={() => updateTestCaseStatus(testCase.id, 'Passed', testResult)}
                          >
                            <CheckCircle2 className="h-4 w-4 mr-1" />
                            Pass
                          </Button>
                          <Button 
                            size="sm" 
                            variant="destructive"
                            onClick={() => updateTestCaseStatus(testCase.id, 'Failed', testResult)}
                          >
                            <XCircle className="h-4 w-4 mr-1" />
                            Fail
                          </Button>
                          <Button 
                            size="sm" 
                            variant="secondary"
                            onClick={() => updateTestCaseStatus(testCase.id, 'Blocked', testResult)}
                          >
                            <Pause className="h-4 w-4 mr-1" />
                            Block
                          </Button>
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => {
                              setActiveTestCase(null)
                              setTestResult('')
                            }}
                          >
                            Cancel
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <div className="flex items-center justify-between">
                        <div className="text-sm text-muted-foreground">
                          Created: {new Date(testCase.created_at).toLocaleDateString()}
                        </div>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => {
                            setActiveTestCase(testCase)
                            setTestResult(testCase.actual_result || '')
                            if (testCase.status === 'Not_Started') {
                              updateTestCaseStatus(testCase.id, 'In_Progress')
                            }
                          }}
                        >
                          {testCase.status === 'Not_Started' ? 'Start Test' : 'Update Test'}
                        </Button>
                      </div>
                    )}
                  </div>
                </Card>
              ))
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}