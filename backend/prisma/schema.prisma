generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---
// Main Models
// ---

model Package {
  id                           Int      @id @default(autoincrement())
  name                         String   @unique
  description                  String?  @default("")
  createdAt                    DateTime @default(now()) @map("created_at")
  updatedAt                    DateTime @updatedAt @map("updated_at")
  
  // RMF Progress Tracking
  rmfStep                      RmfStep  @default(Categorize) @map("rmf_step")
  categorizeComplete           Boolean  @default(false) @map("categorize_complete")
  selectComplete               Boolean  @default(false) @map("select_complete")
  implementComplete            Boolean  @default(false) @map("implement_complete")
  assessComplete               Boolean  @default(false) @map("assess_complete")
  authorizeComplete            Boolean  @default(false) @map("authorize_complete")
  monitorComplete              Boolean  @default(false) @map("monitor_complete")
  
  // Team Assignments (Manual entry for now, future: FK to Users)
  teamId                       Int?     @map("team_id")
  systemOwner                  String?  @map("system_owner")
  authorizingOfficial          String?  @map("authorizing_official")
  issoName                     String?  @map("isso_name")  // Information System Security Officer
  issmName                     String?  @map("issm_name")  // Information System Security Manager
  systemAdministrator          String?  @map("system_administrator")
  networkAdministrator         String?  @map("network_administrator")
  databaseAdministrator        String?  @map("database_administrator")
  applicationAdministrator     String?  @map("application_administrator")
  securityControlAssessor      String?  @map("security_control_assessor")
  
  // System Categorization (RMF Step 1)
  systemType                   SystemType? @map("system_type")
  confidentialityImpact        ImpactLevel? @map("confidentiality_impact")
  integrityImpact              ImpactLevel? @map("integrity_impact")
  availabilityImpact           ImpactLevel? @map("availability_impact")
  overallCategorization        ImpactLevel? @map("overall_categorization")
  missionCriticality           MissionCriticality? @map("mission_criticality")
  dataClassification           DataClassification? @map("data_classification")
  
  // Control Selection (RMF Step 2)
  securityControlBaseline      SecurityControlBaseline? @map("security_control_baseline")
  controlSelectionRationale    String?  @map("control_selection_rationale")
  tailoringDecisions           String?  @map("tailoring_decisions")
  
  // Authorization Information
  authorizationStatus          AuthorizationStatus? @map("authorization_status")
  authorizationDate            String?  @map("authorization_date")
  authorizationExpiry          String?  @map("authorization_expiry")
  riskAssessmentDate           String?  @map("risk_assessment_date")
  residualRiskLevel            ResidualRiskLevel? @map("residual_risk_level")
  
  // Monitoring and Maintenance
  poamStatus                   PoamStatus? @map("poam_status")
  continuousMonitoringStatus   ContinuousMonitoringStatus? @map("continuous_monitoring_status")
  lastAssessmentDate           String?  @map("last_assessment_date")
  nextAssessmentDate           String?  @map("next_assessment_date")
  
  // Business Information
  businessOwner                String?  @map("business_owner")
  businessPurpose              String?  @map("business_purpose")
  organizationalUnit           String?  @map("organizational_unit")
  physicalLocation             String?  @map("physical_location")
  
  // Onboarding Completion
  onboardingComplete           Boolean  @default(false) @map("onboarding_complete")
  onboardingCompletedAt        DateTime? @map("onboarding_completed_at")
  onboardingCompletedBy        String?  @map("onboarding_completed_by")

  team   Team?    @relation(fields: [teamId], references: [id])
  groups Group[]
  systems System[]
  stps   Stp[]
  poams  Poam[]
  nessusReports NessusReport[]

  @@map("packages")
}

model Group {
  id          Int      @id @default(autoincrement())
  packageId   Int      @map("package_id")
  name        String
  description String?  @default("")
  createdAt   DateTime @default(now()) @map("created_at")

  package Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  systems System[]
  poams   Poam[]

  @@unique([packageId, name])
  @@map("groups")
}

model System {
  id              Int      @id @default(autoincrement())
  packageId       Int      @map("package_id")
  groupId         Int?     @map("group_id")
  
  // Basic System Information
  name            String
  hostname        String?
  description     String?  @default("")
  
  // Network Configuration
  ipAddress       String?  @map("ip_address")
  macAddress      String?  @map("mac_address")
  subnetMask      String?  @map("subnet_mask")
  defaultGateway  String?  @map("default_gateway")
  dnsServers      String?  @map("dns_servers")  // JSON array as string
  
  // System Specifications
  operatingSystem SystemOperatingSystem? @map("operating_system")
  osVersion       String?  @map("os_version")
  architecture    SystemArchitecture? @default(x86_64)
  cpuCores        Int?     @map("cpu_cores")
  ramGB           Int?     @map("ram_gb")
  storageGB       Int?     @map("storage_gb")
  
  // Security and Compliance
  classification  DataClassification? 
  encryptionStatus EncryptionStatus? @default(Unknown) @map("encryption_status")
  patchLevel      String?  @map("patch_level")
  antivirusStatus AntivirusStatus? @default(Unknown) @map("antivirus_status")
  
  // Asset Management and Lifecycle
  assetTag        String?  @map("asset_tag")
  serialNumber    String?  @map("serial_number")
  manufacturer    String?
  model           String?
  purchaseDate    String?  @map("purchase_date")
  warrantyExpiry  String?  @map("warranty_expiry")
  lifecycleStatus LifecycleStatus? @default(Active) @map("lifecycle_status")
  eolDate         String?  @map("eol_date")  // End of Life
  replacementDate String?  @map("replacement_date")
  
  // System Support and Contacts
  primaryContact  String?  @map("primary_contact")
  backupContact   String?  @map("backup_contact")
  vendor          String?
  supportContract String?  @map("support_contract")
  supportExpiry   String?  @map("support_expiry")
  
  // Physical Information
  physicalLocation String? @map("physical_location")
  rackLocation     String? @map("rack_location")
  datacenter       String?
  environmentType  EnvironmentType? @default(Production) @map("environment_type")
  
  // Operational Information
  businessFunction String? @map("business_function")
  criticality      SystemCriticality? @default(Medium)
  backupSchedule   String? @map("backup_schedule")
  maintenanceWindow String? @map("maintenance_window")
  
  // Audit and Compliance
  lastInventoryDate String? @map("last_inventory_date")
  complianceNotes  String? @map("compliance_notes")
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  package      Package       @relation(fields: [packageId], references: [id], onDelete: Cascade)
  group        Group?        @relation(fields: [groupId], references: [id], onDelete: SetNull)
  stigScans    StigScan[]
  stigFindings StigFinding[]
  stps         Stp[]
  nessusReports NessusReport[]
  fileAssociations FileAssociation[]
  vulnerabilityScans VulnerabilityScan[]

  @@index([packageId])
  @@index([groupId])
  @@index([ipAddress])
  @@index([hostname])
  @@index([assetTag])
  @@map("systems")
}

// ---
// User & Team Models
// ---

model User {
  id           Int      @id @default(autoincrement())
  firstName    String   @default("") @map("first_name")
  lastName     String   @default("") @map("last_name")
  name         String?  // Computed field for compatibility
  email        String   @unique
  role         UserRole
  password     String?  @map("password_hash")
  isActive     Boolean  @default(true) @map("active")
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  ledTeams             Team[]                 @relation("TeamLead")
  teamMemberships      TeamMembership[]
  stpsCreated          Stp[]                  @relation("StpCreatedBy")
  stpTestCasesAssigned StpTestCase[]          @relation("TestCaseAssignedTo")
  stpEvidenceUploaded  StpEvidence[]          @relation("EvidenceUploadedBy")
  poamsCreated         Poam[]                 @relation("PoamCreatedBy")
  poamsRiskAccepted    Poam[]                 @relation("PoamRiskAcceptedBy")
  poamsApproved        Poam[]                 @relation("PoamApprovedBy")
  poamMilestonesAssigned PoamMilestone[]
  poamComments           PoamComment[]
  poamEvidences        PoamEvidence[]
  poamReviews          PoamReview[]
  auditLogs            AuditLog[]
  uploadedFiles        File[]
  createdFileVersions  FileVersion[]
  fileAuditLogs        FileAuditLog[]
  kcSpacesCreated      KcSpace[]              @relation("KcSpaceCreatedBy")
  kcPagesCreated       KcPage[]               @relation("KcPageCreatedBy")
  notifications        Notification[]
  vulnerabilityScans   VulnerabilityScan[]
  kcPagesUpdated       KcPage[]               @relation("KcPageUpdatedBy")
  kcPageVersions       KcPageVersion[]
  kcComments           KcComment[]
  kcAttachments        KcAttachment[]
  kcSpacePermissions   KcSpacePermission[]
  controlAssessments   NistControl[]       @relation("ControlAssessedBy")
  cciAssessments       NistControlCci[]    @relation("CciAssessedBy")

  @@map("users")
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  leadUserId  Int      @map("lead_user_id")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  lead               User                @relation("TeamLead", fields: [leadUserId], references: [id])
  memberships        TeamMembership[]
  packages           Package[]
  stpsAssigned       Stp[]
  poamsAssigned      Poam[]
  kcSpacePermissions KcSpacePermission[]

  @@map("teams")
}

model TeamMembership {
  userId  Int                 @map("user_id")
  teamId  Int                 @map("team_id")
  role    TeamMembershipRole  @default(Member)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@map("team_memberships")
}

// ---
// STIG Models
// ---

model StigScan {
  id          Int      @id @default(autoincrement())
  systemId    Int      @map("system_id")
  title       String?
  checklistId String?  @map("checklist_id")
  createdAt   DateTime @default(now()) @map("created_at")

  system       System        @relation(fields: [systemId], references: [id], onDelete: Cascade)
  stigFindings StigFinding[]

  @@map("stig_scans")
}

model StigFinding {
  id            Int      @id @default(autoincrement())
  systemId      Int      @map("system_id")
  scanId        Int      @map("scan_id")
  groupId       String?  @map("group_id")
  ruleId        String   @map("rule_id")
  ruleVersion   String?  @map("rule_version")
  ruleTitle     String?  @map("rule_title")
  severity      String?
  status        String?
  findingDetails String?  @map("finding_details")
  checkContent  String?  @map("check_content")
  fixText       String?  @map("fix_text")
  cci           String?
  firstSeen     DateTime @default(now()) @map("first_seen")
  lastSeen      DateTime @updatedAt @map("last_seen")

  system System   @relation(fields: [systemId], references: [id], onDelete: Cascade)
  scan   StigScan @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@unique([systemId, ruleId])
  @@index([systemId])
  @@index([severity])
  @@index([status])
  @@map("stig_findings")
}

// ---
// Security Test Plan (STP) Models
// ---

model Stp {
  id             Int          @id @default(autoincrement())
  title          String
  description    String?      @default("")
  systemId       Int          @map("system_id")
  packageId      Int          @map("package_id")
  status         StpStatus    @default(Draft)
  priority       StpPriority  @default(Medium)
  assignedTeamId Int?         @map("assigned_team_id")
  createdBy      Int          @map("created_by")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  dueDate        String?      @map("due_date")

  system         System        @relation(fields: [systemId], references: [id], onDelete: Cascade)
  package        Package       @relation(fields: [packageId], references: [id], onDelete: Cascade)
  assignedTeam   Team?         @relation(fields: [assignedTeamId], references: [id], onDelete: SetNull)
  creator        User          @relation("StpCreatedBy", fields: [createdBy], references: [id])
  testCases      StpTestCase[]
  evidence       StpEvidence[]
  poams          PoamStp[]

  fileAssociations FileAssociation[]

  @@index([systemId])
  @@index([packageId])
  @@index([status])
  @@index([assignedTeamId])
  @@map("stps")
}

model StpTestCase {
  id             Int              @id @default(autoincrement())
  stpId          Int              @map("stp_id")
  title          String
  description    String?          @default("")
  testProcedure  String?          @default("") @map("test_procedure")
  expectedResult String?          @default("") @map("expected_result")
  actualResult   String?          @default("") @map("actual_result")
  status         StpTestCaseStatus @default(Not_Started)
  assignedUserId Int?             @map("assigned_user_id")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  stp           Stp    @relation(fields: [stpId], references: [id], onDelete: Cascade)
  assignedUser  User?  @relation("TestCaseAssignedTo", fields: [assignedUserId], references: [id], onDelete: SetNull)
  evidence      StpEvidence[]

  fileAssociations FileAssociation[]

  @@index([stpId])
  @@index([status])
  @@map("stp_test_cases")
}

model StpEvidence {
  id               Int      @id @default(autoincrement())
  stpId            Int      @map("stp_id")
  testCaseId       Int?     @map("test_case_id")
  filename         String
  originalFilename String   @map("original_filename")
  fileSize         Int      @map("file_size")
  mimeType         String?  @map("mime_type")
  description      String?  @default("")
  uploadedBy       Int      @map("uploaded_by")
  uploadedAt       DateTime @default(now()) @map("uploaded_at")

  stp        Stp          @relation(fields: [stpId], references: [id], onDelete: Cascade)
  testCase   StpTestCase? @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  uploader   User         @relation("EvidenceUploadedBy", fields: [uploadedBy], references: [id])

  @@index([stpId])
  @@index([testCaseId])
  @@map("stp_evidence")
}

// ---
// POAM (Plan of Action & Milestones) Models
// ---

model Poam {
  id                    Int       @id @default(autoincrement())
  packageId             Int       @map("package_id")
  groupId               Int?      @map("group_id")
  poamNumber            String    @unique @map("poam_number")
  title                 String
  weaknessDescription   String?   @map("weakness_description")
  nistControlId         String?   @map("nist_control_id")
  severity              PoamSeverity @default(Medium)
  status                PoamStatus @default(Draft)
  priority              PoamPriority @default(Medium)

  // Risk Management
  inherentRiskScore     Float?    @map("inherent_risk_score") // 1-100 scale
  residualRiskScore     Float?    @map("residual_risk_score") // After mitigation
  residualRiskLevel     ResidualRiskLevel? @map("residual_risk_level")
  threatLevel           ThreatLevel? @default(Medium) @map("threat_level")
  likelihood            RiskLikelihood? @default(Possible)
  impact                RiskImpact? @default(Moderate)
  riskStatement         String?   @map("risk_statement")
  mitigationStrategy    String?   @map("mitigation_strategy")
  riskAcceptance        Boolean   @default(false) @map("risk_acceptance")
  riskAcceptanceRationale String? @map("risk_acceptance_rationale")
  riskAcceptedBy        Int?      @map("risk_accepted_by")
  riskAcceptedDate      DateTime? @map("risk_accepted_date")

  // Enhanced Date Management
  targetCompletionDate  DateTime? @map("target_completion_date")
  actualCompletionDate  DateTime? @map("actual_completion_date")
  scheduledReviewDate   DateTime? @map("scheduled_review_date")
  lastReviewedDate      DateTime? @map("last_reviewed_date")

  // Points of Contact
  pocName               String?   @map("poc_name")
  pocEmail              String?   @map("poc_email")
  pocPhone              String?   @map("poc_phone")
  altPocName            String?   @map("alt_poc_name")
  altPocEmail           String?   @map("alt_poc_email")
  altPocPhone           String?   @map("alt_poc_phone")

  // Approval Workflow
  approvalStatus        ApprovalStatus @default(Pending) @map("approval_status")
  submittedForApprovalAt DateTime? @map("submitted_for_approval_at")
  approvedBy            Int?      @map("approved_by")
  approvedAt            DateTime? @map("approved_at")
  approvalComments      String?   @map("approval_comments")

  // Metadata
  assignedTeamId        Int?      @map("assigned_team_id")
  createdBy             Int       @map("created_by")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  package      Package         @relation(fields: [packageId], references: [id], onDelete: Cascade)
  group        Group?          @relation(fields: [groupId], references: [id], onDelete: SetNull)
  assignedTeam Team?           @relation(fields: [assignedTeamId], references: [id], onDelete: SetNull)
  creator      User            @relation("PoamCreatedBy", fields: [createdBy], references: [id])
  riskAcceptor User?           @relation("PoamRiskAcceptedBy", fields: [riskAcceptedBy], references: [id])
  approver     User?           @relation("PoamApprovedBy", fields: [approvedBy], references: [id])
  stps         PoamStp[]
  milestones   PoamMilestone[]
  comments     PoamComment[]
  evidences    PoamEvidence[]
  reviews      PoamReview[]
  fileAssociations FileAssociation[]

  @@index([packageId])
  @@index([groupId])
  @@index([status])
  @@index([severity])
  @@index([assignedTeamId])
  @@index([poamNumber])
  @@map("poams")
}

model PoamStp {
  id                     Int      @id @default(autoincrement())
  poamId                 Int      @map("poam_id")
  stpId                  Int      @map("stp_id")
  contributionPercentage Float?   @default(100) @map("contribution_percentage")
  createdAt              DateTime @default(now()) @map("created_at")

  poam Poam @relation(fields: [poamId], references: [id], onDelete: Cascade)
  stp  Stp  @relation(fields: [stpId], references: [id], onDelete: Cascade)

  @@unique([poamId, stpId])
  @@index([poamId])
  @@index([stpId])
  @@map("poam_stps")
}

model PoamMilestone {
  id                    Int                 @id @default(autoincrement())
  poamId                Int                 @map("poam_id")
  title                 String
  description           String?             @default("")
  targetDate            DateTime?           @map("target_date")
  actualDate            DateTime?           @map("actual_date")
  status                PoamMilestoneStatus @default(Pending)
  milestoneType         PoamMilestoneType?  @default(Implementation) @map("milestone_type")
  deliverables          String?             @default("")
  successCriteria       String?             @default("") @map("success_criteria")
  assignedUserId        Int?                @map("assigned_user_id")
  completionPercentage  Float?              @default(0) @map("completion_percentage")
  blockers              String?             // Description of any blocking issues
  dependencies          String?             // Other milestones or tasks this depends on
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")

  poam         Poam  @relation(fields: [poamId], references: [id], onDelete: Cascade)
  assignedUser User? @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)
  evidences    PoamEvidence[]

  @@index([poamId])
  @@index([status])
  @@index([assignedUserId])
  @@index([targetDate])
  @@map("poam_milestones")
}

model PoamComment {
  id           Int             @id @default(autoincrement())
  poamId       Int             @map("poam_id")
  milestoneId  Int?            @map("milestone_id") 
  comment      String
  commentType  PoamCommentType @default(General) @map("comment_type")
  createdBy    Int             @map("created_by")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")

  poam    Poam @relation(fields: [poamId], references: [id], onDelete: Cascade)
  creator User @relation(fields: [createdBy], references: [id])
  
  @@index([poamId])
  @@index([milestoneId])
  @@index([createdBy])
  @@map("poam_comments")
}

model PoamEvidence {
  id            Int          @id @default(autoincrement())
  poamId        Int          @map("poam_id")
  milestoneId   Int?         @map("milestone_id")
  fileName      String       @map("file_name")
  filePath      String?      @map("file_path")
  fileSize      Int?         @map("file_size")
  mimeType      String?      @map("mime_type")
  evidenceType  EvidenceType @default(Document) @map("evidence_type")
  description   String?
  uploadedBy    Int          @map("uploaded_by")
  uploadedAt    DateTime     @default(now()) @map("uploaded_at")

  poam      Poam           @relation(fields: [poamId], references: [id], onDelete: Cascade)
  milestone PoamMilestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  uploader  User           @relation(fields: [uploadedBy], references: [id])

  @@index([poamId])
  @@index([milestoneId])
  @@index([uploadedBy])
  @@map("poam_evidences")
}

model PoamReview {
  id             Int            @id @default(autoincrement())
  poamId         Int            @map("poam_id")
  reviewType     String         @map("review_type") // Quarterly, Annual, Risk_Review, etc.
  reviewDate     DateTime       @map("review_date")
  reviewedBy     Int            @map("reviewed_by")
  findings       String?
  recommendations String?
  nextReviewDate DateTime?      @map("next_review_date")
  createdAt      DateTime       @default(now()) @map("created_at")

  poam     Poam @relation(fields: [poamId], references: [id], onDelete: Cascade)
  reviewer User @relation(fields: [reviewedBy], references: [id])

  @@index([poamId])
  @@index([reviewedBy])
  @@index([reviewDate])
  @@map("poam_reviews")
}

// ---
// Audit & Knowledge Center Models
// ---

model AuditLog {
  id        Int      @id @default(autoincrement())
  event     String
  timestamp DateTime @default(now())
  data      String?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    Int?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([event])
  @@index([timestamp])
  @@index([userId])
  @@map("audit_logs")
}

model KcSpace {
  id          Int            @id @default(autoincrement())
  key         String         @unique
  name        String
  description String?        @default("")
  type        KcSpaceType    @default(team)
  visibility  KcVisibility   @default(public)
  createdBy   Int            @map("created_by")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  creator     User                @relation("KcSpaceCreatedBy", fields: [createdBy], references: [id])
  pages       KcPage[]
  attachments KcAttachment[]
  permissions KcSpacePermission[]

  @@index([key])
  @@index([type])
  @@index([visibility])
  @@index([createdBy])
  @@map("kc_spaces")
}

model KcPage {
  id           Int           @id @default(autoincrement())
  spaceId      Int           @map("space_id")
  parentId     Int?
  title        String
  slug         String
  content      String?       @default("")
  contentType  KcContentType @default(markdown) @map("content_type")
  status       KcPageStatus  @default(draft)
  version      Int           @default(1)
  createdBy    Int           @map("created_by")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedBy    Int           @map("updated_by")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  publishedAt  DateTime?     @map("published_at")

  space        KcSpace         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  parent       KcPage?         @relation("PageHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     KcPage[]        @relation("PageHierarchy")
  creator      User            @relation("KcPageCreatedBy", fields: [createdBy], references: [id])
  updater      User            @relation("KcPageUpdatedBy", fields: [updatedBy], references: [id])
  versions     KcPageVersion[]
  comments     KcComment[]
  attachments  KcAttachment[]

  @@unique([spaceId, slug])
  @@index([spaceId])
  @@index([parentId])
  @@index([slug])
  @@index([status])
  @@index([createdBy])
  @@map("kc_pages")
}

model KcPageVersion {
  id          Int         @id @default(autoincrement())
  pageId      Int         @map("page_id")
  version     Int
  title       String
  content     String?     @default("")
  contentType String      @map("content_type") 
  createdBy   Int         @map("created_by")
  createdAt   DateTime    @default(now()) @map("created_at")
  comment     String?     @default("")

  page    KcPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  creator User   @relation(fields: [createdBy], references: [id])

  @@unique([pageId, version])
  @@index([pageId])
  @@index([version])
  @@map("kc_page_versions")
}

model KcComment {
  id        Int      @id @default(autoincrement())
  pageId    Int      @map("page_id")
  parentId  Int?
  content   String
  createdBy Int      @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  page        KcPage     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  creator     User       @relation(fields: [createdBy], references: [id])
  parent      KcComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     KcComment[] @relation("CommentReplies")

  @@index([pageId])
  @@index([parentId])
  @@index([createdBy])
  @@map("kc_comments")
}

model KcAttachment {
  id               Int      @id @default(autoincrement())
  pageId           Int?     @map("page_id")
  spaceId          Int?     @map("space_id")
  filename         String
  originalFilename String   @map("original_filename")
  fileSize         Int      @map("file_size")
  mimeType         String?  @map("mime_type")
  description      String?  @default("")
  uploadedBy       Int      @map("uploaded_by")
  uploadedAt       DateTime @default(now()) @map("uploaded_at")

  page    KcPage?  @relation(fields: [pageId], references: [id], onDelete: Cascade)
  space   KcSpace? @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  uploader User    @relation(fields: [uploadedBy], references: [id])

  @@index([pageId])
  @@index([spaceId])
  @@index([uploadedBy])
  @@map("kc_attachments")
}

model KcSpacePermission {
  id         Int              @id @default(autoincrement())
  spaceId    Int              @map("space_id")
  userId     Int?
  teamId     Int?
  permission KcPermissionLevel @default(read)
  createdAt  DateTime         @default(now()) @map("created_at")

  space KcSpace @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user  User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team  Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([spaceId])
  @@index([userId])
  @@index([teamId])
  @@map("kc_space_permissions")
}

// ---
// Nessus Vulnerability Models
// ---

model NessusReport {
  id                    Int       @id @default(autoincrement())
  packageId             Int?      @map("package_id")
  systemId              Int?      @map("system_id")
  filename              String
  scan_name             String    @map("scan_name")
  scan_date             String    @map("scan_date")
  total_hosts           Int       @map("total_hosts")
  total_vulnerabilities Int       @map("total_vulnerabilities")
  scan_metadata         String?   @map("scan_metadata")
  createdAt             DateTime  @default(now()) @map("created_at")

  package         Package?              @relation(fields: [packageId], references: [id], onDelete: Cascade)
  system          System?               @relation(fields: [systemId], references: [id], onDelete: Cascade)
  hosts           NessusHost[]
  vulnerabilities NessusVulnerability[]

  @@index([packageId])
  @@index([systemId])
  @@index([scan_date])
  @@map("nessus_reports")
}

model NessusHost {
  id                    Int       @id @default(autoincrement())
  reportId              Int       @map("report_id")
  hostname              String
  ip_address            String    @map("ip_address")
  mac_address           String?   @map("mac_address")
  os_info               String?   @map("os_info")
  total_vulnerabilities Int       @map("total_vulnerabilities")
  critical_count        Int       @default(0) @map("critical_count")
  high_count            Int       @default(0) @map("high_count")
  medium_count          Int       @default(0) @map("medium_count")
  low_count             Int       @default(0) @map("low_count")
  info_count            Int       @default(0) @map("info_count")

  report          NessusReport          @relation(fields: [reportId], references: [id], onDelete: Cascade)
  vulnerabilities NessusVulnerability[]

  @@index([reportId])
  @@index([ip_address])
  @@map("nessus_hosts")
}

model NessusVulnerability {
  id                      Int       @id @default(autoincrement())
  reportId                Int       @map("report_id")
  hostId                  Int       @map("host_id")
  plugin_id               Int       @map("plugin_id")
  plugin_name             String    @map("plugin_name")
  plugin_family           String    @map("plugin_family")
  severity                Int
  port                    String?
  protocol                String?
  service                 String?
  description             String?   @db.Text
  solution                String?   @db.Text
  synopsis                String?   @db.Text
  cve                     String?
  cvss_score              Float?    @map("cvss_score")
  cvss3_score             Float?    @map("cvss3_score")
  plugin_output           String?   @db.Text @map("plugin_output")
  risk_factor             String?   @map("risk_factor")
  exploit_available       Boolean?  @default(false) @map("exploit_available")
  patch_publication_date  String?   @map("patch_publication_date")
  vuln_publication_date   String?   @map("vuln_publication_date")

  report NessusReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  host   NessusHost   @relation(fields: [hostId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([hostId])
  @@index([plugin_id])
  @@index([severity])
  @@index([plugin_family])
  @@map("nessus_vulnerabilities")
}

// ---
// NIST Control Catalog Models
// ---

model NistControl {
  id             Int      @id @default(autoincrement())
  controlId      String   @unique @map("control_id") // e.g., "AC-1", "AC-11(1)"
  name           String
  controlText    String   @db.Text @map("control_text")
  discussion     String?  @db.Text
  complianceStatus ComplianceStatus? @default(NOT_ASSESSED) @map("compliance_status")
  complianceNotes  String? @db.Text @map("compliance_notes")
  assessedBy       Int? @map("assessed_by")
  assessedAt       DateTime? @map("assessed_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  relatedControls NistControlRelation[] @relation("SourceControl")
  ccis            NistControlCci[]
  assessor        User? @relation("ControlAssessedBy", fields: [assessedBy], references: [id], onDelete: SetNull)

  @@index([controlId])
  @@index([complianceStatus])
  @@map("nist_controls")
}

model NistControlRelation {
  id                Int    @id @default(autoincrement())
  sourceControlId   Int    @map("source_control_id")
  relatedControlId  String @map("related_control_id") // Store as string since related control might not exist yet

  sourceControl NistControl @relation("SourceControl", fields: [sourceControlId], references: [id], onDelete: Cascade)

  @@unique([sourceControlId, relatedControlId])
  @@index([sourceControlId])
  @@index([relatedControlId])
  @@map("nist_control_relations")
}

model NistControlCci {
  id          Int    @id @default(autoincrement())
  controlId   Int    @map("control_id")
  cci         String // e.g., "CCI-000002"
  definition  String @db.Text
  complianceStatus ComplianceStatus? @default(NOT_ASSESSED) @map("compliance_status")
  complianceNotes  String? @db.Text @map("compliance_notes")
  assessedBy       Int? @map("assessed_by")
  assessedAt       DateTime? @map("assessed_at")

  control NistControl @relation(fields: [controlId], references: [id], onDelete: Cascade)
  assessor User? @relation("CciAssessedBy", fields: [assessedBy], references: [id], onDelete: SetNull)

  @@unique([controlId, cci])
  @@index([controlId])
  @@index([cci])
  @@index([complianceStatus])
  @@map("nist_control_ccis")
}

// ---
// File Manager Models
// ---

model File {
  id               Int      @id @default(autoincrement())
  filename         String
  originalFilename String   @map("original_filename")
  fileSize         Int      @map("file_size")
  mimeType         String?  @map("mime_type")
  filePath         String   @map("file_path")
  description      String?  @default("")
  uploadedBy       Int      @map("uploaded_by")
  uploadedAt       DateTime @default(now()) @map("uploaded_at")
  lastModified     DateTime @updatedAt @map("last_modified")
  
  uploader     User     @relation(fields: [uploadedBy], references: [id])
  versions     FileVersion[]
  associations FileAssociation[]
  auditLogs    FileAuditLog[]
  
  @@index([uploadedBy])
  @@map("files")
}

model FileVersion {
  id          Int      @id @default(autoincrement())
  fileId      Int      @map("file_id")
  version     Int
  filename    String
  fileSize    Int      @map("file_size")
  mimeType    String?  @map("mime_type")
  filePath    String   @map("file_path")
  description String?  @default("")
  createdBy   Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  comment     String?  @default("")
  
  file      File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  creator   User @relation(fields: [createdBy], references: [id])
  
  @@unique([fileId, version])
  @@index([fileId])
  @@index([version])
  @@map("file_versions")
}

model FileAssociation {
  id             Int            @id @default(autoincrement())
  fileId         Int            @map("file_id")
  associationType FileAssociationType @map("association_type")
  stpId          Int?           @map("stp_id")
  testCaseId     Int?           @map("test_case_id")
  poamId         Int?           @map("poam_id")
  systemId       Int?           @map("system_id")
  description    String?        @default("")
  createdAt      DateTime       @default(now()) @map("created_at")
  
  file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  stp     Stp?    @relation(fields: [stpId], references: [id], onDelete: Cascade)
  testCase StpTestCase? @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  poam    Poam?   @relation(fields: [poamId], references: [id], onDelete: Cascade)
  system  System? @relation(fields: [systemId], references: [id], onDelete: Cascade)
  
  @@index([fileId])
  @@index([associationType])
  @@index([stpId])
  @@index([testCaseId])
  @@index([poamId])
  @@index([systemId])
  @@map("file_associations")
}

model FileAuditLog {
  id        Int      @id @default(autoincrement())
  fileId    Int      @map("file_id")
  action    FileAuditAction
  userId    Int?     @map("user_id")
  details   String?  @default("")
  timestamp DateTime @default(now())
  ipAddress String?  @map("ip_address")
  
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([fileId])
  @@index([action])
  @@index([userId])
  @@index([timestamp])
  @@map("file_audit_logs")
}

// ---
// ENUMS
// ---


enum SystemType {
  Major_Application
  General_Support_System
  Minor_Application
  Subsystem
}

enum ImpactLevel {
  Low
  Moderate
  High
}

enum AuthorizationStatus {
  Not_Started
  In_Progress
  Authorized
  Reauthorization_Required
  Expired
  Denied
}

enum ResidualRiskLevel {
  Very_Low
  Low
  Moderate
  High
  Very_High
}

enum MissionCriticality {
  Mission_Critical
  Mission_Essential
  Mission_Support
}

enum DataClassification {
  Unclassified
  CUI
  Confidential
  Secret
  Top_Secret
  TS_SCI  // Top Secret Sensitive Compartmented Information
}

enum SecurityControlBaseline {
  Low
  Moderate
  High
  Tailored
}

enum PoamStatus {
  Draft
  Open
  In_Progress
  Completed
  Closed
  Cancelled
}

enum ContinuousMonitoringStatus {
  Fully_Implemented
  Partially_Implemented
  Not_Implemented
}

enum UserRole {
  Admin
  ISSM
  ISSO
  SysAdmin
  ISSE
  Auditor
}

enum TeamMembershipRole {
  Lead
  Member
}

enum StpStatus {
  Draft
  In_Progress
  Under_Review
  Approved
  Rejected
}

enum StpPriority {
  Low
  Medium
  High
  Critical
}

enum StpTestCaseStatus {
  Not_Started
  In_Progress
  Passed
  Failed
  Blocked
}

enum KcSpaceType {
  personal
  team
  global
}

enum KcVisibility {
  public
  restricted
  private
}

enum KcContentType {
  markdown
  html
  rich_text
}

enum KcPageStatus {
  draft
  published
  archived
}

enum KcPermissionLevel {
  read
  write
  admin
}

enum PoamSeverity {
  Critical
  High
  Medium
  Low
}

enum PoamPriority {
  Low
  Medium
  High
  Critical
}

enum PoamMilestoneStatus {
  Pending
  In_Progress
  Completed
  Delayed
  Cancelled
}

enum PoamMilestoneType {
  Planning
  Design
  Implementation
  Testing
  Documentation
  Review
  Deployment
}

enum PoamCommentType {
  General
  Status_Update
  Risk_Assessment
  Technical_Note
  Management_Decision
}

enum ThreatLevel {
  Very_Low
  Low
  Medium
  High
  Critical
}

enum RiskLikelihood {
  Very_Unlikely
  Unlikely
  Possible
  Likely
  Very_Likely
}

enum RiskImpact {
  Negligible
  Minor
  Moderate
  Major
  Severe
}

enum ApprovalStatus {
  Pending
  Under_Review
  Approved
  Rejected
  Returned_For_Revision
}

enum EvidenceType {
  Screenshot
  Document
  Test_Result
  Scan_Report
  Configuration_File
  Log_File
  Other
}

// ---
// New RMF and System Management Enums
// ---

enum RmfStep {
  Categorize
  Select
  Implement
  Assess
  Authorize
  Monitor
}

enum SystemOperatingSystem {
  // Windows Server
  Windows_Server_2022
  Windows_Server_2019
  Windows_Server_2016
  Windows_Server_2012_R2
  Windows_Server_2012
  
  // Windows Desktop
  Windows_11
  Windows_10
  Windows_8_1
  Windows_7
  
  // Linux Server Distributions
  RHEL_9
  RHEL_8
  RHEL_7
  CentOS_9
  CentOS_8
  CentOS_7
  Ubuntu_22_04_LTS
  Ubuntu_20_04_LTS
  Ubuntu_18_04_LTS
  SUSE_Linux_Enterprise_15
  SUSE_Linux_Enterprise_12
  Oracle_Linux_9
  Oracle_Linux_8
  Amazon_Linux_2
  Rocky_Linux_9
  Rocky_Linux_8
  AlmaLinux_9
  AlmaLinux_8
  
  // Linux Desktop
  Ubuntu_Desktop
  Fedora_Workstation
  CentOS_Desktop
  RHEL_Workstation
  
  // Unix Systems
  AIX_7_3
  AIX_7_2
  Solaris_11_4
  HP_UX_11_31
  
  // Network Operating Systems
  Cisco_IOS
  Cisco_IOS_XE
  Cisco_NX_OS
  Juniper_Junos
  
  // Virtualization
  VMware_vSphere_8
  VMware_vSphere_7
  VMware_vSphere_6_7
  Citrix_XenServer
  Microsoft_Hyper_V
  
  // Container Platforms
  Docker_Engine
  Kubernetes
  OpenShift_4
  Rancher
  
  // Cloud Operating Systems
  Amazon_Linux
  Google_Container_Optimized_OS
  Azure_Linux
  
  // Database Systems
  Oracle_Database_19c
  Oracle_Database_12c
  SQL_Server_2022
  SQL_Server_2019
  MySQL_8_0
  PostgreSQL_15
  MongoDB_6_0
  
  // Other/Legacy
  Other
  Unknown
}

enum SystemArchitecture {
  x86_64      // 64-bit x86
  x86_32      // 32-bit x86
  ARM64       // 64-bit ARM
  ARM32       // 32-bit ARM
  PowerPC
  SPARC
  IA_64       // Intel Itanium
  MIPS
  Other
}

enum EncryptionStatus {
  Fully_Encrypted
  Partially_Encrypted
  Not_Encrypted
  Unknown
}

enum AntivirusStatus {
  Installed_Current
  Installed_Outdated
  Not_Installed
  Not_Applicable
  Unknown
}

enum LifecycleStatus {
  Planning
  Development
  Testing
  Active
  Maintenance_Mode
  End_of_Life
  Decommissioned
  Retired
}

enum EnvironmentType {
  Production
  Staging
  Development
  Testing
  Training
  Backup
  Disaster_Recovery
  Sandbox
}

enum SystemCriticality {
  Critical
  High
  Medium
  Low
  Non_Essential
}

enum FileAssociationType {
  STP_EVIDENCE
  TEST_CASE_EVIDENCE
  POAM_EVIDENCE
  SYSTEM_EVIDENCE
  GENERAL
}

enum FileAuditAction {
  UPLOADED
  DOWNLOADED
  UPDATED
  DELETED
  VERSION_CREATED
  ASSOCIATED
  DISASSOCIATED
}

enum ComplianceStatus {
  NOT_ASSESSED
  NC_U  // Non-Compliant Unofficial
  NC_O  // Non-Compliant Official
  CU    // Compliant Unofficial
  CO    // Compliant Official
  NA_U  // Not Applicable Unofficial
  NA_O  // Not Applicable Official
}

// ---
// Notification Model
// ---

model Notification {
  id        String   @id @default(uuid())
  userId    Int      @map("user_id")
  type      String
  message   String
  priority  String   @default("low")
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

// ---
// Vulnerability Scan Model
// ---

model VulnerabilityScan {
  id                   String   @id @default(uuid())
  systemId             Int      @map("system_id")
  scanType             String   @map("scan_type")
  status               String
  startedAt            DateTime @map("started_at")
  completedAt          DateTime? @map("completed_at")
  vulnerabilitiesFound Int      @default(0) @map("vulnerabilities_found")
  userId               Int      @map("user_id")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  system System @relation(fields: [systemId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@index([systemId])
  @@index([status])
  @@index([createdAt])
  @@map("vulnerability_scans")
}
