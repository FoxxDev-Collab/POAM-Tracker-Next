import { Test, TestingModule } from '@nestjs/testing';
import { VulnerabilityScanProcessor } from './vulnerability-scan.processor';
import { PrismaService } from '../../prisma/prisma.service';
import { Job } from 'bullmq';

describe('VulnerabilityScanProcessor', () => {
  let processor: VulnerabilityScanProcessor;
  let prisma: PrismaService;

  const mockPrismaService = {
    vulnerabilityScan: {
      create: jest.fn(),
    },
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        VulnerabilityScanProcessor,
        {
          provide: PrismaService,
          useValue: mockPrismaService,
        },
      ],
    }).compile();

    processor = module.get<VulnerabilityScanProcessor>(VulnerabilityScanProcessor);
    prisma = module.get<PrismaService>(PrismaService);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should be defined', () => {
    expect(processor).toBeDefined();
  });

  describe('process', () => {
    it('should process parse-nessus job', async () => {
      const job = {
        id: '124',
        name: 'parse-nessus',
        data: {
          filePath: '/tmp/nessus-scan.xml',
          systemId: '1',
          userId: '1',
        },
      } as Job;

      const result = await processor.process(job);

      expect(result).toHaveProperty('success', true);
      expect(result).toHaveProperty('vulnerabilitiesImported', 0);
    });

    it('should throw error for unknown job type', async () => {
      const job = {
        id: '126',
        name: 'unknown-job',
        data: {},
      } as Job;

      await expect(processor.process(job)).rejects.toThrow('Unknown job type: unknown-job');
    });
  });
});
